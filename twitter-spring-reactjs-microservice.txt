[{
  ".gitignore": {
    "file": {
      "contents": `HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
`
    }
  },
  "api-gateway": {
    "directory": {
      "Dockerfile": {
        "file": {
          "contents": `FROM openjdk:17
MAINTAINER Miroslav Khotinskiy <merikbest2015@gmail.com>
COPY target/api-gateway-0.0.1-SNAPSHOT.jar ./
CMD ["java", "-jar", "api-gateway-0.0.1-SNAPSHOT.jar"]
`
        }
      },
      "pom.xml": {
        "file": {
          "contents": `<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>twitter-spring-reactjs</artifactId>
        <groupId>com.gmail.merikbest2015</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>api-gateway</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>api-gateway</name>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>com.gmail.merikbest2015</groupId>
            <artifactId>commons</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
`
        }
      },
      "src": {
        "directory": {
          "main": {
            "directory": {
              "java": {
                "directory": {
                  "com": {
                    "directory": {
                      "gmail": {
                        "directory": {
                          "merikbest2015": {
                            "directory": {
                              "ApiGatewayApplication.java": {
                                "file": {
                                  "contents": `package com.gmail.merikbest2015;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

@EnableEurekaClient
@EnableFeignClients
@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
public class ApiGatewayApplication {
    public static void main(String[] args) {
        SpringApplication.run(ApiGatewayApplication.class, args);
    }
}
`
                                }
                              },
                              "filter": {
                                "directory": {
                                  "AuthFilter.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.filter;

import com.gmail.merikbest2015.dto.response.user.UserPrincipalResponse;
import com.gmail.merikbest2015.security.JwtAuthenticationException;
import com.gmail.merikbest2015.security.JwtProvider;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import static com.gmail.merikbest2015.constants.ErrorMessage.JWT_TOKEN_EXPIRED;
import static com.gmail.merikbest2015.constants.FeignConstants.USER_SERVICE;
import static com.gmail.merikbest2015.constants.PathConstants.*;

@Component
public class AuthFilter extends AbstractGatewayFilterFactory<AuthFilter.Config> {

    private final JwtProvider jwtProvider;
    private final RestTemplate restTemplate;

    public AuthFilter(JwtProvider jwtProvider, RestTemplate restTemplate) {
        super(Config.class);
        this.jwtProvider = jwtProvider;
        this.restTemplate = restTemplate;
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            String token = jwtProvider.resolveToken(exchange.getRequest());
            boolean isTokenValid = jwtProvider.validateToken(token);

            if (token != null && isTokenValid) {
                String email = jwtProvider.parseToken(token);
                UserPrincipalResponse user = restTemplate.getForObject(
                        String.format("http://%s:8001%s", USER_SERVICE, API_V1_AUTH + USER_EMAIL),
                        UserPrincipalResponse.class,
                        email
                );

                if (user.getActivationCode() != null) {
                    throw new JwtAuthenticationException("Email not activated");
                }
                exchange.getRequest()
                        .mutate()
                        .header(AUTH_USER_ID_HEADER, String.valueOf(user.getId()))
                        .build();
                return chain.filter(exchange);
            } else {
                throw new JwtAuthenticationException(JWT_TOKEN_EXPIRED);
            }
        };
    }

    public static class Config {
    }
}
`
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "resources": {
                "directory": {
                  "bootstrap.yml": {
                    "file": {
                      "contents": `spring:
    main:
        web-application-type: reactive
    application:
        name: api-gateway
    cloud:
        config:
            uri: http://$\{CONFIG_SERVER_HOST:localhost}:8888/
`
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "commons": {
    "directory": {
      "pom.xml": {
        "file": {
          "contents": `<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>twitter-spring-reactjs</artifactId>
        <groupId>com.gmail.merikbest2015</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>commons</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>commons</name>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>3.1.1</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.1</version>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
`
        }
      },
      "src": {
        "directory": {
          "main": {
            "directory": {
              "java": {
                "directory": {
                  "com": {
                    "directory": {
                      "gmail": {
                        "directory": {
                          "merikbest2015": {
                            "directory": {
                              "configuration": {
                                "directory": {
                                  "AmqpConfiguration.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.configuration;

import lombok.RequiredArgsConstructor;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@RequiredArgsConstructor
public class AmqpConfiguration {

    private final ConnectionFactory connectionFactory;

    @Bean
    public AmqpTemplate amqpTemplate() {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
        rabbitTemplate.setMessageConverter(jacksonConverter());
        return rabbitTemplate;
    }

    @Bean
    public SimpleRabbitListenerContainerFactory simpleRabbitListenerContainerFactory() {
        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
        factory.setMessageConverter(jacksonConverter());
        return factory;
    }

    @Bean
    public MessageConverter jacksonConverter() {
        return new Jackson2JsonMessageConverter();
    }
}
`
                                    }
                                  },
                                  "ApplicationConfiguration.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.configuration;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationConfiguration {
    @Bean
    public ModelMapper modelMapper() {
        ModelMapper mapper = new ModelMapper();
        mapper.getConfiguration()
                .setMatchingStrategy(MatchingStrategies.STRICT)
                .setFieldMatchingEnabled(true)
                .setSkipNullEnabled(true)
                .setFieldAccessLevel(org.modelmapper.config.Configuration.AccessLevel.PRIVATE);
        return mapper;
    }
}
`
                                    }
                                  },
                                  "FeignConfiguration.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.configuration;

import feign.RequestInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;

import static com.gmail.merikbest2015.constants.PathConstants.AUTH_USER_ID_HEADER;

@Configuration
public class FeignConfiguration {

    @Bean
    public RequestInterceptor requestInterceptor() {
        return template -> {
            RequestAttributes attributes = RequestContextHolder.getRequestAttributes();
            HttpServletRequest request = ((ServletRequestAttributes) attributes).getRequest();
            template.header(AUTH_USER_ID_HEADER, request.getHeader(AUTH_USER_ID_HEADER));
        };
    }
}
`
                                    }
                                  },
                                  "MvcConfiguration.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.configuration;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class MvcConfiguration implements WebMvcConfigurer {

    @Value("$\{hostname:http://localhost:3000}")
    private String hostname;

    @Bean
    @LoadBalanced
    public RestTemplate getRestTemplate() {
        return new RestTemplate();
    }

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/ui/v1/**")
                .allowedOrigins(hostname)
                .allowedMethods("HEAD", "OPTIONS", "GET", "POST", "PUT", "PATCH", "DELETE")
                .exposedHeaders("page-total-count")
                .allowedHeaders("*");
    }
}
`
                                    }
                                  }
                                }
                              },
                              "constants": {
                                "directory": {
                                  "ErrorMessage.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.constants;

public class ErrorMessage {
    public static final String JWT_TOKEN_EXPIRED = "JWT token is expired or invalid";

    public static final String USER_NOT_FOUND = "User not found";
    public static final String USER_PROFILE_BLOCKED = "User profile blocked";
    public static final String USER_ID_NOT_FOUND = "User (id:%s) not found";

    public static final String EMAIL_NOT_FOUND = "Email not found";
    public static final String EMAIL_NOT_VALID = "Please enter a valid email address.";
    public static final String EMAIL_HAS_ALREADY_BEEN_TAKEN = "Email has already been taken.";
    public static final String BLANK_NAME = "What’s your name?";
    public static final String NAME_NOT_VALID = "Please enter a valid name.";

    public static final String PASSWORDS_NOT_MATCH = "Passwords do not match.";
    public static final String INCORRECT_PASSWORD = "The password you entered was incorrect.";
    public static final String INVALID_PASSWORD_RESET_CODE = "Password reset code is invalid!";
    public static final String PASSWORD_LENGTH_ERROR = "Your password needs to be at least 8 characters";
    public static final String EMPTY_PASSWORD = "Password cannot be empty.";
    public static final String EMPTY_CURRENT_PASSWORD = "Current password cannot be empty.";
    public static final String EMPTY_PASSWORD_CONFIRMATION = "Password confirmation cannot be empty.";
    public static final String SHORT_PASSWORD = "Your password needs to be at least 8 characters. Please enter a longer one.";

    public static final String ACTIVATION_CODE_NOT_FOUND = "Activation code not found.";
    public static final String INCORRECT_USERNAME_LENGTH = "Incorrect username length";
    public static final String INVALID_PHONE_NUMBER = "Not valid phone number";
    public static final String INVALID_GENDER_LENGTH = "Incorrect gender length";

    public static final String TWEET_NOT_FOUND = "Tweet not found";
    public static final String INCORRECT_TWEET_TEXT_LENGTH = "Incorrect tweet text length";
    public static final String TWEET_DELETED = "Sorry, that Tweet has been deleted.";

    public static final String INCORRECT_POLL_CHOICES = "Incorrect poll choices";
    public static final String INCORRECT_CHOICE_TEXT_LENGTH = "Incorrect choice text length";
    public static final String POLL_NOT_FOUND = "Poll in tweet not exist";
    public static final String POLL_CHOICE_NOT_FOUND = "Poll choice not found";
    public static final String POLL_IS_NOT_AVAILABLE = "Poll is not available";
    public static final String USER_VOTED_IN_POLL = "User voted in poll";

    public static final String TOPIC_NOT_FOUND = "Topic not found";

    public static final String TAG_NOT_FOUND = "Tag not found";

    public static final String NOTIFICATION_NOT_FOUND = "Notification not found";

    public static final String CHAT_NOT_FOUND = "Chat not found";
    public static final String CHAT_PARTICIPANT_NOT_FOUND = "Participant not found";
    public static final String CHAT_PARTICIPANT_BLOCKED = "Participant is blocked";

    public static final String LIST_NOT_FOUND = "List not found";
    public static final String INCORRECT_LIST_NAME_LENGTH = "Incorrect list name length";
    public static final String LIST_OWNER_NOT_FOUND = "List owner not found";
    public static final String USER_ID_BLOCKED = "User with ID:%s is blocked";
}
`
                                    }
                                  },
                                  "FeignConstants.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.constants;

public class FeignConstants {
    public static final String USER_SERVICE = "user-service";
    public static final String TWEET_SERVICE = "tweet-service";
    public static final String LISTS_SERVICE = "lists-service";
    public static final String TAG_SERVICE = "tag-service";
    public static final String IMAGE_SERVICE = "image-service";
    public static final String EMAIL_SERVICE = "email-service";
    public static final String NOTIFICATION_SERVICE = "notification-service";
    public static final String WEBSOCKET_SERVICE = "websocket-service";
}
`
                                    }
                                  },
                                  "PathConstants.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.constants;

public class PathConstants {

    public static final String AUTH_USER_ID_HEADER = "X-auth-user-id";

    public static final String API_V1 = "/api/v1";
    public static final String UI_V1 = "/ui/v1";

    public static final String AUTH = "/auth";
    public static final String UI_V1_AUTH = UI_V1 + AUTH;
    public static final String LOGIN = "/login";
    public static final String REGISTRATION_CHECK = "/registration/check";
    public static final String REGISTRATION_CODE = "/registration/code";
    public static final String REGISTRATION_ACTIVATE_CODE = "/registration/activate/{code}";
    public static final String REGISTRATION_CONFIRM = "/registration/confirm";
    public static final String FORGOT = "/forgot";
    public static final String FORGOT_EMAIL = FORGOT + "/email";
    public static final String RESET = "/reset";
    public static final String RESET_CODE = RESET + "/{code}";
    public static final String RESET_CURRENT = RESET + "/current";

    public static final String USER = "/user";
    public static final String API_V1_USER = API_V1 + USER;
    public static final String UI_V1_USER = UI_V1 + USER;
    public static final String BLOCKED = "/blocked";
    public static final String BLOCKED_USER_ID = BLOCKED + "/{userId}";
    public static final String FOLLOWERS_USER_ID = "/followers/{userId}";
    public static final String FOLLOWING_USER_ID = "/following/{userId}";
    public static final String FOLLOWER_REQUESTS = "/follower-requests";
    public static final String FOLLOW_USER_ID = "/follow/{userId}";
    public static final String FOLLOW_OVERALL = "/follow/overall/{userId}";
    public static final String FOLLOW_PRIVATE = "/follow/private/{userId}";
    public static final String FOLLOW_ACCEPT = "/follow/accept/{userId}";
    public static final String FOLLOW_DECLINE = "/follow/decline/{userId}";
    public static final String MUTED = "/muted";
    public static final String MUTED_USER_ID = MUTED + "/{userId}";
    public static final String TOKEN = "/token";
    public static final String USER_ID = "/{userId}";
    public static final String ALL = "/all";
    public static final String RELEVANT = "/relevant";
    public static final String SEARCH_USERNAME = "/items/search/{username}";
    public static final String START = "/start";
    public static final String SUBSCRIBE_USER_ID = "/subscribe/{userId}";
    public static final String PIN_TWEET_ID = "/pin/tweet/{tweetId}";
    public static final String DETAILS_USER_ID = "/details/{userId}";

    public static final String UI_V1_USER_SETTINGS_UPDATE = UI_V1_USER + "/settings/update";
    public static final String USERNAME = "/username";
    public static final String EMAIL = "/email";
    public static final String PHONE = "/phone";
    public static final String COUNTRY = "/country";
    public static final String GENDER = "/gender";
    public static final String LANGUAGE = "/language";
    public static final String DIRECT = "/direct";
    public static final String PRIVATE = "/private";
    public static final String COLOR_SCHEME = "/color_scheme";
    public static final String BACKGROUND_COLOR = "/background_color";

    public static final String API_V1_AUTH = API_V1 + AUTH;
    public static final String USER_EMAIL = "/user/{email}";
    public static final String IDS = "/ids";
    public static final String SUBSCRIBERS_USER_ID = "/subscribers/{userId}";
    public static final String IS_FOLLOWED_USER_ID = "/is_followed/{userId}";
    public static final String IS_PRIVATE_USER_ID = "/is_private/{userId}";
    public static final String IS_BLOCKED_USER_ID = "/is_blocked/{userId}/{blockedUserId}";
    public static final String IS_USER_BLOCKED_USER_ID = "/is_user_blocked/{userId}";
    public static final String IS_MY_PROFILE_BLOCKED_USER_ID = "/is_my_profile_blocked/{userId}";
    public static final String NOTIFICATION_USER_ID = "/notification/{userId}";
    public static final String LIKE_COUNT = "/like/count/{increaseCount}";
    public static final String TWEET_COUNT = "/tweet/count/{increaseCount}";
    public static final String MEDIA_COUNT = "/media/count/{increaseCount}";
    public static final String LIST_OWNER_USER_ID = "/list/owner/{userId}";
    public static final String LIST_PARTICIPANTS = "/list/participants";
    public static final String LIST_PARTICIPANTS_USERNAME = LIST_PARTICIPANTS + "/{username}";
    public static final String NOTIFICATION_USER_USER_ID = "/notification/user/{userId}";
    public static final String TWEET_AUTHOR_USER_ID = "/tweet/author/{userId}";
    public static final String TWEET_ADDITIONAL_INFO_USER_ID = "/tweet/additional/info/{userId}";
    public static final String TWEET_LIKED = "/tweet/liked";
    public static final String TWEET_RETWEETED = "/tweet/retweeted";
    public static final String TWEET_PINNED_TWEET_ID = "/tweet/pinned/{tweetId}";
    public static final String TWEET_PINNED_USER_ID = "/tweet/pinned/{userId}";
    public static final String TWEET_VALID_IDS = "/tweet/valid/ids/{text}";
    public static final String VALID_IDS = "/valid/ids";
    public static final String CHAT_PARTICIPANT_USER_ID = "/chat/participant/{userId}";
    public static final String IS_EXISTS_USER_ID = "/is_exists/{userId}";
    public static final String CHAT_USER_ID = "/chat/{userId}";
    public static final String CHAT_VALID_IDS = "/chat/valid/ids";
    public static final String SUBSCRIBERS = "/subscribers";
    public static final String SUBSCRIBERS_IDS = SUBSCRIBERS + "/ids";
    public static final String NOTIFICATION_RESET = "/notification/reset";

    public static final String TAGS = "/tags";
    public static final String UI_V1_TAGS = UI_V1 + TAGS;
    public static final String TRENDS = "/trends";
    public static final String SEARCH = "/search";
    public static final String API_V1_TAGS = API_V1 + TAGS;
    public static final String PARSE_TWEET_ID = "/parse/{tweetId}";
    public static final String DELETE_TWEET_ID = "/delete/{tweetId}";

    public static final String TWEETS = "/tweets";
    public static final String API_V1_TWEETS = API_V1 + TWEETS;
    public static final String TAG_IDS = "/tag/ids";
    public static final String USER_IDS = "/user/ids";
    public static final String TWEET_ID = "/{tweetId}";
    public static final String NOTIFICATION_TWEET_ID = "/notification/{tweetId}";
    public static final String ID_TWEET_ID = "/id/{tweetId}";
    public static final String COUNT_TEXT = "/count/{text}";
    public static final String CHAT_TWEET_ID = "/chat/{tweetId}";
    public static final String UI_V1_TWEETS = UI_V1 + TWEETS;
    public static final String USER_BOOKMARKS = "/user/bookmarks";
    public static final String USER_BOOKMARKS_TWEET_ID = USER_BOOKMARKS + "/{tweetId}";
    public static final String TWEET_ID_BOOKMARKED = "/{tweetId}/bookmarked";
    public static final String LIKED_USER_USER_ID = "/liked/user/{userId}";
    public static final String TWEET_ID_LIKED_USERS = "/{tweetId}/liked-users";
    public static final String LIKE_USER_ID_TWEET_ID = "/like/{userId}/{tweetId}";
    public static final String POLL = "/poll";
    public static final String VOTE = "/vote";
    public static final String REPLIES_USER_ID = "/replies/user/{userId}";
    public static final String TWEET_ID_RETWEETED_USERS = "/{tweetId}/retweeted-users";
    public static final String RETWEET_USER_ID_TWEET_ID = "/retweet/{userId}/{tweetId}";
    public static final String USER_USER_ID = "/user/{userId}";
    public static final String MEDIA_USER_USER_ID = "/media/user/{userId}";
    public static final String USER_MENTIONS = "/user/mentions";
    public static final String IMAGES_USER_ID = "/images/{userId}";
    public static final String TWEET_ID_INFO = "/{tweetId}/info";
    public static final String TWEET_ID_REPLIES = "/{tweetId}/replies";
    public static final String TWEET_ID_QUOTES = "/{tweetId}/quotes";
    public static final String MEDIA = "/media";
    public static final String VIDEO = "/video";
    public static final String FOLLOWER = "/follower";
    public static final String SCHEDULE = "/schedule";
    public static final String SEARCH_TEXT = "/search/{text}";
    public static final String REPLY_USER_ID_TWEET_ID = "/reply/{userId}/{tweetId}";
    public static final String QUOTE_USER_ID_TWEET_ID = "/quote/{userId}/{tweetId}";
    public static final String REPLY_CHANGE_USER_ID_TWEET_ID = "/reply/change/{userId}/{tweetId}";

    public static final String API_V1_IMAGE = API_V1 + "/image";
    public static final String UPLOAD = "/upload";

    public static final String API_V1_EMAIL = API_V1 + "/email";
    public static final String SUGGESTED = "/suggested";

    public static final String UI_V1_TOPICS = UI_V1 + "/topics";
    public static final String CATEGORY = "/category";
    public static final String FOLLOWED = "/followed";
    public static final String FOLLOWED_USER_ID = "/followed/{userId}";
    public static final String NOT_INTERESTED = "/not_interested";
    public static final String NOT_INTERESTED_TOPIC_ID = NOT_INTERESTED + "/{topicId}";
    public static final String FOLLOW_TOPIC_ID = "/follow/{topicId}";

    public static final String LISTS = "/lists";
    public static final String API_V1_LISTS = API_V1 + LISTS;
    public static final String UI_V1_LISTS = UI_V1 + LISTS;
    public static final String USER_CONSIST = "/user/consist";
    public static final String PINED = "/pined";
    public static final String LIST_ID = "/{listId}";
    public static final String FOLLOW_LIST_ID = "/follow/{listId}";
    public static final String PIN_LIST_ID = "/pin/{listId}";
    public static final String ADD_USER_USER_ID = "/add/user/{userId}";
    public static final String ADD_USER = "/add/user";
    public static final String ADD_USER_LIST_ID = "/add/user/{userId}/{listId}";
    public static final String LIST_ID_TWEETS = "/{listId}/tweets";
    public static final String LIST_ID_DETAILS = "/{listId}/details";
    public static final String LIST_ID_FOLLOWERS = "/{listId}/{listOwnerId}/followers";
    public static final String LIST_ID_MEMBERS = "/{listId}/{listOwnerId}/members";
    public static final String SEARCH_LIST_ID = "/search/{listId}/{username}";

    public static final String UI_V1_CHAT = UI_V1 + "/chat";
    public static final String CHAT_ID = "/{chatId}";
    public static final String USERS = "/users";
    public static final String CREATE_USER_ID = "/create/{userId}";
    public static final String CHAT_ID_MESSAGES = "/{chatId}/messages";
    public static final String CHAT_ID_READ_MESSAGES = "/{chatId}/read/messages";
    public static final String ADD_MESSAGE = "/add/message";
    public static final String ADD_MESSAGE_TWEET = ADD_MESSAGE + "/tweet";
    public static final String PARTICIPANT_CHAT_ID = "/participant/{participantId}/{chatId}";
    public static final String LEAVE_CHAT_ID = "/leave/{participantId}/{chatId}";

    public static final String NOTIFICATION = "/notification";
    public static final String API_V1_NOTIFICATION = API_V1 + NOTIFICATION;
    public static final String LIST = "/list";
    public static final String TWEET = "/tweet";
    public static final String TWEET_TWEET_ID = "/tweet/{tweetId}";
    public static final String UI_V1_NOTIFICATION = UI_V1 + NOTIFICATION;
    public static final String SUBSCRIBES = "/subscribes";
    public static final String NOTIFICATION_ID = "/{notificationId}";
    public static final String TIMELINE = "/timeline";

    public static final String API_V1_WEBSOCKET = API_V1 + "/websocket";
}
`
                                    }
                                  },
                                  "WebsocketConstants.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.constants;

public class WebsocketConstants {
    public static final String TOPIC = "/topic";
    public static final String TOPIC_NOTIFICATIONS = TOPIC + "/notifications/";
    public static final String TOPIC_FEED = TOPIC + "/feed";
    public static final String TOPIC_FEED_ADD = TOPIC + "/feed/add";
    public static final String TOPIC_CHAT = TOPIC + "/chat/";
    public static final String TOPIC_TWEET = TOPIC + "/tweet/";
    public static final String TOPIC_USER_UPDATE_TWEET = TOPIC + "/user/update/tweet/";
    public static final String TOPIC_USER_ADD_TWEET = TOPIC + "/user/add/tweet/";
}
`
                                    }
                                  }
                                }
                              },
                              "dto": {
                                "directory": {
                                  "HeaderResponse.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.http.HttpHeaders;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class HeaderResponse<T> {
    private List<T> items;
    private HttpHeaders headers;
}
`
                                    }
                                  },
                                  "ImageResponse.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class ImageResponse {
    private Long id;
    private String src;
}
`
                                    }
                                  },
                                  "request": {
                                    "directory": {
                                      "EmailRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class EmailRequest {
    private String to;
    private String subject;
    private String template;
    private Map<String, Object> attributes;
}
`
                                        }
                                      },
                                      "IdsRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class IdsRequest {
    private List<Long> ids;
}
`
                                        }
                                      },
                                      "NotificationRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import com.gmail.merikbest2015.enums.NotificationType;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class NotificationRequest {
    private NotificationType notificationType;
    private Long notifiedUserId;
    private Long userId;
    private Long userToFollowId;
    private Long tweetId;
    private Long listId;
    private boolean notificationCondition;
}
`
                                        }
                                      },
                                      "TweetTextRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class TweetTextRequest {
    private String text;
}
`
                                        }
                                      }
                                    }
                                  },
                                  "response": {
                                    "directory": {
                                      "chat": {
                                        "directory": {
                                          "ChatTweetResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.chat;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class ChatTweetResponse {
    private Long id;
    private String text;
    private LocalDateTime dateTime;
    private TweetUserResponse user;
    @JsonProperty("isDeleted")
    private boolean isDeleted;

    @Data
    static class TweetUserResponse {
        private Long id;
        private String fullName;
        private String username;
        private String avatar;
    }
}
`
                                            }
                                          },
                                          "ChatTweetUserResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.chat;

import lombok.Data;

@Data
public class ChatTweetUserResponse {
    private Long id;
    private String fullName;
    private String username;
    private String avatar;
}
`
                                            }
                                          },
                                          "ChatUserParticipantResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.chat;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class ChatUserParticipantResponse {
    private Long id;
    private String fullName;
    private String username;
    private String avatar;

    @JsonProperty("isMutedDirectMessages")
    private boolean isMutedDirectMessages;

    @JsonProperty("isUserBlocked")
    private boolean isUserBlocked;

    @JsonProperty("isMyProfileBlocked")
    private boolean isMyProfileBlocked;
}
`
                                            }
                                          }
                                        }
                                      },
                                      "lists": {
                                        "directory": {
                                          "CommonUserResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.lists;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class CommonUserResponse {
    private Long id;
    private String fullName;
    private String username;
    private String avatar;

    @JsonProperty("isPrivateProfile")
    private boolean privateProfile;
}
`
                                            }
                                          },
                                          "ListMemberResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.lists;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class ListMemberResponse {
    private Long id;
    private String fullName;
    private String username;
    private String about;
    private String avatar;

    @JsonProperty("isMemberInList")
    private boolean isMemberInList;

    @JsonProperty("isPrivateProfile")
    private boolean isPrivateProfile;

    public ListMemberResponse(boolean isMemberInList) {
        this.isMemberInList = isMemberInList;
    }
}
`
                                            }
                                          }
                                        }
                                      },
                                      "notification": {
                                        "directory": {
                                          "NotificationListResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.notification;

import lombok.Data;

@Data
public class NotificationListResponse {
    private Long id;
    private String name;
}
`
                                            }
                                          },
                                          "NotificationResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.notification;

import com.gmail.merikbest2015.enums.NotificationType;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class NotificationResponse {
    private Long id;
    private LocalDateTime date;
    private NotificationType notificationType;
    private NotificationUserResponse user;
    private NotificationUserResponse userToFollow;
    private NotificationTweetResponse tweet;
    private NotificationListResponse list;
    private boolean isAddedToList;
}
`
                                            }
                                          },
                                          "NotificationTweetResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.notification;

import lombok.Data;

@Data
public class NotificationTweetResponse {
    private Long id;
    private String text;
    private Long authorId;
    private boolean notificationCondition;
}
`
                                            }
                                          },
                                          "NotificationUserResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.notification;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class NotificationUserResponse {
    private Long id;
    private String username;
    private String avatar;

    @JsonProperty("isFollower")
    private boolean isFollower;
}
`
                                            }
                                          }
                                        }
                                      },
                                      "tweet": {
                                        "directory": {
                                          "QuoteTweetResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.tweet;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.gmail.merikbest2015.enums.LinkCoverSize;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
public class QuoteTweetResponse {
    private Long id;
    private String text;
    private LocalDateTime dateTime;
    private String link;
    private String linkTitle;
    private String linkDescription;
    private String linkCover;
    private LinkCoverSize linkCoverSize;
    private TweetAuthorResponse user;
    @JsonProperty("isDeleted")
    private boolean isDeleted;
}
`
                                            }
                                          },
                                          "TweetAdditionalInfoUserResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.tweet;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class TweetAdditionalInfoUserResponse {
    private Long id;
    private String fullName;
    private String username;

    @JsonProperty("isFollower")
    private boolean isFollower;

    @JsonProperty("isMyProfileBlocked")
    private boolean isMyProfileBlocked;

    @JsonProperty("isUserBlocked")
    private boolean isUserBlocked;

    @JsonProperty("isUserMuted")
    private boolean isUserMuted;
}
`
                                            }
                                          },
                                          "TweetAuthorResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.tweet;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class TweetAuthorResponse {
    private Long id;
    private String email;
    private String fullName;
    private String username;
    private String avatar;

    @JsonProperty("isPrivateProfile")
    private boolean isPrivateProfile;

    @JsonProperty("isFollower")
    private boolean isFollower;

    @JsonProperty("isMyProfileBlocked")
    private boolean isMyProfileBlocked;

    @JsonProperty("isUserBlocked")
    private boolean isUserBlocked;

    @JsonProperty("isUserMuted")
    private boolean isUserMuted;
}
`
                                            }
                                          },
                                          "TweetResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.tweet;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.gmail.merikbest2015.dto.ImageResponse;
import com.gmail.merikbest2015.enums.LinkCoverSize;
import com.gmail.merikbest2015.enums.ReplyType;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
public class TweetResponse {
    private Long id;
    private String text;
    private LocalDateTime dateTime;
    private LocalDateTime scheduledDate;
    private String addressedUsername;
    private Long addressedId;
    private Long addressedTweetId;
    private ReplyType replyType;
    private String link;
    private String linkTitle;
    private String linkDescription;
    private String linkCover;
    private LinkCoverSize linkCoverSize;
    private TweetAuthorResponse user;
    private List<ImageResponse> images;
    private QuoteTweetResponse quoteTweet;
    private PollResponse poll;
    private Long retweetsCount;
    private Long likedTweetsCount;
    private Long repliesCount;
    private Long quotesCount;

    @JsonProperty("isDeleted")
    private boolean isDeleted;

    @JsonProperty("isTweetLiked")
    private boolean isTweetLiked;

    @JsonProperty("isTweetRetweeted")
    private boolean isTweetRetweeted;

    @JsonProperty("isUserFollowByOtherUser")
    private boolean isUserFollowByOtherUser;

    @JsonProperty("isTweetDeleted")
    private boolean isTweetDeleted;

    @JsonProperty("isTweetBookmarked")
    private boolean isTweetBookmarked;

    @Data
    static class PollResponse {
        private Long id;
        private LocalDateTime dateTime;
        private List<PollChoiceResponse> pollChoices;
    }

    @Data
    static class PollChoiceResponse {
        private Long id;
        private String choice;
        private List<VotedUserResponse> votedUser;
    }

    @Data
    static class VotedUserResponse {
        private Long id;
    }
}
`
                                            }
                                          }
                                        }
                                      },
                                      "user": {
                                        "directory": {
                                          "UserChatResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.user;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserChatResponse extends UserResponse {

    @JsonProperty("isUserChatParticipant")
    private boolean isUserChatParticipant;
}
`
                                            }
                                          },
                                          "UserPrincipalResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.user;

import lombok.Data;

@Data
public class UserPrincipalResponse {
    private Long id;
    private String email;
    private String activationCode;
}
`
                                            }
                                          },
                                          "UserResponse.java": {
                                            "file": {
                                              "contents": `package com.gmail.merikbest2015.dto.response.user;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class UserResponse {
    private Long id;
    private String fullName;
    private String username;
    private String about;
    private String avatar;

    @JsonProperty("isPrivateProfile")
    private boolean privateProfile;

    @JsonProperty("isMutedDirectMessages")
    private boolean mutedDirectMessages;

    @JsonProperty("isUserBlocked")
    private boolean isUserBlocked;

    @JsonProperty("isMyProfileBlocked")
    private boolean isMyProfileBlocked;

    @JsonProperty("isWaitingForApprove")
    private boolean isWaitingForApprove;

    @JsonProperty("isFollower")
    private boolean isFollower;
}
`
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "enums": {
                                "directory": {
                                  "BackgroundColorType.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.enums;

public enum BackgroundColorType {
    DEFAULT, DIM, LIGHTS_OUT
}
`
                                    }
                                  },
                                  "ColorSchemeType.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.enums;

public enum ColorSchemeType {
    BLUE, YELLOW, CRIMSON, VIOLET, ORANGE, GREEN
}
`
                                    }
                                  },
                                  "LinkCoverSize.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.enums;

public enum LinkCoverSize {
    SMALL, MEDIUM, LARGE
}
`
                                    }
                                  },
                                  "NotificationType.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.enums;

public enum NotificationType {
    TWEET, RETWEET, REPLY, LIKE, FOLLOW, LISTS
}
`
                                    }
                                  },
                                  "ReplyType.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.enums;

public enum ReplyType {
    EVERYONE, FOLLOW, MENTION
}
`
                                    }
                                  },
                                  "TopicCategory.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.enums;

public enum TopicCategory {
    FASHION_AND_BEAUTY,
    OUTDOORS,
    ARTS_AND_CULTURE,
    ANIMATION_AND_COMICS,
    BUSINESS_AND_FINANCE,
    FOOD,
    TRAVEL,
    ENTERTAINMENT,
    MUSIC,
    GAMING,
    CAREERS,
    SPORTS,
    ONLY_ON_TWITTER
}
`
                                    }
                                  }
                                }
                              },
                              "exception": {
                                "directory": {
                                  "ApiExceptionHandler.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.exception;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class ApiExceptionHandler {

    @ExceptionHandler(ApiRequestException.class)
    public ResponseEntity<String> handleApiRequestException(ApiRequestException exception) {
        return ResponseEntity.status(exception.getStatus()).body(exception.getMessage());
    }
}
`
                                    }
                                  },
                                  "ApiRequestException.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.exception;

import lombok.Getter;
import org.springframework.http.HttpStatus;

@Getter
public class ApiRequestException extends RuntimeException {
    private final HttpStatus status;

    public ApiRequestException(String message, HttpStatus status) {
        super(message);
        this.status = status;
    }
}
`
                                    }
                                  }
                                }
                              },
                              "mapper": {
                                "directory": {
                                  "BasicMapper.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.mapper;

import com.gmail.merikbest2015.dto.HeaderResponse;
import lombok.RequiredArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
public class BasicMapper {

    private final ModelMapper modelMapper;

    public <T, S> S convertToResponse(T data, Class<S> type) {
        return modelMapper.map(data, type);
    }

    public <T, S> List<S> convertToResponseList(List<T> lists, Class<S> type) {
        return lists.contains(null) ? new ArrayList<>() : lists.stream()
                .map(list -> convertToResponse(list, type))
                .toList();
    }

    public <T, S> HeaderResponse<S> getHeaderResponse(Page<T> pageableItems, Class<S> type) {
        List<S> responses = convertToResponseList(pageableItems.getContent(), type);
        return constructHeaderResponse(responses, pageableItems.getTotalPages());
    }

    public <T, S> HeaderResponse<S> getHeaderResponse(List<T> items, Integer totalPages, Class<S> type) {
        List<S> responses = convertToResponseList(items, type);
        return constructHeaderResponse(responses, totalPages);
    }

    private <S> HeaderResponse<S> constructHeaderResponse(List<S> responses, Integer totalPages) {
        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.add("page-total-count", String.valueOf(totalPages));
        return new HeaderResponse<S>(responses, responseHeaders);
    }
}
`
                                    }
                                  }
                                }
                              },
                              "security": {
                                "directory": {
                                  "JwtAuthenticationException.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.security;

import lombok.Getter;
import org.springframework.http.HttpStatus;

@Getter
public class JwtAuthenticationException extends RuntimeException {

    private HttpStatus httpStatus;

    public JwtAuthenticationException(String msg) {
        super(msg);
    }

    public JwtAuthenticationException(String msg, HttpStatus httpStatus) {
        super(msg);
        this.httpStatus = httpStatus;
    }
}
`
                                    }
                                  },
                                  "JwtProvider.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.security;

import io.jsonwebtoken.*;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.util.Base64;
import java.util.Date;

import static com.gmail.merikbest2015.constants.ErrorMessage.JWT_TOKEN_EXPIRED;

@Component
@RequiredArgsConstructor
public class JwtProvider {

    @Value("$\{jwt.header:Authorization}")
    private String authorizationHeader;

    @Value("$\{jwt.secret:dejavu}")
    private String secretKey;

    @Value("$\{jwt.expiration:6048000}")
    private long validityInMilliseconds;

    @PostConstruct
    protected void init() {
        secretKey = Base64.getEncoder().encodeToString(secretKey.getBytes());
    }

    public String createToken(String email, String role) {
        Claims claims = Jwts.claims().setSubject(email);
        claims.put("role", role);
        Date now = new Date();
        Date validity = new Date(now.getTime() + validityInMilliseconds * 1000);

        return Jwts.builder()
                .setClaims(claims)
                .setIssuedAt(now)
                .setExpiration(validity)
                .signWith(SignatureAlgorithm.HS256, secretKey)
                .compact();
    }

    public String resolveToken(ServerHttpRequest request) {
        return request.getHeaders().getFirst(authorizationHeader);
    }

    public boolean validateToken(String token) {
        try {
            Jws<Claims> claimsJws = Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
            return !claimsJws.getBody().getExpiration().before(new Date());
        } catch (JwtException | IllegalArgumentException exception) {
            throw new JwtAuthenticationException(JWT_TOKEN_EXPIRED, HttpStatus.UNAUTHORIZED);
        }
    }

    public String parseToken(String token) {
        return Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token).getBody().getSubject();
    }
}
`
                                    }
                                  }
                                }
                              },
                              "util": {
                                "directory": {
                                  "AuthUtil.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.util;

import com.gmail.merikbest2015.exception.ApiRequestException;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;

import static com.gmail.merikbest2015.constants.ErrorMessage.USER_NOT_FOUND;
import static com.gmail.merikbest2015.constants.PathConstants.AUTH_USER_ID_HEADER;

public class AuthUtil {

    public static Long getAuthenticatedUserId() {
        RequestAttributes attribs = RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = ((ServletRequestAttributes) attribs).getRequest();
        String userId = request.getHeader(AUTH_USER_ID_HEADER);

        if (userId == null) {
            throw new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND);
        } else {
            return Long.parseLong(userId);
        }
    }
}
`
                                    }
                                  },
                                  "TestConstants.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.util;

public class TestConstants {
    public static final String HASHTAG = "#JetBrains";

    public static final Long USER_ID = 2L;
    public static final String ABOUT = "Hello twitter!";
    public static final String ACTIVATION_CODE = "1234567890";
    public static final Boolean ACTIVE = true;
    public static final String BIRTHDAY = "Mar 10, 1991";
    public static final String USER_EMAIL = "test2015@test.test";
    public static final String NOT_VALID_EMAIL = "test2222@test.test";
    public static final String PASSWORD = "qwerty123";
    public static final String FULL_NAME = "MrCat";
    public static final String LOCATION = "New York";
    public static final String PASSWORD_RESET_CODE = "1234567890";
    public static final String REGISTRATION_DATE = "2021-08-01T23:34:32";
    public static final String ROLE = "USER";
    public static final String USERNAME = "MrCat";
    public static final String WEBSITE = "https://www.google.com";
    public static final Long TWEET_COUNT = 126L;
    public static final Long MEDIA_TWEET_COUNT = 44L;
    public static final Long LIKE_TWEET_COUNT = 40L;
    public static final Long AVATAR_ID = 33L;
    public static final String AVATAR_SRC_1 = "https://twitterclonestorage.s3.eu-central-1.amazonaws.com/348b7dbe-3ac5-477f-8483-edc24f53091b_814370.jpg";
    public static final String AVATAR_SRC_2 = "https://twitterclonestorage.s3.eu-central-1.amazonaws.com/ae83099c-885b-499a-bb6f-5e34e1b69e7d_4ec7201fd370bd9870cdb326f0511f38.jpg";
    public static final String WALLPAPER_SRC = "https://twitterclonestorage.s3.eu-central-1.amazonaws.com/d0e5b95f-acc0-47ef-b499-477f7e5a1a06_PrMnWa2z.jpg";
    public static final Long WALLPAPER_ID = 44L;
    public static final String COUNTRY_CODE = "UA";
    public static final Long PHONE = 666966623L;
    public static final String COUNTRY = "UA";
    public static final String GENDER = "Cat";
    public static final String LANGUAGE = "Ukrainian - українська";
    public static final String BACKGROUND_COLOR = "DEFAULT";
    public static final String COLOR_SCHEME = "BLUE";
    public static final Long PINNED_TWEET_ID = 40L;
    public static final boolean MUTED_DIRECT_MESSAGES = true;
    public static final boolean PRIVATE_PROFILE = false;
    public static final boolean PROFILE_CUSTOMIZED = true;
    public static final boolean PROFILE_STARTED = true;
    public static final String AUTH_TOKEN = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMjAxNkBnbWFpbC5jb20iLCJyb2xlIjoiVVNFUiIsImlhdCI6MTY2NzY0ODcyMSwiZXhwIjoxNjczNjk2NzIxfQ.KgiNzoq1UPNoeWaY00aPOinDdvv2e6NNlfupyaW2JxU";

    public static final String TEST_TWEET_TEXT = "test text";
    public static final String USERNAME2 = "John Doe";
    public static final String ABOUT2 = "Hello2";

    public static final String TWEET_TEXT = "#JetBrains https://www.jetbrains.com/ ";
    public static final String TWEET_DATETIME = "2021-10-03T20:34:15";
    public static final String TWEET_SCHEDULED_DATETIME = "3021-10-03T20:33:36";
    public static final String LINK = "https://www.jetbrains.com/";
    public static final String LINK_TITLE = "JetBrains";
    public static final String LINK_DESCRIPTION = "JetBrains is a cutting-edge software vendor specializing in the creation of intelligent development tools, including IntelliJ IDEA – the leading Java IDE, and the Kotlin programming language.";
    public static final String LINK_COVER = "https://resources.jetbrains.com/storage/products/jetbrains/img/meta/preview.png";

    public static final String TEXT_WITH_YOUTUBE_LINK = "tweet test https://www.youtube.com/watch?v=ewZZNeYDiLo&ab_channel=TeamSESH";
    public static final String YOUTUBE_LINK = "https://www.youtube.com/watch?v=ewZZNeYDiLo&ab_channel=TeamSESH";
    public static final String YOUTUBE_LINK_TITLE = "Bones - RestInPeace";
    public static final String YOUTUBE_LINK_COVER = "https://i.ytimg.com/vi/ewZZNeYDiLo/mqdefault.jpg";

    public static final Long LIST_USER_ID = 2L;
    public static final String LIST_ALT_WALLPAPER = "https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small";
    public static final String LIST_NAME = "test list name";
    public static final String LIST_DESCRIPTION = "test list description";
    public static final String LIST_PINNED_DATE = "2021-10-03T20:42:53";

}
`
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "resources": {
                "directory": {
                  "sql-test": {
                    "directory": {
                      "clear-chat-db.sql": {
                        "file": {
                          "contents": `delete from "chat-test".public.chats_participants;
delete from "chat-test".public.chat_messages;
delete from "chat-test".public.chats;
`
                        }
                      },
                      "clear-lists-db.sql": {
                        "file": {
                          "contents": `delete from "lists-test".public.pinned_lists;
delete from "lists-test".public.lists_followers;
delete from "lists-test".public.lists_members;
delete from "lists-test".public.lists;
`
                        }
                      },
                      "clear-notification-db.sql": {
                        "file": {
                          "contents": `delete from "notification-test".public.notifications;
`
                        }
                      },
                      "clear-tag-db.sql": {
                        "file": {
                          "contents": `delete from "tag-test".public.tweet_tags;
delete from "tag-test".public.tags;
`
                        }
                      },
                      "clear-topic-db.sql": {
                        "file": {
                          "contents": `delete from "topic-test".public.topic_not_interested;
delete from "topic-test".public.topic_followers;
delete from "topic-test".public.topics;
`
                        }
                      },
                      "clear-tweet-db.sql": {
                        "file": {
                          "contents": `delete from "tweet-test".public.replies;
delete from "tweet-test".public.quotes;
delete from "tweet-test".public.tweets_images;
delete from "tweet-test".public.tweet_images;
delete from "tweet-test".public.poll_choice_voted;
delete from "tweet-test".public.polls_poll_choices;
delete from "tweet-test".public.tweet_quote;

delete from "tweet-test".public.bookmarks;
delete from "tweet-test".public.liked_tweets;
delete from "tweet-test".public.poll_choices;
delete from "tweet-test".public.retweets;

delete from "tweet-test".public.tweets;
delete from "tweet-test".public.polls;
`
                        }
                      },
                      "clear-user-db.sql": {
                        "file": {
                          "contents": `delete from "user-test".public.user_blocked;
delete from "user-test".public.subscribers;
delete from "user-test".public.user_muted;
delete from "user-test".public.user_follower_requests;
delete from "user-test".public.user_subscriptions;
delete from "user-test".public.users;
`
                        }
                      },
                      "populate-chat-db.sql": {
                        "file": {
                          "contents": `-- chats
INSERT INTO "chat-test".public.chats (id, creation_date) VALUES (8, '2021-10-03 20:29:55.000000');
INSERT INTO "chat-test".public.chats (id, creation_date) VALUES (10, '2021-10-03 20:29:55.000000');

-- chats_participants
INSERT INTO "chat-test".public.chats_participants (id, left_chat, chat_id, user_id) VALUES (3, false, 8, 2);
INSERT INTO "chat-test".public.chats_participants (id, left_chat, chat_id, user_id) VALUES (4, false, 8, 1);
INSERT INTO "chat-test".public.chats_participants (id, left_chat, chat_id, user_id) VALUES (5, false, 10, 2);
INSERT INTO "chat-test".public.chats_participants (id, left_chat, chat_id, user_id) VALUES (6, true, 10, 5);

-- chat_messages
INSERT INTO "chat-test".public.chat_messages (id, date, text, author_id, chat_id, tweet_id, is_unread) VALUES (5, '2021-10-03 20:39:55.000000', 'hello from MrCat', 2, 8, 40, true);
INSERT INTO "chat-test".public.chat_messages (id, date, text, author_id, chat_id, tweet_id, is_unread) VALUES (6, '2021-10-03 20:40:19.000000', 'hello from John Doe', 1, 8, null, false);
INSERT INTO "chat-test".public.chat_messages (id, date, text, author_id, chat_id, tweet_id, is_unread) VALUES (7, '2021-10-03 20:41:03.000000', 'test message 2 from John Doe', 1, 8, null, true);
`
                        }
                      },
                      "populate-lists-db.sql": {
                        "file": {
                          "contents": `-- lists
INSERT INTO "lists-test".public.lists (id, alt_wallpaper, description, private, name, list_owner_id, wallpaper) VALUES (4, 'https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small', 'test list description', false, 'test list name', 2, null);
INSERT INTO "lists-test".public.lists (id, alt_wallpaper, description, private, name, list_owner_id, wallpaper) VALUES (5, 'https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small', 'test list description', true, 'test list name', 1, null);
INSERT INTO "lists-test".public.lists (id, alt_wallpaper, description, private, name, list_owner_id, wallpaper) VALUES (6, 'https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small', 'test list description', true, 'test list name', 2, null);
INSERT INTO "lists-test".public.lists (id, alt_wallpaper, description, private, name, list_owner_id, wallpaper) VALUES (7, 'https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small', 'test list description', true, 'test list name', 1, null);
INSERT INTO "lists-test".public.lists (id, alt_wallpaper, description, private, name, list_owner_id, wallpaper) VALUES (8, 'https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small', 'test list description', true, 'test list name', 1, null);
INSERT INTO "lists-test".public.lists (id, alt_wallpaper, description, private, name, list_owner_id, wallpaper) VALUES (9, 'https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small', 'test list description', false, 'test list name', 1, null);
INSERT INTO "lists-test".public.lists (id, alt_wallpaper, description, private, name, list_owner_id, wallpaper) VALUES (10, 'https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small', 'test list description', false, 'test list name', 5, null);
INSERT INTO "lists-test".public.lists (id, alt_wallpaper, description, private, name, list_owner_id, wallpaper) VALUES (11, 'https://pbs.twimg.com/media/EXZ2rMvVAAAAfrN?format=png&name=small', 'test list description', false, 'test list name', 3, null);

-- pinned_lists
INSERT INTO "lists-test".public.pinned_lists (id, pinned_date, list_id, pinned_user_id) VALUES (1, '2021-10-03 20:42:53.000000', 4, 2);
INSERT INTO "lists-test".public.pinned_lists (id, pinned_date, list_id, pinned_user_id) VALUES (2, '2021-10-03 20:42:53.000000', 6, 2);

-- lists_followers
INSERT INTO "lists-test".public.lists_followers (id, list_id, follower_id) VALUES (1, 4, 1);
INSERT INTO "lists-test".public.lists_followers (id, list_id, follower_id) VALUES (2, 7, 2);

-- lists_members
INSERT INTO "lists-test".public.lists_members (id, list_id, member_id) VALUES (1, 4, 1);
INSERT INTO "lists-test".public.lists_members (id, list_id, member_id) VALUES (2, 5, 1);
INSERT INTO "lists-test".public.lists_members (id, list_id, member_id) VALUES (3, 7, 2);
INSERT INTO "lists-test".public.lists_members (id, list_id, member_id) VALUES (4, 9, 1);
`
                        }
                      },
                      "populate-notification-db.sql": {
                        "file": {
                          "contents": `-- notifications
INSERT INTO "notification-test".public.notifications (id, date, notification_type, tweet_id, user_id, user_to_follow_id, list_id, notified_user_id) VALUES (37, '2021-10-03 20:31:44.000000', 'LIKE', 40, 1, null, null, 2);
INSERT INTO "notification-test".public.notifications (id, date, notification_type, tweet_id, user_id, user_to_follow_id, list_id, notified_user_id) VALUES (38, '2021-10-03 20:31:47.000000', 'RETWEET', 40, 1, null, null, 2);
INSERT INTO "notification-test".public.notifications (id, date, notification_type, tweet_id, user_id, user_to_follow_id, list_id, notified_user_id) VALUES (39, '2021-10-03 20:37:12.000000', 'FOLLOW', null, 2, 1, null, 1);
INSERT INTO "notification-test".public.notifications (id, date, notification_type, tweet_id, user_id, user_to_follow_id, list_id, notified_user_id) VALUES (40, '2021-10-03 20:37:20.000000', 'FOLLOW', null, 1, 2, null, 2);
INSERT INTO "notification-test".public.notifications (id, date, notification_type, tweet_id, user_id, user_to_follow_id, list_id, notified_user_id) VALUES (41, '2021-10-03 20:38:51.000000', 'TWEET', 46, 2, null, null, 2);
INSERT INTO "notification-test".public.notifications (id, date, notification_type, tweet_id, user_id, user_to_follow_id, list_id, notified_user_id) VALUES (42, '2021-10-03 20:39:51.000000', 'TWEET', 47, 2, null, null, 2);
INSERT INTO "notification-test".public.notifications (id, date, notification_type, tweet_id, user_id, user_to_follow_id, list_id, notified_user_id) VALUES (43, '2021-10-03 20:40:51.000000', 'TWEET', 48, 2, null, null, 2);
INSERT INTO "notification-test".public.notifications (id, date, notification_type, tweet_id, user_id, user_to_follow_id, list_id, notified_user_id) VALUES (44, '2021-10-03 20:40:51.000000', 'TWEET', 45, 2, null, null, 1);
`
                        }
                      },
                      "populate-tag-db.sql": {
                        "file": {
                          "contents": `-- tags
INSERT INTO "tag-test".public.tags (id, tag_name, tweets_quantity) VALUES (2, '#JetBrains', 2);
INSERT INTO "tag-test".public.tags (id, tag_name, tweets_quantity) VALUES (3, '#test', 1);

-- tweet_tags
INSERT INTO "tag-test".public.tweet_tags (id, tag_id, tweet_id) VALUES (1, 2, 43);
INSERT INTO "tag-test".public.tweet_tags (id, tag_id, tweet_id) VALUES (2, 3, 40);
`
                        }
                      },
                      "populate-topic-db.sql": {
                        "file": {
                          "contents": `-- topics
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1001, null, 'Elon Musk');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1002, null, 'Technology');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1003, null, 'Web development');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1004, null, 'Entertainment');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1005, null, 'Digital creators');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1006, null, 'Kanye West');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1007, 'GAMING', 'Animal Crossing');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1008, 'GAMING', 'Minecraft');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1009, 'GAMING', 'MrBeast');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1010, 'GAMING', 'PewDiePie');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1011, null, 'Science');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1012, null, 'Cats');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1013, null, 'Dogs');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1014, null, 'Bitcoin');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1016, null, 'Xbox');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1017, 'GAMING', 'Game');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1018, 'GAMING', 'Cyberpunk 2077');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1019, 'ONLY_ON_TWITTER', 'Funny Tweets');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1020, 'ONLY_ON_TWITTER', 'Viral Tweets');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1021, 'ONLY_ON_TWITTER', 'Based on your searches');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1022, 'ONLY_ON_TWITTER', 'Spaces You Might Like');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1023, 'ONLY_ON_TWITTER', 'Popular images');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1024, 'ONLY_ON_TWITTER', 'Popular videos');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1025, 'ONLY_ON_TWITTER', 'Days of celebration');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1026, 'ONLY_ON_TWITTER', 'On this day');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1027, 'GAMING', 'Game development');
INSERT INTO "topic-test".public.topics (id, topic_category, topic_name) VALUES (1028, 'GAMING', 'Among Us');

-- topic_followers
INSERT INTO "topic-test".public.topic_followers (id, topic_id, user_id) VALUES (1, 1008, 2);
INSERT INTO "topic-test".public.topic_followers (id, topic_id, user_id) VALUES (2, 1017, 2);
INSERT INTO "topic-test".public.topic_followers (id, topic_id, user_id) VALUES (3, 1013, 2);
INSERT INTO "topic-test".public.topic_followers (id, topic_id, user_id) VALUES (4, 1012, 2);

-- topic_not_interested
INSERT INTO "topic-test".public.topic_not_interested (id, topic_id, user_id) VALUES (1, 1018, 2);
INSERT INTO "topic-test".public.topic_not_interested (id, topic_id, user_id) VALUES (2, 1019, 2);
`
                        }
                      },
                      "populate-tweet-db.sql": {
                        "file": {
                          "contents": `-- tweet_images
INSERT INTO "tweet-test".public.tweet_images (id, src) VALUES (1, 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/0a6c735d-def8-4587-a29f-221915ef6cb4_ff2d023b3220f93bbc79233614dea542.jpg');

-- polls
INSERT INTO "tweet-test".public.polls (id, date_time) VALUES (2, '2222-10-10 20:29:03.812910');
INSERT INTO "tweet-test".public.polls (id, date_time) VALUES (8, '2021-10-10 20:29:03.812910');

-- tweets
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (39, null, null, null, '2021-10-03 20:29:03.00vo0000', 'EVERYONE', 'test tweet',  2, null, null, null, null, null, '3021-10-03 20:33:36.000000', false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (40, null, null, null, '2021-10-03 20:29:03.00vo0000', 'EVERYONE', 'test tweet',  2, null, null, null, null, null, null, false, 2);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (41, 2, 40, 'MrCat', '2021-10-03 20:31:55.000000', 'EVERYONE', 'test reply', 1, null, null, null, null, null, null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (42, null, null, null, '2021-10-03 20:33:36.000000', 'EVERYONE', 'https://www.youtube.com/watch?v=ewZZNeYDiLo&ab_channel=TeamSESH', 2, 'https://www.youtube.com/watch?v=ewZZNeYDiLo&ab_channel=TeamSESH', 'https://i.ytimg.com/vi/ewZZNeYDiLo/mqdefault.jpg', null, 'Bones - RestInPeace', null, null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (43, null, null, null, '2021-10-03 20:34:15.000000', 'EVERYONE', '#JetBrains https://www.jetbrains.com/ ', 2, 'https://www.jetbrains.com/', 'https://resources.jetbrains.com/storage/products/jetbrains/img/meta/preview.png', 'JetBrains is a cutting-edge software vendor specializing in the creation of intelligent development tools, including IntelliJ IDEA – the leading Java IDE, and the Kotlin programming language.', 'JetBrains', 'LARGE', null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (44, null, null, null, '2021-10-03 20:36:25.000000', 'EVERYONE', 'test quote', 2, null, null, null, null, null, null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (45, null, null, null, '2021-10-03 20:38:51.000000', 'EVERYONE', 'media tweet test', 1, null, null, null, null, null, null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (46, null, null, null, '2021-10-03 20:38:51.000000', 'EVERYONE', 'hello world1', 2, null, null, null, null, null, null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (47, null, null, null, '2021-10-03 20:39:51.000000', 'EVERYONE', 'hello world2', 2, null, null, null, null, null, null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (48, null, null, null, '2021-10-03 20:40:51.000000', 'EVERYONE', 'hello world3', 2, null, null, null, null, null, null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (49, null, null, null, '2021-10-03 20:40:51.000000', 'EVERYONE', 'hello world3', 2, null, null, null, null, null, null, true, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (50, null, null, null, '2021-10-03 20:40:51.000000', 'EVERYONE', 'hello world3', 3, null, null, null, null, null, null, false, null);
INSERT INTO "tweet-test".public.tweets (id, addressed_id, addressed_tweet_id, addressed_username, date_time, reply_type, text, author_id, link, link_cover, link_description, link_title, link_cover_size, scheduled_date, deleted, poll_id) VALUES (51, null, null, null, '2021-10-03 20:40:51.000000', 'EVERYONE', 'hello world3', 6, null, null, null, null, null, null, false, null);

-- tweet_quote
INSERT INTO "tweet-test".public.tweet_quote (tweet_id, quote_tweet_id) VALUES (44, 43);
INSERT INTO "tweet-test".public.tweet_quote (tweet_id, quote_tweet_id) VALUES (45, 40);

-- tweets_images
INSERT INTO "tweet-test".public.tweets_images (tweet_id, images_id) VALUES (45, 1);


-- liked_tweets (like_tweets)
INSERT INTO "tweet-test".public.liked_tweets (id, liked_tweet_date, tweet_id, user_id) VALUES (80, '2021-10-03 20:31:44.000000', 40, 1);
INSERT INTO "tweet-test".public.liked_tweets (id, liked_tweet_date, tweet_id, user_id) VALUES (81, '2021-10-03 20:31:44.000000', 45, 2);

-- retweets
INSERT INTO "tweet-test".public.retweets (id, retweet_date, tweet_id, user_id) VALUES (8, '2021-10-03 20:31:47.000000', 40, 1);
INSERT INTO "tweet-test".public.retweets (id, retweet_date, tweet_id, user_id) VALUES (9, '2021-10-03 20:31:47.000000', 45, 2);

-- replies
INSERT INTO "tweet-test".public.replies (tweet_id, reply_id) VALUES (40, 41);

-- quotes
INSERT INTO "tweet-test".public.quotes (tweet_id, quote_id) VALUES (44, 43);
INSERT INTO "tweet-test".public.quotes (tweet_id, quote_id) VALUES (45, 40);

-- poll_choices
INSERT INTO "tweet-test".public.poll_choices (id, choice) VALUES (9, 'test 1');
INSERT INTO "tweet-test".public.poll_choices (id, choice) VALUES (10, 'test 2');
INSERT INTO "tweet-test".public.poll_choices (id, choice) VALUES (11, 'test 3');
INSERT INTO "tweet-test".public.poll_choices (id, choice) VALUES (12, 'test 4');

-- polls_poll_choices
INSERT INTO "tweet-test".public.polls_poll_choices (poll_id, poll_choices_id) VALUES (2, 9);
INSERT INTO "tweet-test".public.polls_poll_choices (poll_id, poll_choices_id) VALUES (2, 10);
INSERT INTO "tweet-test".public.polls_poll_choices (poll_id, poll_choices_id) VALUES (8, 11);
INSERT INTO "tweet-test".public.polls_poll_choices (poll_id, poll_choices_id) VALUES (8, 12);

-- poll_choice_voted (pool_choices_voted_user)
INSERT INTO "tweet-test".public.poll_choice_voted (id, poll_choice_id, voted_user_id) VALUES (1, 10, 1);

-- bookmarks
INSERT INTO "tweet-test".public.bookmarks (id, bookmark_date, tweet_id, user_id) VALUES (2, '2021-10-03 20:35:53.000000', 40, 2);
`
                        }
                      },
                      "populate-user-db.sql": {
                        "file": {
                          "contents": `-- users
INSERT INTO "user-test".public.users (id, about, activation_code, active, birthday, email, full_name, location, notifications_count, password, password_reset_code, profile_customized, profile_started, registration_date, role, tweet_count, username, website, like_count, media_tweet_count, country, gender, language, muted_direct_messages, phone, private_profile, country_code, background_color, color_scheme, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (1, 'Hello2', null, true, null, 'merikbest2015@gmail.com', 'John Doe', 'Kyiv', 0, '$2a$08$1D3LToUL9ccJYqGDZNPH8uvTBwVFou5MobYvtgAakra6WdACQZWJK', null, true, true, '2021-08-01 23:34:32.000000', 'USER', 126, 'John Doe', 'https://www.google.com', 40, 44, 'UA', 'Cat', 'Ukrainian - українська', true, 666966623, false, 'UA', 'DEFAULT', 'BLUE', null, 1, 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/ae83099c-885b-499a-bb6f-5e34e1b69e7d_4ec7201fd370bd9870cdb326f0511f38.jpg', 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/dfc8a223-45fc-43da-8b7c-f76e2c2507cd_82ecbca14eb4999212c07257f41c70e7.jpg');
INSERT INTO "user-test".public.users (id, about, activation_code, active, birthday, email, full_name, location, notifications_count, password, password_reset_code, profile_customized, profile_started, registration_date, role, tweet_count, username, website, like_count, media_tweet_count, country, gender, language, muted_direct_messages, phone, private_profile, country_code, background_color, color_scheme, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (2, 'Hello twitter!', null, true, 'Mar 10, 1991', 'test2015@test.test', 'MrCat', 'New York', 3, '$2a$08$1D3LToUL9ccJYqGDZNPH8uvTBwVFou5MobYvtgAakra6WdACQZWJK', null, true, true, '2021-08-01 23:34:32.000000', 'USER', 126, 'MrCat', 'https://www.google.com', 40, 44, 'UA', 'Cat', 'Ukrainian - українська', true, 666966623, false, 'UA', 'DEFAULT', 'BLUE', 40, 1, 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/348b7dbe-3ac5-477f-8483-edc24f53091b_814370.jpg', 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/d0e5b95f-acc0-47ef-b499-477f7e5a1a06_PrMnWa2z.jpg');
INSERT INTO "user-test".public.users (id, about, activation_code, active, birthday, email, full_name, location, notifications_count, password, password_reset_code, profile_customized, profile_started, registration_date, role, tweet_count, username, website, like_count, media_tweet_count, country, gender, language, muted_direct_messages, phone, private_profile, country_code, background_color, color_scheme, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (3, 'Hello twitter!', '1234567890', true, 'Mar 10, 1991', 'test2016@test.test', 'MrCat', 'New York', 3, '$2a$08$1D3LToUL9ccJYqGDZNPH8uvTBwVFou5MobYvtgAakra6WdACQZWJK', '1234567890', true, true, '2021-08-01 23:34:32.000000', 'USER', 126, 'MrCat', 'https://www.google.com', 40, 44, 'UA', 'Cat', 'Ukrainian - українська', true, 666966623, true, 'UA', 'DEFAULT', 'BLUE', null, null, 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/348b7dbe-3ac5-477f-8483-edc24f53091b_814370.jpg', 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/d0e5b95f-acc0-47ef-b499-477f7e5a1a06_PrMnWa2z.jpg');
INSERT INTO "user-test".public.users (id, about, activation_code, active, birthday, email, full_name, location, notifications_count, password, password_reset_code, profile_customized, profile_started, registration_date, role, tweet_count, username, website, like_count, media_tweet_count, country, gender, language, muted_direct_messages, phone, private_profile, country_code, background_color, color_scheme, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (4, 'Hello twitter!', null, true, 'Mar 10, 1991', 'test2017@test.test', 'MrCat', 'New York', 3, '$2a$08$1D3LToUL9ccJYqGDZNPH8uvTBwVFou5MobYvtgAakra6WdACQZWJK', null, true, true, '2021-08-01 23:34:32.000000', 'USER', 126, 'MrCat', 'https://www.google.com', 40, 44, 'UA', 'Cat', 'Ukrainian - українська', true, 666966623, true, 'UA', 'DEFAULT', 'BLUE', null, null, 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/348b7dbe-3ac5-477f-8483-edc24f53091b_814370.jpg', 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/d0e5b95f-acc0-47ef-b499-477f7e5a1a06_PrMnWa2z.jpg');
INSERT INTO "user-test".public.users (id, about, activation_code, active, birthday, email, full_name, location, notifications_count, password, password_reset_code, profile_customized, profile_started, registration_date, role, tweet_count, username, website, like_count, media_tweet_count, country, gender, language, muted_direct_messages, phone, private_profile, country_code, background_color, color_scheme, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (5, 'Hello twitter!', null, true, 'Mar 10, 1991', 'test2018@test.test', 'MrCat', 'New York', 3, '$2a$08$1D3LToUL9ccJYqGDZNPH8uvTBwVFou5MobYvtgAakra6WdACQZWJK', null, true, true, '2021-08-01 23:34:32.000000', 'USER', 126, 'MrCat', 'https://www.google.com', 40, 44, 'UA', 'Cat', 'Ukrainian - українська', true, 666966623, true, 'UA', 'DEFAULT', 'BLUE', null, null, 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/348b7dbe-3ac5-477f-8483-edc24f53091b_814370.jpg', 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/d0e5b95f-acc0-47ef-b499-477f7e5a1a06_PrMnWa2z.jpg');
INSERT INTO "user-test".public.users (id, about, activation_code, active, birthday, email, full_name, location, notifications_count, password, password_reset_code, profile_customized, profile_started, registration_date, role, tweet_count, username, website, like_count, media_tweet_count, country, gender, language, muted_direct_messages, phone, private_profile, country_code, background_color, color_scheme, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (6, 'Hello twitter!', null, true, 'Mar 10, 1991', 'test2019@test.test', 'MrCat', 'New York', 3, '$2a$08$1D3LToUL9ccJYqGDZNPH8uvTBwVFou5MobYvtgAakra6WdACQZWJK', null, true, true, '2021-08-01 23:34:32.000000', 'USER', 126, 'MrCat', 'https://www.google.com', 40, 44, 'UA', 'Cat', 'Ukrainian - українська', true, 666966623, false, 'UA', 'DEFAULT', 'BLUE', null, null, 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/348b7dbe-3ac5-477f-8483-edc24f53091b_814370.jpg', 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/d0e5b95f-acc0-47ef-b499-477f7e5a1a06_PrMnWa2z.jpg');
INSERT INTO "user-test".public.users (id, about, activation_code, active, birthday, email, full_name, location, notifications_count, password, password_reset_code, profile_customized, profile_started, registration_date, role, tweet_count, username, website, like_count, media_tweet_count, country, gender, language, muted_direct_messages, phone, private_profile, country_code, background_color, color_scheme, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (7, 'Hello twitter!', null, true, 'Mar 10, 1991', 'test2020@test.test', 'MrCat', 'New York', 3, '$2a$08$1D3LToUL9ccJYqGDZNPH8uvTBwVFou5MobYvtgAakra6WdACQZWJK', null, true, true, '2021-08-01 23:34:32.000000', 'USER', 126, 'MrCat', 'https://www.google.com', 40, 44, 'UA', 'Cat', 'Ukrainian - українська', true, 666966623, false, 'UA', 'DEFAULT', 'BLUE', null, null, 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/348b7dbe-3ac5-477f-8483-edc24f53091b_814370.jpg', 'https://twitterclonestorage.s3.eu-central-1.amazonaws.com/d0e5b95f-acc0-47ef-b499-477f7e5a1a06_PrMnWa2z.jpg');

-- user_subscriptions
INSERT INTO "user-test".public.user_subscriptions (subscriber_id, user_id) VALUES (1, 2);
INSERT INTO "user-test".public.user_subscriptions (subscriber_id, user_id) VALUES (2, 1);
INSERT INTO "user-test".public.user_subscriptions (subscriber_id, user_id) VALUES (4, 2);
INSERT INTO "user-test".public.user_subscriptions (subscriber_id, user_id) VALUES (4, 1);

-- user_follower_requests
INSERT INTO "user-test".public.user_follower_requests (user_id, follower_id) VALUES (3, 1);
INSERT INTO "user-test".public.user_follower_requests (user_id, follower_id) VALUES (3, 2);
INSERT INTO "user-test".public.user_follower_requests (user_id, follower_id) VALUES (5, 2);
INSERT INTO "user-test".public.user_follower_requests (user_id, follower_id) VALUES (2, 7);

-- user_blocked
INSERT INTO "user-test".public.user_blocked (user_id, blocked_user_id) VALUES (2, 4);
INSERT INTO "user-test".public.user_blocked (user_id, blocked_user_id) VALUES (5, 2);
INSERT INTO "user-test".public.user_blocked (user_id, blocked_user_id) VALUES (6, 2);

-- user_muted
INSERT INTO "user-test".public.user_muted (user_id, muted_user_id) VALUES (2, 1);

-- subscribers
INSERT INTO "user-test".public.subscribers (user_id, subscriber_id) VALUES (2, 1);
`
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "config-server": {
    "directory": {
      "Dockerfile": {
        "file": {
          "contents": `FROM openjdk:17
MAINTAINER Miroslav Khotinskiy <merikbest2015@gmail.com>
COPY target/config-server-0.0.1-SNAPSHOT.jar ./
CMD ["java", "-jar", "config-server-0.0.1-SNAPSHOT.jar"]
`
        }
      },
      "pom.xml": {
        "file": {
          "contents": `<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>twitter-spring-reactjs</artifactId>
        <groupId>com.gmail.merikbest2015</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>config-server</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>config-server</name>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
`
        }
      },
      "src": {
        "directory": {
          "main": {
            "directory": {
              "java": {
                "directory": {
                  "com": {
                    "directory": {
                      "gmail": {
                        "directory": {
                          "merikbest2015": {
                            "directory": {
                              "ConfigServerApplication.java": {
                                "file": {
                                  "contents": `package com.gmail.merikbest2015;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.config.server.EnableConfigServer;

@EnableConfigServer
@EnableDiscoveryClient
@SpringBootApplication
public class ConfigServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(ConfigServerApplication.class, args);
    }
}
`
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "resources": {
                "directory": {
                  "application.yaml": {
                    "file": {
                      "contents": `server:
    port: 8888

spring:
    application:
        name: config-server
    profiles:
        active: native
    cloud:
        config:
            server:
                native:
                    search-locations: classpath:/config
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                    }
                  },
                  "config": {
                    "directory": {
                      "api-gateway.yml": {
                        "file": {
                          "contents": `server:
    port: 8000

spring:
    application:
        name: api-gateway
    cloud:
        gateway:
            globalcors:
                corsConfigurations:
                    '[/ui/v1/**]':
                        allowedOrigins: "http://localhost:3000"
                        exposedHeaders: "page-total-count"
                        allowedHeaders: "*"
                        allowedMethods:
                        - GET
                        - POST
                        - PUT
                        - DELETE
                        - PATCH
                        - OPTIONS
                        - HEAD
            discovery:
                locator:
                    enabled: true
                    lower-case-service-id: true
            routes:
                -   id: topic-service
                    uri: lb://topic-service
                    predicates:
                        - Path=/ui/v1/topics/**
                    filters:
                        - AuthFilter

                -   id: tag-service
                    uri: lb://tag-service
                    predicates:
                        - Path=/ui/v1/tags/**, /api/v1/tags/**
                    filters:
                        - AuthFilter

                -   id: tweet-service
                    uri: lb://tweet-service
                    predicates:
                        - Path=/ui/v1/tweets/**, /api/v1/tweets/**
                    filters:
                        - AuthFilter

                -   id: user-service
                    uri: lb://user-service
                    predicates:
                        - Path=/ui/v1/user/**, /api/v1/user/**, /api/v1/auth/**
                    filters:
                        - name: AuthFilter

                -   id: auth-service
                    uri: lb://user-service
                    predicates:
                        - Path=/ui/v1/auth/**

                -   id: lists-service
                    uri: lb://lists-service
                    predicates:
                        - Path=/ui/v1/lists/**, /api/v1/lists/**
                    filters:
                        - AuthFilter

                -   id: chat-service
                    uri: lb://chat-service
                    predicates:
                        - Path=/ui/v1/chat/**
                    filters:
                        - AuthFilter

                -   id: notification-service
                    uri: lb://notification-service
                    predicates:
                        - Path=/ui/v1/notification/**, /api/v1/notification/**
                    filters:
                        - AuthFilter

                -   id: websocket-service
                    uri: lb://websocket-service
                    predicates:
                        - Path=/websocket/**, /api/v1/websocket/**

                -   id: image-service
                    uri: lb://image-service
                    predicates:
                        - Path=/api/v1/image/upload
                    filters:
                        - AuthFilter

                -   id: email-service
                    uri: lb://email-service
                    predicates:
                        - Path=/api/v1/email/suggested

    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "chat-service-test.yml": {
                        "file": {
                          "contents": `server:
    port: 8006
spring:
    application:
        name: chat-service
    datasource:
        url: jdbc:postgresql://localhost:5432/chat-test
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    sql:
        init:
            mode: always
            data-locations: classpath:sql-test/clear-chat-db.sql, classpath:sql-test/populate-chat-db.sql
eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: localhost
`
                        }
                      },
                      "chat-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8006
spring:
    application:
        name: chat-service
    datasource:
        url: jdbc:postgresql://$\{DATASOURCE_HOST:localhost}:5432/chat
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    flyway:
        locations: classpath:db/migration/chat
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
    rabbitmq:
        addresses: $\{RABBITMQ_HOST:localhost}:5672

resilience4j:
    circuitbreaker:
        instances:
            tweet-service:
                minimum-number-of-calls: 5
            user-service:
                minimum-number-of-calls: 5
            websocket-service:
                minimum-number-of-calls: 5
feign:
    circuitbreaker:
        enabled: true

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "email-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8020

spring:
    application:
        name: email-service
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
    rabbitmq:
        addresses: $\{RABBITMQ_HOST:localhost}:5672
    mail:
        host: smtp.gmail.com
        username: twitter.spring.reactjs@gmail.com
        password: Fcnhfk-rbtd
        port: 465
        protocol: smtps
        properties:
            mail:
                smtp:
                    auth: true
                    starttls:
                        enable: true
mail:
    debug: false

rabbitmq:
    exchanges:
        internal: internal.exchange
    queues:
        mail: mail.queue
    routing-keys:
        internal-mail: internal.mail.routing-key

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "image-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8021

spring:
    application:
        name: image-service
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411

amazon:
    s3:
        bucket:
            name: twitterclonestorage
    aws:
        access-key: AKIATP4TDBGPAJUNI5EY
        secret-key: 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

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "lists-service-test.yml": {
                        "file": {
                          "contents": `server:
    port: 8005
spring:
    application:
        name: lists-service
    datasource:
        url: jdbc:postgresql://localhost:5432/lists-test
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    sql:
        init:
            mode: always
            data-locations: classpath:sql-test/clear-lists-db.sql, classpath:sql-test/populate-lists-db.sql
eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: localhost
`
                        }
                      },
                      "lists-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8005
spring:
    application:
        name: lists-service
    datasource:
        url: jdbc:postgresql://$\{DATASOURCE_HOST:localhost}:5432/lists
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    flyway:
        locations: classpath:db/migration/lists
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
    rabbitmq:
        addresses: $\{RABBITMQ_HOST:localhost}:5672

resilience4j:
    circuitbreaker:
        instances:
            notification-service:
                minimum-number-of-calls: 5
            tweet-service:
                minimum-number-of-calls: 5
            user-service:
                minimum-number-of-calls: 5
feign:
    circuitbreaker:
        enabled: true

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "notification-service-test.yml": {
                        "file": {
                          "contents": `server:
    port: 8007
spring:
    application:
        name: notification-service
    datasource:
        url: jdbc:postgresql://localhost:5432/notification-test
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    sql:
        init:
            mode: always
            data-locations: classpath:sql-test/clear-notification-db.sql, classpath:sql-test/populate-notification-db.sql
eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: localhost
`
                        }
                      },
                      "notification-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8007
spring:
    application:
        name: notification-service
    datasource:
        url: jdbc:postgresql://$\{DATASOURCE_HOST:localhost}:5432/notification
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    flyway:
        locations: classpath:db/migration/notification
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
    rabbitmq:
        addresses: $\{RABBITMQ_HOST:localhost}:5672

resilience4j:
    circuitbreaker:
        instances:
            lists-service:
                minimum-number-of-calls: 5
            tweet-service:
                minimum-number-of-calls: 5
            user-service:
                minimum-number-of-calls: 5
            websocket-service:
                minimum-number-of-calls: 5
feign:
    circuitbreaker:
        enabled: true

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "tag-service-test.yml": {
                        "file": {
                          "contents": `server:
    port: 8004
spring:
    application:
        name: tag-service
    datasource:
        url: jdbc:postgresql://localhost:5432/tag-test
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    sql:
        init:
            mode: always
            data-locations: classpath:sql-test/clear-tag-db.sql, classpath:sql-test/populate-tag-db.sql
eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: localhost
`
                        }
                      },
                      "tag-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8004
spring:
    application:
        name: tag-service
    datasource:
        url: jdbc:postgresql://$\{DATASOURCE_HOST:localhost}:5432/tag
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    flyway:
        locations: classpath:db/migration/tag
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
    rabbitmq:
        addresses: $\{RABBITMQ_HOST:localhost}:5672

resilience4j:
    circuitbreaker:
        instances:
            user-service:
                minimum-number-of-calls: 5
feign:
    circuitbreaker:
        enabled: true

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "topic-service-test.yml": {
                        "file": {
                          "contents": `server:
    port: 8003
spring:
    application:
        name: topic-service
    datasource:
        url: jdbc:postgresql://localhost:5432/topic-test
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    sql:
        init:
            mode: always
            data-locations: classpath:sql-test/clear-topic-db.sql, classpath:sql-test/populate-topic-db.sql
eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: localhost
`
                        }
                      },
                      "topic-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8003
spring:
    application:
        name: topic-service
    datasource:
        url: jdbc:postgresql://$\{DATASOURCE_HOST:localhost}:5432/topic
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    flyway:
        locations: classpath:db/migration/topic
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
    rabbitmq:
        addresses: $\{RABBITMQ_HOST:localhost}:5672

resilience4j:
    circuitbreaker:
        instances:
            tweet-service:
                minimum-number-of-calls: 5
feign:
    circuitbreaker:
        enabled: true

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}`
                        }
                      },
                      "tweet-service-test.yml": {
                        "file": {
                          "contents": `server:
    port: 8002
spring:
    application:
        name: tweet-service
    datasource:
        url: jdbc:postgresql://localhost:5432/tweet-test
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    sql:
        init:
            mode: always
            data-locations: classpath:sql-test/clear-tweet-db.sql, classpath:sql-test/populate-tweet-db.sql
google:
    api:
        url: https://www.googleapis.com/youtube/v3/videos?id=%s&key=%s&part=snippet,contentDetails,statistics,status
        key: AIzaSyBtQYzGSmcCzqOztibg1BgSTqv0xwg1D-M
eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: localhost
`
                        }
                      },
                      "tweet-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8002
spring:
    application:
        name: tweet-service
    datasource:
        url: jdbc:postgresql://$\{DATASOURCE_HOST:localhost}:5432/tweet
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    flyway:
        locations: classpath:db/migration/tweet
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
    rabbitmq:
        addresses: $\{RABBITMQ_HOST:localhost}:5672

resilience4j:
    circuitbreaker:
        instances:
            image-service:
                minimum-number-of-calls: 5
            notification-service:
                minimum-number-of-calls: 5
            tag-service:
                minimum-number-of-calls: 5
            user-service:
                minimum-number-of-calls: 5
            websocket-service:
                minimum-number-of-calls: 5
feign:
    circuitbreaker:
        enabled: true

google:
    api:
        url: https://www.googleapis.com/youtube/v3/videos?id=%s&key=%s&part=snippet,contentDetails,statistics,status
        key: AIzaSyBtQYzGSmcCzqOztibg1BgSTqv0xwg1D-M

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "user-service-test.yml": {
                        "file": {
                          "contents": `server:
    port: 8001
spring:
    application:
        name: user-service
    datasource:
        url: jdbc:postgresql://localhost:5432/user-test
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: none
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    sql:
        init:
            mode: always
            data-locations: classpath:sql-test/clear-user-db.sql, classpath:sql-test/populate-user-db.sql
eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: localhost
`
                        }
                      },
                      "user-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8001
spring:
    application:
        name: user-service
    datasource:
        url: jdbc:postgresql://$\{DATASOURCE_HOST:localhost}:5432/user
        username: postgres
        password: root
        driverClassName: org.postgresql.Driver
    jpa:
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    flyway:
        locations: classpath:db/migration/user
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
    rabbitmq:
        addresses: $\{RABBITMQ_HOST:localhost}:5672

rabbitmq:
    exchanges:
        internal: internal.exchange
    routing-keys:
        internal-mail: internal.mail.routing-key

resilience4j:
    circuitbreaker:
        instances:
            email-service:
                minimum-number-of-calls: 5
            notification-service:
                minimum-number-of-calls: 5
            tweet-service:
                minimum-number-of-calls: 5
feign:
    circuitbreaker:
        enabled: true

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      },
                      "websocket-service.yml": {
                        "file": {
                          "contents": `server:
    port: 8022

spring:
    application:
        name: websocket-service
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411
eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: true
        register-with-eureka: true
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "docker-compose.yml": {
    "file": {
      "contents": `services:
    postgres:
        container_name: postgres
        image: postgres
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: root
            PGDATA: /data/postgres
        volumes:
            - postgres:/data/postgres
        ports:
            - "5432:5432"
        networks:
            - postgres
        restart: unless-stopped

    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: $\{PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
            PGADMIN_DEFAULT_PASSWORD: $\{PGADMIN_DEFAULT_PASSWORD:-admin}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - pgadmin:/var/lib/pgadmin
        ports:
            - "5050:80"
        networks:
            - postgres
        restart: unless-stopped

    zipkin:
        image: openzipkin/zipkin
        container_name: zipkin
        ports:
            - "9411:9411"
        networks:
            - spring

    rabbitmq:
        image: rabbitmq:3.9.11-management-alpine
        container_name: rabbitmq
        ports:
            - "5672:5672"
            - "15672:15672"
        networks:
            - spring

    eureka-server:
        image: merikbest/twitter-spring-reactjs:eureka-server
        container_name: eureka-server
        hostname: eureka-server
        environment:
            EUREKA_HOST: eureka-server
            ZIPKIN_HOST: zipkin
        ports:
            - "8761:8761"
        networks:
            - spring
        depends_on:
            - zipkin

    config-server:
        image: merikbest/twitter-spring-reactjs:config-server
        container_name: config-server
        hostname: config-server
        environment:
            EUREKA_HOST: eureka-server
            ZIPKIN_HOST: zipkin
        ports:
            - "8888:8888"
        networks:
            - spring
        depends_on:
            - zipkin
            - eureka-server

    api-gateway:
        image: merikbest/twitter-spring-reactjs:api-gateway
        container_name: api-gateway
        hostname: api-gateway
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        ports:
            - "8000:8000"
        networks:
            - spring
        depends_on:
            - zipkin
            - eureka-server
            - config-server

    user-service:
        image: merikbest/twitter-spring-reactjs:user-service
        container_name: user-service
        hostname: user-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        ports:
            - "8001:8001"
        networks:
            - postgres
            - spring
        depends_on:
            - postgres
            - zipkin
            - rabbitmq
            - eureka-server
            - config-server

    tweet-service:
        image: merikbest/twitter-spring-reactjs:tweet-service
        container_name: tweet-service
        hostname: tweet-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        ports:
            - "8002:8002"
        networks:
            - postgres
            - spring
        depends_on:
            - postgres
            - zipkin
            - rabbitmq
            - eureka-server
            - config-server

    topic-service:
        image: merikbest/twitter-spring-reactjs:topic-service
        container_name: topic-service
        hostname: topic-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        ports:
            - "8003:8003"
        networks:
            - postgres
            - spring
        depends_on:
            - postgres
            - zipkin
            - rabbitmq
            - eureka-server
            - config-server

    tag-service:
        image: merikbest/twitter-spring-reactjs:tag-service
        container_name: tag-service
        hostname: tag-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        ports:
            - "8004:8004"
        networks:
            - postgres
            - spring
        depends_on:
            - postgres
            - zipkin
            - rabbitmq
            - eureka-server
            - config-server

    lists-service:
        image: merikbest/twitter-spring-reactjs:lists-service
        container_name: lists-service
        hostname: lists-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        ports:
            - "8005:8005"
        networks:
            - postgres
            - spring
        depends_on:
            - postgres
            - zipkin
            - rabbitmq
            - eureka-server
            - config-server

    chat-service:
        image: merikbest/twitter-spring-reactjs:chat-service
        container_name: chat-service
        hostname: chat-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        ports:
            - "8006:8006"
        networks:
            - postgres
            - spring
        depends_on:
            - postgres
            - zipkin
            - rabbitmq
            - eureka-server
            - config-server

    notification-service:
        image: merikbest/twitter-spring-reactjs:notification-service
        container_name: notification-service
        hostname: notification-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        ports:
            - "8007:8007"
        networks:
            - postgres
            - spring
        depends_on:
            - postgres
            - zipkin
            - rabbitmq
            - eureka-server
            - config-server

    email-service:
        image: merikbest/twitter-spring-reactjs:email-service
        container_name: email-service
        hostname: email-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        ports:
            - "8020:8020"
        networks:
            - spring
        depends_on:
            - zipkin
            - eureka-server
            - config-server

    image-service:
        image: merikbest/twitter-spring-reactjs:image-service
        container_name: image-service
        hostname: image-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        ports:
            - "8021:8021"
        networks:
            - spring
        depends_on:
            - zipkin
            - eureka-server
            - config-server

    websocket-service:
        image: merikbest/twitter-spring-reactjs:websocket-service
        container_name: websocket-service
        hostname: websocket-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        ports:
            - "8022:8022"
        networks:
            - spring
        depends_on:
            - zipkin
            - eureka-server
            - config-server

networks:
    postgres:
        driver: bridge
    spring:
        driver: bridge

volumes:
    postgres:
    pgadmin:
`
    }
  },
  "eureka-server": {
    "directory": {
      "Dockerfile": {
        "file": {
          "contents": `FROM openjdk:17
MAINTAINER Miroslav Khotinskiy <merikbest2015@gmail.com>
COPY target/eureka-server-0.0.1-SNAPSHOT.jar ./
CMD ["java", "-jar", "eureka-server-0.0.1-SNAPSHOT.jar"]
`
        }
      },
      "pom.xml": {
        "file": {
          "contents": `<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>twitter-spring-reactjs</artifactId>
        <groupId>com.gmail.merikbest2015</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>eureka-server</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>eureka-server</name>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
`
        }
      },
      "src": {
        "directory": {
          "main": {
            "directory": {
              "java": {
                "directory": {
                  "com": {
                    "directory": {
                      "gmail": {
                        "directory": {
                          "merikbest2015": {
                            "directory": {
                              "EurekaServerApplication.java": {
                                "file": {
                                  "contents": `package com.gmail.merikbest2015;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@EnableEurekaServer
@SpringBootApplication
public class EurekaServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(EurekaServerApplication.class, args);
    }
}
`
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "resources": {
                "directory": {
                  "application.yml": {
                    "file": {
                      "contents": `server:
    port: 8761

spring:
    application:
        name: eureka-server
    zipkin:
        base-url: http://$\{ZIPKIN_HOST:localhost}:9411

eureka:
    client:
        service-url:
            defaultZone: http://$\{EUREKA_HOST:localhost}:8761/eureka
        fetch-registry: false
        register-with-eureka: false
    instance:
        hostname: $\{EUREKA_HOST:localhost}
`
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "lombok.config": {
    "file": {
      "contents": `lombok.copyableAnnotations += org.springframework.beans.factory.annotation.Qualifier
lombok.copyableAnnotations += org.springframework.context.annotation.Lazy
`
    }
  },
  "mvnw": {
    "file": {
      "contents": `#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "\`uname\`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="\`/usr/libexec/java_home\`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=\`java-config --jre-home\`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=\`ls -ld "$PRG"\`
    link=\`expr "$ls" : '.*-> \\(.*\\)$'\`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="\`dirname "$PRG"\`/$link"
    fi
  done

  saveddir=\`pwd\`

  M2_HOME=\`dirname "$PRG"\`/..

  # make it fully qualified
  M2_HOME=\`cd "$M2_HOME" && pwd\`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=\`cygpath --unix "$M2_HOME"\`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=\`cygpath --unix "$JAVA_HOME"\`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=\`cygpath --path --unix "$CLASSPATH"\`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="\`(cd "$M2_HOME"; pwd)\`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="\`(cd "$JAVA_HOME"; pwd)\`"
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="\`which javac\`"
  if [ -n "$javaExecutable" ] && ! [ "\`expr \\"$javaExecutable\\" : '\\([^ ]*\\)'\`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=\`which readlink\`
    if [ ! \`expr "$readLink" : '\\([^ ]*\\)'\` = "no" ]; then
      if $darwin ; then
        javaHome="\`dirname \\"$javaExecutable\\"\`"
        javaExecutable="\`cd \\"$javaHome\\" && pwd -P\`/javac"
      else
        javaExecutable="\`readlink -f \\"$javaExecutable\\"\`"
      fi
      javaHome="\`dirname \\"$javaExecutable\\"\`"
      javaHome=\`expr "$javaHome" : '\\(.*\\)/bin'\`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="\`which java\`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "$\{wdir}" ]; then
      wdir=\`cd "$wdir/.."; pwd\`
    fi
    # end of workaround
  done
  echo "$\{basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\\n' ' ' < "$1")"
  fi
}

BASE_DIR=\`find_maven_basedir "$(pwd)"\`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Found .mvn/wrapper/maven-wrapper.jar"
    fi
else
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
    fi
    if [ -n "$MVNW_REPOURL" ]; then
      jarUrl="$MVNW_REPOURL/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar"
    else
      jarUrl="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar"
    fi
    while IFS="=" read key value; do
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      esac
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Downloading from: $jarUrl"
    fi
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
    if $cygwin; then
      wrapperJarPath=\`cygpath --path --windows "$wrapperJarPath"\`
    fi

    if command -v wget > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found wget ... using wget"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            wget "$jarUrl" -O "$wrapperJarPath"
        else
            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath"
        fi
    elif command -v curl > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found curl ... using curl"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            curl -o "$wrapperJarPath" "$jarUrl" -f
        else
            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
        fi

    else
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Falling back to using Java to download"
        fi
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        # For Cygwin, switch paths to Windows format before running javac
        if $cygwin; then
          javaClass=\`cygpath --path --windows "$javaClass"\`
        fi
        if [ -e "$javaClass" ]; then
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Compiling MavenWrapperDownloader.java ..."
                fi
                # Compiling the Java class
                ("$JAVA_HOME/bin/javac" "$javaClass")
            fi
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                # Running the downloader
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Running MavenWrapperDownloader.java ..."
                fi
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
            fi
        fi
    fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=$\{MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
  echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=\`cygpath --path --windows "$M2_HOME"\`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=\`cygpath --path --windows "$JAVA_HOME"\`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=\`cygpath --path --windows "$CLASSPATH"\`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=\`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"\`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \\
  $MAVEN_OPTS \\
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \\
  "-Dmaven.home=$\{M2_HOME}" "-Dmaven.multiModuleProjectDirectory=$\{MAVEN_PROJECTBASEDIR}" \\
  $\{WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
`
    }
  },
  "mvnw.cmd": {
    "file": {
      "contents": `@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\\mavenrc_pre.bat" call "%HOME%\\mavenrc_pre.bat"
if exist "%HOME%\\mavenrc_pre.cmd" call "%HOME%\\mavenrc_pre.cmd"
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\\bin\\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\\bin\\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar"

FOR /F "tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
\t\t"$webclient = new-object System.Net.WebClient;"^
\t\t"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
\t\t"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
\t\t"}"^
\t\t"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
\t\t"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%" == "" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\\mavenrc_post.bat" call "%HOME%\\mavenrc_post.bat"
if exist "%HOME%\\mavenrc_post.cmd" call "%HOME%\\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%" == "on" pause

if "%MAVEN_TERMINATE_CMD%" == "on" exit %ERROR_CODE%

exit /B %ERROR_CODE%
`
    }
  },
  "pom.xml": {
    "file": {
      "contents": `<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.7</version>
    </parent>

    <groupId>com.gmail.merikbest2015</groupId>
    <artifactId>twitter-spring-reactjs</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>twitter-spring-reactjs</name>
    <description>Twitter clone</description>

    <modules>
        <module>eureka-server</module>
        <module>config-server</module>
        <module>api-gateway</module>
        <module>commons</module>
        <module>email-service</module>
        <module>image-service</module>
        <module>topic-service</module>
        <module>user-service</module>
        <module>tweet-service</module>
        <module>tag-service</module>
        <module>lists-service</module>
        <module>chat-service</module>
        <module>notification-service</module>
        <module>websocket-service</module>
    </modules>

    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring.boot.maven.plugin.version>2.5.9</spring.boot.maven.plugin.version>
        <spring.boot.dependencies.version>2.6.14</spring.boot.dependencies.version>
        <spring.cloud-version>2021.0.0</spring.cloud-version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>$\{spring.boot.dependencies.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>$\{spring.cloud-version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>5.3.9</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>$\{spring.boot.maven.plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>
`
    }
  },
  "README.md": {
    "file": {
      "contents": `# Twitter clone

Twitter clone developed with a microservice approach using the Spring Framework and React.js. </br>
The project is always updated with new features. </br>
See more demo screenshots below.

![Home page](screenshots/1_Preview.jpg)

## Used Technologies:

* Back-end: Java 17, Spring (Boot, Cloud, Data, Security), JPA / Hibernate, PostgreSQL, JUnit, Mockito
* Front-end: TypeScript, React.js, Redux-Saga, Material-UI, Jest, Enzyme
* Security: JWT
* AWS S3 bucket
* Docker

## Features

* Authentication with JWT and Email validation. Password change.
* Users can Add tweets, Like, Retweet, Reply, Quote tweets, Schedule tweets.
* Users can Delete tweets, Send tweet via Direct Message, Add tweet to Bookmarks.
* Users can Create Lists, Edit Lists, Add other users to Lists, Follow List, Pin Lists.
* Users get notifications when someone subscribed, retweet or liked tweet.
* Users can add Images to tweet, Create Poll and vote, Post tweets with link preview, Posts tweets with YouTube video link.
* Websocket online chats.
* Private user profile and lists.
* Account Settings.
* Users can subscribe to each other.
* User can edit profile.
* User can block and mute other users.
* Users can customize site color scheme and color background.
* Users can search tweets by hashtags and search other users and users tweets.
* All images downloads on Amazon S3 bucket.

## Work in progress

* Advanced search
* User mentions
* Tweet thread
* Front-end refactoring
* Back-end refactoring
* Adaptive layout

## Installation

1. Install maven: [link](https://www.baeldung.com/install-maven-on-windows-linux-mac)
2. Install Java: [link](https://www.oracle.com/java/technologies/javase/jdk15-archive-downloads.html)
3. Install Postgresql: [link](https://www.postgresql.org/download/)
4. Install Intellij IDEA Ultimate: [link](https://www.jetbrains.com/idea/)
5. Install Docker and Docker Desktop
6. Add Lombok plugin to the Intellij IDEA: [link](https://i.ibb.co/Gtwcw0t/6-lombok.jpg)
7. Make sure Java 17 is selected: [link](https://i.ibb.co/8PVGDdm/7-Java-17.png)
8. Build the project with Maven: [link](https://i.ibb.co/qr4w7F4/8-Maven-build.pngg)
9. In the docker-compose file [link](https://github.com/merikbest/twitter-spring-reactjs/blob/microservice/docker-compose.yml) run 4 services: \`postgres\`, \`pgadmin\`, \`zipkin\`, \`rabbitmq\` [link](https://i.ibb.co/tCCXJLk/9-Docker-Desktop.png)
10. Open http://localhost:5050/browser/ and create DBs: \`user\`, \`tweet\`, \`chat\`, \`lists\`, \`notification\`, \`tag\`, \`topic\`
11. Sign up for a new AWS account: [link](https://portal.aws.amazon.com/billing/signup#/start)
12. Create a new AWS S3 bucket: [link](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html)
13. Change access from private to public in the AWS S3 bucket
14. Add a public access policy to the AWS S3 bucket (!!!important!!! see:
[doc](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-policy-language-overview.html),
[github examle](https://stackoverflow.com/questions/58580042/how-to-set-public-read-only-access-on-amazon-s3-bucket#:~:text=To%20make%20objects%20publicly%20accessible%2C%20use%20a%20policy%20like%20this%3A) or 
[my example](https://i.ibb.co/mSpHmyL/12-bucket.jpg))
15. Get AWS keys: [link](https://supsystic.com/documentation/id-secret-access-key-amazon-s3/) and add to the application.properties file: [link](https://i.ibb.co/zHw537K/13-key.jpg)
16. In the [image-service.yml config file](https://github.com/merikbest/twitter-spring-reactjs/blob/391ddc666a79057615322898ea2715f1178fdb03/config-server/src/main/resources/config/image-service.yml#L13) add bucket, access-key, secret-key properties
17. Sign up for gmail
18. Create google API keys: [link](https://developers.google.com/youtube/v3/getting-started#before-you-start)
19. Add google API key to the [tweet-service.yml config file](https://github.com/merikbest/twitter-spring-reactjs/blob/391ddc666a79057615322898ea2715f1178fdb03/config-server/src/main/resources/config/tweet-service.yml#L27)
20. Add gmail account and password to the [email-service.yml config file](https://github.com/merikbest/twitter-spring-reactjs/blob/391ddc666a79057615322898ea2715f1178fdb03/config-server/src/main/resources/config/email-service.yml#L11)
21. Go to [link](https://myaccount.google.com/u/2/lesssecureapps) (important) and change to: “Allow less secure apps: ON”
22. Install node.js and npm: [link](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)
23. Open terminal in frontend directory and type: npm install (or yarn install)
24. Run services in this order:
    - eureka-server
    - config-server
    - api-gateway
    - user-service
    - and then all other services in any order [link](https://i.ibb.co/jRhYMd9/24-microservices-run.png)
25. Open terminal in frontend directory and type: npm start or run via [package.json](https://github.com/merikbest/twitter-spring-reactjs/blob/391ddc666a79057615322898ea2715f1178fdb03/frontend/package.json#L73)
26. Navigate to http://localhost:3000/home

#### To enter the application you can register or login:
Login: user2016@gmail.com  
Password: qwerty123

## Screenshots

#### Add tweet
![AddTweet](screenshots/2_Add_tweet.jpg)
___
#### Add Poll
![AddTPoll](screenshots/3_Add_Poll.jpg)
___
#### Reply tweet
![Reply](screenshots/4_Reply_tweet.jpg)
___
#### Tweet image modal
![TweetImageModal](screenshots/5_Tweet_image_modal.jpg)
___
#### Notifications
![Notifications](screenshots/6_Notifications.jpg)
___
#### Full Notifications
![FullNotifications](screenshots/7_Full_Notifications.jpg)
___
#### Search
![Search](screenshots/8_Search.jpg)
___
#### Search Videos
![SearchVideos](screenshots/9_Search_Videos.jpg)
___
#### Full tweet
![FullTweet](screenshots/10_Full_tweet.jpg)
___
#### Liked by Modal window
![LikedByModalWindow](screenshots/11_Liked_by_Modal_window.jpg)
___
#### Following and Followers
![FollowingAndFollowers](screenshots/12_Following_and_Followers.jpg)
___
#### Trends
![Trends](screenshots/13_Trends.jpg)
___
#### Bookmarks
![Bookmarks](screenshots/14_Bookmarks.jpg)
___
#### Chat
![Chat](screenshots/15_Chat.jpg)
___
#### Lists
![Lists](screenshots/16_Lists.jpg)
___
#### Full List
![FullList](screenshots/17_Full_List.jpg)
___
#### Suggested Lists
![SuggestedLists](screenshots/18_Suggested_Lists.jpg)
___
#### Settings
![Settings](screenshots/19_Settings.jpg)
___
#### Customization
![Customization](screenshots/20_Profile_Customization.jpg)
___
#### Dark theme profile
![Customization](screenshots/21_Profile_with_color_theme.jpg)
`
    }
  },
  "user-service": {
    "directory": {
      "Dockerfile": {
        "file": {
          "contents": `FROM openjdk:17
MAINTAINER Miroslav Khotinskiy <merikbest2015@gmail.com>
COPY target/user-service-0.0.1-SNAPSHOT.jar ./
CMD ["java", "-jar", "user-service-0.0.1-SNAPSHOT.jar"]
`
        }
      },
      "pom.xml": {
        "file": {
          "contents": `<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>twitter-spring-reactjs</artifactId>
        <groupId>com.gmail.merikbest2015</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>user-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>user-service</name>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>5.3.9</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>3.1.1</version>
        </dependency>
        <dependency>
            <groupId>com.gmail.merikbest2015</groupId>
            <artifactId>commons</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
`
        }
      },
      "src": {
        "directory": {
          "main": {
            "directory": {
              "java": {
                "directory": {
                  "com": {
                    "directory": {
                      "gmail": {
                        "directory": {
                          "merikbest2015": {
                            "directory": {
                              "amqp": {
                                "directory": {
                                  "AmqpProducer.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.amqp;

import com.gmail.merikbest2015.dto.request.EmailRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class AmqpProducer {

    private final AmqpTemplate amqpTemplate;

    @Value("$\{rabbitmq.exchanges.internal}")
    private String exchange;

    @Value("$\{rabbitmq.routing-keys.internal-mail}")
    private String routingKey;

    public void sendEmail(EmailRequest emailRequest) {
        amqpTemplate.convertAndSend(exchange, routingKey, emailRequest);
    }
}
`
                                    }
                                  }
                                }
                              },
                              "configuration": {
                                "directory": {
                                  "AuthConfiguration.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class AuthConfiguration {

    @Bean
    public PasswordEncoder getPasswordEncoder() {
        return new BCryptPasswordEncoder(8);
    }
}
`
                                    }
                                  }
                                }
                              },
                              "controller": {
                                "directory": {
                                  "api": {
                                    "directory": {
                                      "AuthenticationApiController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.api;

import com.gmail.merikbest2015.dto.response.user.UserPrincipalResponse;
import com.gmail.merikbest2015.mapper.BasicMapper;
import com.gmail.merikbest2015.service.AuthenticationService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import static com.gmail.merikbest2015.constants.PathConstants.API_V1_AUTH;
import static com.gmail.merikbest2015.constants.PathConstants.USER_EMAIL;

@RestController
@RequiredArgsConstructor
@RequestMapping(API_V1_AUTH)
public class AuthenticationApiController {

    private final AuthenticationService authenticationService;
    private final BasicMapper mapper;

    @GetMapping(USER_EMAIL)
    public UserPrincipalResponse getUserPrincipalByEmail(@PathVariable("email") String email) {
        return mapper.convertToResponse(authenticationService.getUserPrincipalByEmail(email), UserPrincipalResponse.class);
    }
}
`
                                        }
                                      },
                                      "UserApiController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.api;

import com.gmail.merikbest2015.dto.*;
import com.gmail.merikbest2015.dto.request.IdsRequest;
import com.gmail.merikbest2015.dto.response.chat.ChatTweetUserResponse;
import com.gmail.merikbest2015.dto.response.chat.ChatUserParticipantResponse;
import com.gmail.merikbest2015.dto.response.lists.ListMemberResponse;
import com.gmail.merikbest2015.dto.response.lists.CommonUserResponse;
import com.gmail.merikbest2015.dto.response.notification.NotificationUserResponse;
import com.gmail.merikbest2015.dto.response.tweet.TweetAdditionalInfoUserResponse;
import com.gmail.merikbest2015.dto.response.tweet.TweetAuthorResponse;
import com.gmail.merikbest2015.dto.response.user.UserChatResponse;
import com.gmail.merikbest2015.dto.response.user.UserResponse;
import com.gmail.merikbest2015.service.UserClientService;
import lombok.RequiredArgsConstructor;
import org.springframework.cloud.openfeign.SpringQueryMap;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import static com.gmail.merikbest2015.constants.PathConstants.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(API_V1_USER)
public class UserApiController {

    private final UserClientService userService;

    @GetMapping(IDS)
    public List<Long> getUserFollowersIds() {
        return userService.getUserFollowersIds();
    }

    @GetMapping(SEARCH_USERNAME)
    public HeaderResponse<UserChatResponse> searchUsersByUsername(@PathVariable("username") String username,
                                                                  Pageable pageable) {
        return userService.searchUsersByUsername(username, pageable);
    }

    @GetMapping(SUBSCRIBERS_USER_ID)
    public List<Long> getSubscribersByUserId(@PathVariable("userId") Long userId) {
        return userService.getSubscribersByUserId(userId);
    }

    @GetMapping(IS_FOLLOWED_USER_ID)
    public Boolean isUserFollowByOtherUser(@PathVariable("userId") Long userId) {
        return userService.isUserFollowByOtherUser(userId);
    }

    @GetMapping(IS_PRIVATE_USER_ID)
    public Boolean isUserHavePrivateProfile(@PathVariable("userId") Long userId) {
        return userService.isUserHavePrivateProfile(userId);
    }

    @GetMapping(IS_BLOCKED_USER_ID)
    public Boolean isUserBlocked(@PathVariable("userId") Long userId, @PathVariable("blockedUserId") Long blockedUserId) {
        return userService.isUserBlocked(userId, blockedUserId);
    }

    @GetMapping(IS_USER_BLOCKED_USER_ID)
    public Boolean isUserBlockedByMyProfile(@PathVariable("userId") Long userId) {
        return userService.isUserBlockedByMyProfile(userId);
    }

    @GetMapping(IS_MY_PROFILE_BLOCKED_USER_ID)
    public Boolean isMyProfileBlockedByUser(@PathVariable("userId") Long userId) {
        return userService.isMyProfileBlockedByUser(userId);
    }

    @GetMapping(NOTIFICATION_USER_ID)
    public void increaseNotificationsCount(@PathVariable("userId") Long userId) {
        userService.increaseNotificationsCount(userId);
    }

    @PutMapping(LIKE_COUNT)
    public void updateLikeCount(@PathVariable("increaseCount") boolean increaseCount) {
        userService.updateLikeCount(increaseCount);
    }

    @PutMapping(TWEET_COUNT)
    public void updateTweetCount(@PathVariable("increaseCount") boolean increaseCount) {
        userService.updateTweetCount(increaseCount);
    }

    @PutMapping(MEDIA_COUNT)
    public void updateMediaTweetCount(@PathVariable("increaseCount") boolean increaseCount) {
        userService.updateMediaTweetCount(increaseCount);
    }

    @GetMapping(LIST_OWNER_USER_ID)
    public CommonUserResponse getListOwnerById(@PathVariable("userId") Long userId) {
        return userService.getListOwnerById(userId);
    }

    @PostMapping(LIST_PARTICIPANTS)
    public List<ListMemberResponse> getListParticipantsByIds(@RequestBody IdsRequest request) {
        return userService.getListParticipantsByIds(request);
    }

    @GetMapping(LIST_PARTICIPANTS_USERNAME)
    public List<ListMemberResponse> searchListMembersByUsername(@PathVariable("username") String username) {
        return userService.searchListMembersByUsername(username);
    }

    @GetMapping(NOTIFICATION_USER_USER_ID)
    public NotificationUserResponse getNotificationUser(@PathVariable("userId") Long userId) {
        return userService.getNotificationUser(userId);
    }

    @GetMapping(TWEET_AUTHOR_USER_ID)
    public TweetAuthorResponse getTweetAuthor(@PathVariable("userId") Long userId) {
        return userService.getTweetAuthor(userId);
    }

    @GetMapping(TWEET_ADDITIONAL_INFO_USER_ID)
    public TweetAdditionalInfoUserResponse getTweetAdditionalInfoUser(@PathVariable("userId") Long userId) {
        return userService.getTweetAdditionalInfoUser(userId);
    }

    @PostMapping(TWEET_LIKED)
    public HeaderResponse<UserResponse> getTweetLikedUsersByIds(@RequestBody IdsRequest request,
                                                                @SpringQueryMap Pageable pageable) {
        return userService.getTweetLikedUsersByIds(request, pageable);
    }

    @PostMapping(TWEET_RETWEETED)
    public HeaderResponse<UserResponse> getRetweetedUsersByTweetId(@RequestBody IdsRequest request,
                                                                   @SpringQueryMap Pageable pageable) {
        return userService.getRetweetedUsersByTweetId(request, pageable);
    }

    @PutMapping(TWEET_PINNED_TWEET_ID)
    public void updatePinnedTweetId(@PathVariable("tweetId") Long tweetId) {
        userService.updatePinnedTweetId(tweetId);
    }

    @GetMapping(TWEET_PINNED_USER_ID)
    public Long getUserPinnedTweetId(@PathVariable("userId") Long userId) {
        return userService.getUserPinnedTweetId(userId);
    }

    @PostMapping(TWEET_VALID_IDS)
    public List<Long> getValidTweetUserIds(@RequestBody IdsRequest request, @PathVariable("text") String text) {
        return userService.getValidTweetUserIds(request, text);
    }

    @PostMapping(VALID_IDS)
    public List<Long> getValidUserIds(@RequestBody IdsRequest request) {
        return userService.getValidUserIds(request);
    }

    @GetMapping(CHAT_PARTICIPANT_USER_ID)
    public ChatUserParticipantResponse getChatParticipant(@PathVariable("userId") Long userId) {
        return userService.getChatParticipant(userId);
    }

    @GetMapping(IS_EXISTS_USER_ID)
    public Boolean isUserExists(@PathVariable("userId") Long userId) {
        return userService.isUserExists(userId);
    }

    @GetMapping(USER_ID)
    public UserResponse getUserById(@PathVariable("userId") Long userId) {
        return userService.getUserResponseById(userId);
    }

    @GetMapping(CHAT_USER_ID)
    public ChatTweetUserResponse getChatTweetUser(@PathVariable("userId") Long userId) {
        return userService.getChatTweetUser(userId);
    }

    @PostMapping(CHAT_VALID_IDS)
    public List<Long> validateChatUsersIds(@RequestBody IdsRequest request) {
        return userService.validateChatUsersIds(request);
    }

    @GetMapping(SUBSCRIBERS)
    public List<NotificationUserResponse> getUsersWhichUserSubscribed() {
        return userService.getUsersWhichUserSubscribed();
    }

    @GetMapping(SUBSCRIBERS_IDS)
    public List<Long> getUserIdsWhichUserSubscribed() {
        return userService.getUserIdsWhichUserSubscribed();
    }

    @GetMapping(NOTIFICATION_RESET)
    public void resetNotificationCount() {
        userService.resetNotificationCount();
    }
}
`
                                        }
                                      }
                                    }
                                  },
                                  "rest": {
                                    "directory": {
                                      "AuthenticationController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.dto.request.*;
import com.gmail.merikbest2015.dto.response.AuthUserResponse;
import com.gmail.merikbest2015.dto.response.AuthenticationResponse;
import com.gmail.merikbest2015.mapper.AuthenticationMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import static com.gmail.merikbest2015.constants.PathConstants.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(UI_V1_AUTH)
public class AuthenticationController {

    private final AuthenticationMapper authenticationMapper;

    @PostMapping(LOGIN)
    public ResponseEntity<AuthenticationResponse> login(@Valid @RequestBody AuthenticationRequest request, BindingResult bindingResult) {
        return ResponseEntity.ok(authenticationMapper.login(request, bindingResult));
    }

    @PostMapping(FORGOT_EMAIL)
    public ResponseEntity<String> getExistingEmail(@Valid @RequestBody ProcessEmailRequest request, BindingResult bindingResult) {
        return ResponseEntity.ok(authenticationMapper.getExistingEmail(request.getEmail(), bindingResult));
    }

    @PostMapping(FORGOT)
    public ResponseEntity<String> sendPasswordResetCode(@Valid @RequestBody ProcessEmailRequest request, BindingResult bindingResult) {
        return ResponseEntity.ok(authenticationMapper.sendPasswordResetCode(request.getEmail(), bindingResult));
    }

    @GetMapping(RESET_CODE)
    public ResponseEntity<AuthUserResponse> getUserByPasswordResetCode(@PathVariable("code") String code) {
        return ResponseEntity.ok(authenticationMapper.getUserByPasswordResetCode(code));
    }

    @PostMapping(RESET)
    public ResponseEntity<String> passwordReset(@Valid @RequestBody PasswordResetRequest request, BindingResult bindingResult) {
        return ResponseEntity.ok(authenticationMapper.passwordReset(request, bindingResult));
    }

    @PostMapping(RESET_CURRENT)
    public ResponseEntity<String> currentPasswordReset(@Valid @RequestBody CurrentPasswordResetRequest request, BindingResult bindingResult) {
        return ResponseEntity.ok(authenticationMapper.currentPasswordReset(request, bindingResult));
    }
}
`
                                        }
                                      },
                                      "BlockUserController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.dto.HeaderResponse;
import com.gmail.merikbest2015.dto.response.BlockedUserResponse;
import com.gmail.merikbest2015.mapper.BlockUserMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

import static com.gmail.merikbest2015.constants.PathConstants.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(UI_V1_USER)
public class BlockUserController {

    private final BlockUserMapper blockUserMapper;

    @GetMapping(BLOCKED)
    public ResponseEntity<List<BlockedUserResponse>> getBlockList(@PageableDefault(size = 15) Pageable pageable) {
        HeaderResponse<BlockedUserResponse> response = blockUserMapper.getBlockList(pageable);
        return ResponseEntity.ok().headers(response.getHeaders()).body(response.getItems());
    }

    @GetMapping(BLOCKED_USER_ID)
    public ResponseEntity<Boolean> processBlockList(@PathVariable Long userId) {
        return ResponseEntity.ok(blockUserMapper.processBlockList(userId));
    }
}
`
                                        }
                                      },
                                      "FollowerUserController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.dto.HeaderResponse;
import com.gmail.merikbest2015.dto.response.user.UserResponse;
import com.gmail.merikbest2015.dto.response.FollowerUserResponse;
import com.gmail.merikbest2015.dto.response.UserProfileResponse;
import com.gmail.merikbest2015.mapper.FollowerUserMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

import static com.gmail.merikbest2015.constants.PathConstants.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(UI_V1_USER)
public class FollowerUserController {

    private final FollowerUserMapper followerUserMapper;

    @GetMapping(FOLLOWERS_USER_ID)
    public ResponseEntity<List<UserResponse>> getFollowers(@PathVariable Long userId, @PageableDefault(size = 15) Pageable pageable) {
        HeaderResponse<UserResponse> response = followerUserMapper.getFollowers(userId, pageable);
        return ResponseEntity.ok().headers(response.getHeaders()).body(response.getItems());
    }

    @GetMapping(FOLLOWING_USER_ID)
    public ResponseEntity<List<UserResponse>> getFollowing(@PathVariable Long userId, @PageableDefault(size = 15) Pageable pageable) {
        HeaderResponse<UserResponse> response = followerUserMapper.getFollowing(userId, pageable);
        return ResponseEntity.ok().headers(response.getHeaders()).body(response.getItems());
    }

    @GetMapping(FOLLOWER_REQUESTS)
    public ResponseEntity<List<FollowerUserResponse>> getFollowerRequests(@PageableDefault(size = 10) Pageable pageable) {
        HeaderResponse<FollowerUserResponse> response = followerUserMapper.getFollowerRequests(pageable);
        return ResponseEntity.ok().headers(response.getHeaders()).body(response.getItems());
    }

    @GetMapping(FOLLOW_USER_ID)
    public ResponseEntity<Boolean> processFollow(@PathVariable Long userId) {
        return ResponseEntity.ok(followerUserMapper.processFollow(userId));
    }

    @GetMapping(FOLLOW_OVERALL) // TODO add pagination
    public ResponseEntity<List<UserResponse>> overallFollowers(@PathVariable Long userId) {
        return ResponseEntity.ok(followerUserMapper.overallFollowers(userId));
    }

    @GetMapping(FOLLOW_PRIVATE)
    public ResponseEntity<UserProfileResponse> processFollowRequestToPrivateProfile(@PathVariable Long userId) {
        return ResponseEntity.ok(followerUserMapper.processFollowRequestToPrivateProfile(userId));
    }

    @GetMapping(FOLLOW_ACCEPT)
    public ResponseEntity<String> acceptFollowRequest(@PathVariable Long userId) {
        return ResponseEntity.ok(followerUserMapper.acceptFollowRequest(userId));
    }

    @GetMapping(FOLLOW_DECLINE)
    public ResponseEntity<String> declineFollowRequest(@PathVariable Long userId) {
        return ResponseEntity.ok(followerUserMapper.declineFollowRequest(userId));
    }
}
`
                                        }
                                      },
                                      "MuteUserController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.dto.HeaderResponse;
import com.gmail.merikbest2015.dto.response.MutedUserResponse;
import com.gmail.merikbest2015.mapper.MuteUserMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

import static com.gmail.merikbest2015.constants.PathConstants.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(UI_V1_USER)
public class MuteUserController {

    private final MuteUserMapper muteUserMapper;

    @GetMapping(MUTED)
    public ResponseEntity<List<MutedUserResponse>> getMutedList(@PageableDefault(size = 15) Pageable pageable) {
        HeaderResponse<MutedUserResponse> response = muteUserMapper.getMutedList(pageable);
        return ResponseEntity.ok().headers(response.getHeaders()).body(response.getItems());
    }

    @GetMapping(MUTED_USER_ID)
    public ResponseEntity<Boolean> processMutedList(@PathVariable Long userId) {
        return ResponseEntity.ok(muteUserMapper.processMutedList(userId));
    }
}
`
                                        }
                                      },
                                      "RegistrationController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.dto.request.EndRegistrationRequest;
import com.gmail.merikbest2015.dto.request.ProcessEmailRequest;
import com.gmail.merikbest2015.dto.request.RegistrationRequest;
import com.gmail.merikbest2015.dto.response.AuthenticationResponse;
import com.gmail.merikbest2015.mapper.RegistrationMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import static com.gmail.merikbest2015.constants.PathConstants.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(UI_V1_AUTH)
public class RegistrationController {

    private final RegistrationMapper registrationMapper;

    @PostMapping(REGISTRATION_CHECK)
    public ResponseEntity<String> registration(@Valid @RequestBody RegistrationRequest request, BindingResult bindingResult) {
        return ResponseEntity.ok(registrationMapper.registration(request, bindingResult));
    }

    @PostMapping(REGISTRATION_CODE)
    public ResponseEntity<String> sendRegistrationCode(@Valid @RequestBody ProcessEmailRequest request, BindingResult bindingResult) {
        return ResponseEntity.ok(registrationMapper.sendRegistrationCode(request.getEmail(), bindingResult));
    }

    @GetMapping(REGISTRATION_ACTIVATE_CODE)
    public ResponseEntity<String> checkRegistrationCode(@PathVariable("code") String code) {
        return ResponseEntity.ok(registrationMapper.checkRegistrationCode(code));
    }

    @PostMapping(REGISTRATION_CONFIRM)
    public ResponseEntity<AuthenticationResponse> endRegistration(@Valid @RequestBody EndRegistrationRequest request, BindingResult bindingResult) {
        return ResponseEntity.ok(registrationMapper.endRegistration(request, bindingResult));
    }
}
`
                                        }
                                      },
                                      "UserController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.dto.HeaderResponse;
import com.gmail.merikbest2015.dto.response.user.UserResponse;
import com.gmail.merikbest2015.dto.request.UserRequest;
import com.gmail.merikbest2015.dto.response.*;
import com.gmail.merikbest2015.mapper.AuthenticationMapper;
import com.gmail.merikbest2015.mapper.UserMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import static com.gmail.merikbest2015.constants.PathConstants.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(UI_V1_USER)
public class UserController {

    private final UserMapper userMapper;
    private final AuthenticationMapper authenticationMapper;

    @GetMapping(TOKEN)
    public ResponseEntity<AuthenticationResponse> getUserByToken() {
        return ResponseEntity.ok(authenticationMapper.getUserByToken());
    }

    @GetMapping(USER_ID)
    public ResponseEntity<UserProfileResponse> getUserById(@PathVariable Long userId) {
        return ResponseEntity.ok(userMapper.getUserById(userId));
    }

    @GetMapping(ALL)
    public ResponseEntity<List<UserResponse>> getUsers(@PageableDefault(size = 15) Pageable pageable) {
        HeaderResponse<UserResponse> response = userMapper.getUsers(pageable);
        return ResponseEntity.ok().headers(response.getHeaders()).body(response.getItems());
    }

    @GetMapping(RELEVANT)
    public ResponseEntity<List<UserResponse>> getRelevantUsers() {
        return ResponseEntity.ok(userMapper.getRelevantUsers());
    }

    @GetMapping(SEARCH_USERNAME)
    public ResponseEntity<List<UserResponse>> searchUsersByUsername(@PathVariable String username,
                                                                    @PageableDefault(size = 15) Pageable pageable) {
        HeaderResponse<UserResponse> response = userMapper.searchUsersByUsername(username, pageable);
        return ResponseEntity.ok().headers(response.getHeaders()).body(response.getItems());
    }

    @GetMapping(SEARCH_TEXT)
    public ResponseEntity<SearchResultResponse> searchByText(@PathVariable String text) {
        return ResponseEntity.ok(userMapper.searchByText(text));
    }

    @GetMapping(START)
    public ResponseEntity<Boolean> startUseTwitter() {
        return ResponseEntity.ok(userMapper.startUseTwitter());
    }

    @PutMapping
    public ResponseEntity<AuthUserResponse> updateUserProfile(@RequestBody UserRequest userRequest) {
        return ResponseEntity.ok(userMapper.updateUserProfile(userRequest));
    }

    @GetMapping(SUBSCRIBE_USER_ID)
    public ResponseEntity<Boolean> processSubscribeToNotifications(@PathVariable Long userId) {
        return ResponseEntity.ok(userMapper.processSubscribeToNotifications(userId));
    }

    @GetMapping(PIN_TWEET_ID)
    public ResponseEntity<Long> processPinTweet(@PathVariable Long tweetId) {
        return ResponseEntity.ok(userMapper.processPinTweet(tweetId));
    }

    @GetMapping(DETAILS_USER_ID)
    public ResponseEntity<UserDetailResponse> getUserDetails(@PathVariable Long userId) {
        return ResponseEntity.ok(userMapper.getUserDetails(userId));
    }
}
`
                                        }
                                      },
                                      "UserSettingsController.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.dto.request.SettingsRequest;
import com.gmail.merikbest2015.dto.response.AuthenticationResponse;
import com.gmail.merikbest2015.dto.response.UserPhoneResponse;
import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import com.gmail.merikbest2015.mapper.UserSettingsMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import static com.gmail.merikbest2015.constants.PathConstants.*;

@RestController
@RequiredArgsConstructor
@RequestMapping(UI_V1_USER_SETTINGS_UPDATE)
public class UserSettingsController {

    private final UserSettingsMapper userSettingsMapper;

    @PutMapping(USERNAME)
    public ResponseEntity<String> updateUsername(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updateUsername(request));
    }

    @PutMapping(EMAIL)
    public ResponseEntity<AuthenticationResponse> updateEmail(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updateEmail(request));
    }

    @PutMapping(PHONE)
    public ResponseEntity<UserPhoneResponse> updatePhone(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updatePhone(request));
    }

    @PutMapping(COUNTRY)
    public ResponseEntity<String> updateCountry(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updateCountry(request));
    }

    @PutMapping(GENDER)
    public ResponseEntity<String> updateGender(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updateGender(request));
    }

    @PutMapping(LANGUAGE)
    public ResponseEntity<String> updateLanguage(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updateLanguage(request));
    }

    @PutMapping(DIRECT)
    public ResponseEntity<Boolean> updateDirectMessageRequests(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updateDirectMessageRequests(request));
    }

    @PutMapping(PRIVATE)
    public ResponseEntity<Boolean> updatePrivateProfile(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updatePrivateProfile(request));
    }

    @PutMapping(COLOR_SCHEME)
    public ResponseEntity<ColorSchemeType> updateColorScheme(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updateColorScheme(request));
    }

    @PutMapping(BACKGROUND_COLOR)
    public ResponseEntity<BackgroundColorType> updateBackgroundColor(@RequestBody SettingsRequest request) {
        return ResponseEntity.ok(userSettingsMapper.updateBackgroundColor(request));
    }
}
`
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "dto": {
                                "directory": {
                                  "request": {
                                    "directory": {
                                      "AuthenticationRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.Data;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Data
public class AuthenticationRequest {

    @Email(regexp = ".+@.+\\\\..+", message = EMAIL_NOT_VALID)
    private String email;

    @NotBlank(message = EMPTY_PASSWORD)
    @Size(min = 8, message = SHORT_PASSWORD)
    private String password;
}
`
                                        }
                                      },
                                      "CurrentPasswordResetRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.Data;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Data
public class CurrentPasswordResetRequest {
    
    @NotBlank(message = EMPTY_CURRENT_PASSWORD)
    private String currentPassword;
    
    @NotBlank(message = EMPTY_PASSWORD)
    @Size(min = 8, message = SHORT_PASSWORD)
    private String password;
    
    @NotBlank(message = EMPTY_PASSWORD_CONFIRMATION)
    @Size(min = 8, message = SHORT_PASSWORD)
    private String password2;
}
`
                                        }
                                      },
                                      "EndRegistrationRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.Data;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Data
public class EndRegistrationRequest {
    
    @Email(regexp = ".+@.+\\\\..+", message = EMAIL_NOT_VALID)
    private String email;

    @NotBlank(message = EMPTY_PASSWORD_CONFIRMATION)
    @Size(min = 8, message = SHORT_PASSWORD)
    private String password;
}
`
                                        }
                                      },
                                      "PasswordResetRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.Data;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Data
public class PasswordResetRequest {

    @Email(regexp = ".+@.+\\\\..+", message = EMAIL_NOT_VALID)
    private String email;

    @NotBlank(message = EMPTY_PASSWORD)
    @Size(min = 8, message = SHORT_PASSWORD)
    private String password;

    @NotBlank(message = EMPTY_PASSWORD)
    @Size(min = 8, message = SHORT_PASSWORD)
    private String password2;
}
`
                                        }
                                      },
                                      "ProcessEmailRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.Data;

import javax.validation.constraints.Email;

import static com.gmail.merikbest2015.constants.ErrorMessage.EMAIL_NOT_VALID;

@Data
public class ProcessEmailRequest {
    @Email(regexp = ".+@.+\\\\..+", message = EMAIL_NOT_VALID)
    private String email;
}
`
                                        }
                                      },
                                      "RegistrationRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.Data;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Data
public class RegistrationRequest {

    @Email(regexp = ".+@.+\\\\..+", message = EMAIL_NOT_VALID)
    private String email;

    @NotBlank(message = BLANK_NAME)
    @Size(min = 1, max = 50, message = NAME_NOT_VALID)
    private String username;

    private String birthday;
}
`
                                        }
                                      },
                                      "SettingsRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import lombok.Data;

@Data
public class SettingsRequest {
    private String username;
    private String email;
    private String countryCode;
    private Long phone;
    private String country;
    private String gender;
    private String language;
    private boolean mutedDirectMessages;
    private boolean privateProfile;
    private BackgroundColorType backgroundColor;
    private ColorSchemeType colorScheme;
}
`
                                        }
                                      },
                                      "UserRequest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.request;

import lombok.Data;

@Data
public class UserRequest {
    private String fullName;
    private String about;
    private String location;
    private String website;
    private String avatar;
    private String wallpaper;
}
`
                                        }
                                      }
                                    }
                                  },
                                  "response": {
                                    "directory": {
                                      "AuthenticationResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import lombok.Data;

@Data
public class AuthenticationResponse {
    private AuthUserResponse user;
    private String token;
}
`
                                        }
                                      },
                                      "AuthUserResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class AuthUserResponse {
    private Long id;
    private String email;
    private String fullName;
    private String username;
    private String location;
    private String about;
    private String website;
    private String countryCode;
    private Long phone;
    private String country;
    private String gender;
    private String language;
    private String birthday;
    private LocalDateTime registrationDate;
    private Long tweetCount;
    private Long mediaTweetCount;
    private Long likeCount;
    private Long notificationsCount;
    private boolean active;
    private boolean profileCustomized;
    private boolean profileStarted;
    @JsonProperty("isMutedDirectMessages")
    private boolean mutedDirectMessages;
    @JsonProperty("isPrivateProfile")
    private boolean privateProfile;
    private BackgroundColorType backgroundColor;
    private ColorSchemeType colorScheme;
    private String avatar;
    private String wallpaper;
    private Long pinnedTweetId;
    private Long followersSize;
    private Long followingSize;
    private Long followerRequestsSize;
    private Long unreadMessagesCount;
}
`
                                        }
                                      },
                                      "BlockedUserResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class BlockedUserResponse {
    private Long id;
    private String fullName;
    private String username;
    private String about;
    private String avatar;

    @JsonProperty("isPrivateProfile")
    private boolean isPrivateProfile;

    @JsonProperty("isUserBlocked")
    private boolean isUserBlocked;
}
`
                                        }
                                      },
                                      "FollowerUserResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import lombok.Data;

@Data
public class FollowerUserResponse {
    private Long id;
    private String fullName;
    private String username;
    private String about;
    private String avatar;
}
`
                                        }
                                      },
                                      "MutedUserResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class MutedUserResponse {
    private Long id;
    private String fullName;
    private String username;
    private String about;
    private String avatar;

    @JsonProperty("isPrivateProfile")
    private boolean isPrivateProfile;

    @JsonProperty("isUserMuted")
    private boolean isUserMuted;
}
`
                                        }
                                      },
                                      "NotificationInfoResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import com.gmail.merikbest2015.dto.response.tweet.TweetResponse;
import com.gmail.merikbest2015.dto.response.user.UserResponse;
import com.gmail.merikbest2015.enums.NotificationType;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class NotificationInfoResponse {
    private Long id;
    private LocalDateTime date;
    private NotificationType notificationType;
    private UserResponse user;
    private TweetResponse tweet;
}
`
                                        }
                                      },
                                      "SameFollowerResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import lombok.Data;

@Data
public class SameFollowerResponse {
    private Long id;
    private String fullName;
    private String username;
    private String avatar;
}
`
                                        }
                                      },
                                      "SearchResultResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import com.gmail.merikbest2015.dto.response.lists.CommonUserResponse;
import lombok.Data;

import java.util.List;

@Data
public class SearchResultResponse {
    private Long tweetCount;
    private List<String> tags;
    private List<CommonUserResponse> users;
}
`
                                        }
                                      },
                                      "UserDetailResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

import java.util.List;

@Data
public class UserDetailResponse {
    private Long id;
    private String fullName;
    private String username;
    private String about;
    private String avatar;
    private Long followersSize;
    private Long followingSize;
    private List<SameFollowerResponse> sameFollowers;

    @JsonProperty("isPrivateProfile")
    private boolean isPrivateProfile;

    @JsonProperty("isUserBlocked")
    private boolean isUserBlocked;

    @JsonProperty("isMyProfileBlocked")
    private boolean isMyProfileBlocked;

    @JsonProperty("isWaitingForApprove")
    private boolean isWaitingForApprove;

    @JsonProperty("isFollower")
    private boolean isFollower;
}
`
                                        }
                                      },
                                      "UserPhoneResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class UserPhoneResponse {
    private String countryCode;
    private Long phone;
}
`
                                        }
                                      },
                                      "UserProfileResponse.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.dto.response;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
public class UserProfileResponse {
    private Long id;
    private String fullName;
    private String username;
    private String location;
    private String about;
    private String website;
    private String country;
    private String birthday;
    private LocalDateTime registrationDate;
    private Long tweetCount;
    private Long mediaTweetCount;
    private Long likeCount;
    private Long notificationsCount;
    private String avatar;
    private String wallpaper;
    private Long pinnedTweetId;
    private Long followersSize;
    private Long followingSize;
    private List<SameFollowerResponse> sameFollowers;

    @JsonProperty("isMutedDirectMessages")
    private boolean mutedDirectMessages;

    @JsonProperty("isPrivateProfile")
    private boolean privateProfile;

    @JsonProperty("isUserMuted")
    private boolean isUserMuted;

    @JsonProperty("isUserBlocked")
    private boolean isUserBlocked;

    @JsonProperty("isMyProfileBlocked")
    private boolean isMyProfileBlocked;

    @JsonProperty("isWaitingForApprove")
    private boolean isWaitingForApprove;

    @JsonProperty("isFollower")
    private boolean isFollower;

    @JsonProperty("isSubscriber")
    private boolean isSubscriber;
}
`
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "exception": {
                                "directory": {
                                  "InputFieldException.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.exception;

import lombok.AllArgsConstructor;
import lombok.Getter;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindingResult;

import java.util.HashMap;
import java.util.Map;

@Getter
@AllArgsConstructor
public class InputFieldException extends RuntimeException {
    private final HttpStatus status;
    private final Map<String, String> errorsMap;
    private BindingResult bindingResult;

    public InputFieldException(BindingResult bindingResult) {
        this.status = HttpStatus.BAD_REQUEST;
        this.errorsMap = handleErrors(bindingResult);
        this.bindingResult = bindingResult;
    }

    public InputFieldException(HttpStatus status, Map<String, String> errorsMap) {
        this.status = status;
        this.errorsMap = errorsMap;
    }
    
    private Map<String, String> handleErrors(BindingResult bindingResult) {
        Map<String, String> errors = new HashMap<>();
        bindingResult.getFieldErrors().forEach(fieldError -> errors.put(fieldError.getField(), fieldError.getDefaultMessage()));
        return errors;
    }
}
`
                                    }
                                  },
                                  "InputFieldExceptionHandler.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.exception;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.util.Map;

@ControllerAdvice
public class InputFieldExceptionHandler {

    @ExceptionHandler(InputFieldException.class)
    public ResponseEntity<Map<String, String>> handleInputFieldException(InputFieldException exception) {
        InputFieldException inputFieldException;
        
        if (exception.getBindingResult() != null) {
            inputFieldException = new InputFieldException(exception.getBindingResult());
        } else {
            inputFieldException = new InputFieldException(exception.getStatus(), exception.getErrorsMap());
        }
        return ResponseEntity.status(inputFieldException.getStatus()).body(inputFieldException.getErrorsMap());
    }
}
`
                                    }
                                  }
                                }
                              },
                              "feign": {
                                "directory": {
                                  "NotificationClient.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.feign;

import com.gmail.merikbest2015.configuration.FeignConfiguration;
import com.gmail.merikbest2015.dto.request.NotificationRequest;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import static com.gmail.merikbest2015.constants.FeignConstants.NOTIFICATION_SERVICE;
import static com.gmail.merikbest2015.constants.PathConstants.API_V1_NOTIFICATION;
import static com.gmail.merikbest2015.constants.PathConstants.USER;

@CircuitBreaker(name = NOTIFICATION_SERVICE)
@FeignClient(value = NOTIFICATION_SERVICE, path = API_V1_NOTIFICATION, configuration = FeignConfiguration.class)
public interface NotificationClient {

    @PostMapping(USER)
    void sendUserNotification(@RequestBody NotificationRequest request);
}
`
                                    }
                                  },
                                  "TagClient.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.feign;

import com.gmail.merikbest2015.configuration.FeignConfiguration;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.ArrayList;
import java.util.List;

import static com.gmail.merikbest2015.constants.FeignConstants.TAG_SERVICE;
import static com.gmail.merikbest2015.constants.PathConstants.API_V1_TAGS;
import static com.gmail.merikbest2015.constants.PathConstants.SEARCH_TEXT;

@FeignClient(value = TAG_SERVICE, path = API_V1_TAGS, configuration = FeignConfiguration.class)
public interface TagClient {

    @CircuitBreaker(name = TAG_SERVICE, fallbackMethod = "defaultEmptyArray")
    @GetMapping(SEARCH_TEXT)
    List<String> getTagsByText(@PathVariable("text") String text);

    default ArrayList<String> defaultEmptyArray(Throwable throwable) {
        return new ArrayList<>();
    }
}
`
                                    }
                                  },
                                  "TweetClient.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.feign;

import com.gmail.merikbest2015.configuration.FeignConfiguration;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import static com.gmail.merikbest2015.constants.FeignConstants.TWEET_SERVICE;
import static com.gmail.merikbest2015.constants.PathConstants.*;

@FeignClient(value = TWEET_SERVICE, path = API_V1_TWEETS, configuration = FeignConfiguration.class)
public interface TweetClient {

    @CircuitBreaker(name = TWEET_SERVICE)
    @GetMapping(ID_TWEET_ID)
    Boolean isTweetExists(@PathVariable("tweetId") Long tweetId);

    @CircuitBreaker(name = TWEET_SERVICE, fallbackMethod = "defaultTweetCount")
    @GetMapping(COUNT_TEXT)
    Long getTweetCountByText(@PathVariable("text") String text);

    default Long defaultTweetCount(Throwable throwable) {
        return 0L;
    }
}
`
                                    }
                                  }
                                }
                              },
                              "mapper": {
                                "directory": {
                                  "AuthenticationMapper.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.mapper;

import com.gmail.merikbest2015.dto.request.*;
import com.gmail.merikbest2015.dto.response.AuthUserResponse;
import com.gmail.merikbest2015.dto.response.AuthenticationResponse;
import com.gmail.merikbest2015.repository.projection.AuthUserProjection;
import com.gmail.merikbest2015.service.AuthenticationService;
import lombok.RequiredArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Component;
import org.springframework.validation.BindingResult;

import java.util.Map;

@Component
@RequiredArgsConstructor
public class AuthenticationMapper {

    private final ModelMapper modelMapper;
    private final AuthenticationService authenticationService;

    public AuthenticationResponse login(AuthenticationRequest request, BindingResult bindingResult) {
        return getAuthenticationResponse(authenticationService.login(request, bindingResult));
    }

    public AuthenticationResponse getUserByToken() {
        return getAuthenticationResponse(authenticationService.getUserByToken());
    }

    public String getExistingEmail(String email, BindingResult bindingResult) {
        return authenticationService.getExistingEmail(email, bindingResult);
    }

    public String sendPasswordResetCode(String email, BindingResult bindingResult) {
        return authenticationService.sendPasswordResetCode(email, bindingResult);
    }

    public AuthUserResponse getUserByPasswordResetCode(String code) {
        AuthUserProjection user = authenticationService.getUserByPasswordResetCode(code);
        return modelMapper.map(user, AuthUserResponse.class);
    }

    public String passwordReset(PasswordResetRequest request, BindingResult bindingResult) {
        return authenticationService.passwordReset(request.getEmail(), request.getPassword(), request.getPassword2(), bindingResult);
    }

    public String currentPasswordReset(CurrentPasswordResetRequest request, BindingResult bindingResult) {
        return authenticationService.currentPasswordReset(request.getCurrentPassword(), request.getPassword(),
                request.getPassword2(), bindingResult);
    }

    AuthenticationResponse getAuthenticationResponse(Map<String, Object> credentials) {
        AuthenticationResponse response = new AuthenticationResponse();
        response.setUser(modelMapper.map(credentials.get("user"), AuthUserResponse.class));
        response.setToken((String) credentials.get("token"));
        return response;
    }
}
`
                                    }
                                  },
                                  "BlockUserMapper.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.mapper;

import com.gmail.merikbest2015.dto.HeaderResponse;
import com.gmail.merikbest2015.dto.response.BlockedUserResponse;
import com.gmail.merikbest2015.repository.projection.BlockedUserProjection;
import com.gmail.merikbest2015.service.BlockUserService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class BlockUserMapper {

    private final BasicMapper basicMapper;
    private final BlockUserService blockUserService;

    public HeaderResponse<BlockedUserResponse> getBlockList(Pageable pageable) {
        Page<BlockedUserProjection> blockList = blockUserService.getBlockList(pageable);
        return basicMapper.getHeaderResponse(blockList, BlockedUserResponse.class);
    }

    public Boolean processBlockList(Long userId) {
        return blockUserService.processBlockList(userId);
    }
}
`
                                    }
                                  },
                                  "FollowerUserMapper.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.mapper;

import com.gmail.merikbest2015.dto.HeaderResponse;
import com.gmail.merikbest2015.dto.response.user.UserResponse;
import com.gmail.merikbest2015.dto.response.FollowerUserResponse;
import com.gmail.merikbest2015.dto.response.UserProfileResponse;
import com.gmail.merikbest2015.repository.projection.BaseUserProjection;
import com.gmail.merikbest2015.repository.projection.FollowerUserProjection;
import com.gmail.merikbest2015.repository.projection.UserProfileProjection;
import com.gmail.merikbest2015.repository.projection.UserProjection;
import com.gmail.merikbest2015.service.FollowerUserService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@RequiredArgsConstructor
public class FollowerUserMapper {

    private final BasicMapper basicMapper;
    private final FollowerUserService followerUserService;

    public HeaderResponse<UserResponse> getFollowers(Long userId, Pageable pageable) {
        Page<UserProjection> users = followerUserService.getFollowers(userId, pageable);
        return basicMapper.getHeaderResponse(users, UserResponse.class);
    }

    public HeaderResponse<UserResponse> getFollowing(Long userId, Pageable pageable) {
        Page<UserProjection> users = followerUserService.getFollowing(userId, pageable);
        return basicMapper.getHeaderResponse(users, UserResponse.class);
    }

    public HeaderResponse<FollowerUserResponse> getFollowerRequests(Pageable pageable) {
        Page<FollowerUserProjection> followers = followerUserService.getFollowerRequests(pageable);
        return basicMapper.getHeaderResponse(followers, FollowerUserResponse.class);
    }

    public Boolean processFollow(Long userId) {
        return followerUserService.processFollow(userId);
    }

    public List<UserResponse> overallFollowers(Long userId) {
        List<BaseUserProjection> users = followerUserService.overallFollowers(userId);
        return basicMapper.convertToResponseList(users, UserResponse.class);
    }

    public UserProfileResponse processFollowRequestToPrivateProfile(Long userId) {
        UserProfileProjection user = followerUserService.processFollowRequestToPrivateProfile(userId);
        return basicMapper.convertToResponse(user, UserProfileResponse.class);
    }

    public String acceptFollowRequest(Long userId) {
        return followerUserService.acceptFollowRequest(userId);
    }

    public String declineFollowRequest(Long userId) {
        return followerUserService.declineFollowRequest(userId);
    }
}
`
                                    }
                                  },
                                  "MuteUserMapper.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.mapper;

import com.gmail.merikbest2015.dto.HeaderResponse;
import com.gmail.merikbest2015.dto.response.MutedUserResponse;
import com.gmail.merikbest2015.repository.projection.MutedUserProjection;
import com.gmail.merikbest2015.service.MuteUserService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class MuteUserMapper {

    private final BasicMapper basicMapper;
    private final MuteUserService muteUserService;

    public HeaderResponse<MutedUserResponse> getMutedList(Pageable pageable) {
        Page<MutedUserProjection> mutedList = muteUserService.getMutedList(pageable);
        return basicMapper.getHeaderResponse(mutedList, MutedUserResponse.class);
    }

    public Boolean processMutedList(Long userId) {
        return muteUserService.processMutedList(userId);
    }
}
`
                                    }
                                  },
                                  "RegistrationMapper.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.mapper;

import com.gmail.merikbest2015.dto.request.EndRegistrationRequest;
import com.gmail.merikbest2015.dto.request.RegistrationRequest;
import com.gmail.merikbest2015.dto.response.AuthenticationResponse;
import com.gmail.merikbest2015.service.RegistrationService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.validation.BindingResult;

@Component
@RequiredArgsConstructor
public class RegistrationMapper {

    private final RegistrationService registrationService;
    private final AuthenticationMapper authenticationMapper;

    public String registration(RegistrationRequest request, BindingResult bindingResult) {
        return registrationService.registration(request, bindingResult);
    }

    public String sendRegistrationCode(String email, BindingResult bindingResult) {
        return registrationService.sendRegistrationCode(email, bindingResult);
    }

    public String checkRegistrationCode(String code) {
        return registrationService.checkRegistrationCode(code);
    }

    public AuthenticationResponse endRegistration(EndRegistrationRequest request, BindingResult bindingResult) {
        return authenticationMapper.getAuthenticationResponse(
                registrationService.endRegistration(request.getEmail(), request.getPassword(), bindingResult));
    }
}
`
                                    }
                                  },
                                  "UserMapper.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.mapper;

import com.gmail.merikbest2015.dto.HeaderResponse;
import com.gmail.merikbest2015.dto.response.lists.CommonUserResponse;
import com.gmail.merikbest2015.dto.response.user.UserResponse;
import com.gmail.merikbest2015.dto.request.UserRequest;
import com.gmail.merikbest2015.dto.response.*;
import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.projection.*;
import com.gmail.merikbest2015.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

import java.util.Collections;
import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
public class UserMapper {

    private final BasicMapper basicMapper;
    private final UserService userService;

    public UserProfileResponse getUserById(Long userId) {
        UserProfileProjection user = userService.getUserById(userId);
        return basicMapper.convertToResponse(user, UserProfileResponse.class);
    }

    public HeaderResponse<UserResponse> getUsers(Pageable pageable) {
        Page<UserProjection> users = userService.getUsers(pageable);
        return basicMapper.getHeaderResponse(users, UserResponse.class);
    }

    public List<UserResponse> getRelevantUsers() {
        List<UserProjection> users = userService.getRelevantUsers();
        return basicMapper.convertToResponseList(users, UserResponse.class);
    }

    public HeaderResponse<UserResponse> searchUsersByUsername(String username, Pageable pageable) {
        Page<UserProjection> users = userService.searchUsersByUsername(username, pageable, UserProjection.class);
        return basicMapper.getHeaderResponse(users, UserResponse.class);
    }

    public SearchResultResponse searchByText(String text) {
        Map<String, Object> searchResult = userService.searchByText(text);
        SearchResultResponse searchResultResponse = new SearchResultResponse();
        searchResultResponse.setTweetCount((Long) searchResult.get("tweetCount"));
        searchResultResponse.setTags((List<String>) searchResult.get("tags"));
        List<CommonUserResponse> users = basicMapper.convertToResponseList(
                (List<CommonUserProjection>) searchResult.get("users"), CommonUserResponse.class);
        searchResultResponse.setUsers(users);
        return searchResultResponse;
    }

    public Boolean startUseTwitter() {
        return userService.startUseTwitter();
    }

    public AuthUserResponse updateUserProfile(UserRequest userRequest) {
        User user = basicMapper.convertToResponse(userRequest, User.class);
        AuthUserProjection authUserProjection = userService.updateUserProfile(user);
        return basicMapper.convertToResponse(authUserProjection, AuthUserResponse.class);
    }

    public Boolean processSubscribeToNotifications(Long userId) {
        return userService.processSubscribeToNotifications(userId);
    }

    public Long processPinTweet(Long tweetId) {
        return userService.processPinTweet(tweetId);
    }

    public UserDetailResponse getUserDetails(Long userId) {
        UserDetailProjection userDetails = userService.getUserDetails(userId);
        return basicMapper.convertToResponse(userDetails, UserDetailResponse.class);
    }
}
`
                                    }
                                  },
                                  "UserSettingsMapper.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.mapper;

import com.gmail.merikbest2015.dto.request.SettingsRequest;
import com.gmail.merikbest2015.dto.response.AuthenticationResponse;
import com.gmail.merikbest2015.dto.response.UserPhoneResponse;
import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import com.gmail.merikbest2015.service.UserSettingsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.Map;

@Component
@RequiredArgsConstructor
public class UserSettingsMapper {

    private final AuthenticationMapper authenticationMapper;
    private final UserSettingsService userSettingsService;

    public String updateUsername(SettingsRequest request) {
        return userSettingsService.updateUsername(request.getUsername());
    }

    public AuthenticationResponse updateEmail(SettingsRequest request) {
        Map<String, Object> stringObjectMap = userSettingsService.updateEmail(request.getEmail());
        AuthenticationResponse authenticationResponse = authenticationMapper.getAuthenticationResponse(stringObjectMap);
        authenticationResponse.getUser().setEmail(request.getEmail());
        return authenticationResponse;
    }

    public UserPhoneResponse updatePhone(SettingsRequest request) {
        Map<String, Object> phoneParams = userSettingsService.updatePhone(request.getCountryCode(), request.getPhone());
        return new UserPhoneResponse((String) phoneParams.get("countryCode"), (Long) phoneParams.get("phone"));
    }

    public String updateCountry(SettingsRequest request) {
        return userSettingsService.updateCountry(request.getCountry());
    }

    public String updateGender(SettingsRequest request) {
        return userSettingsService.updateGender(request.getGender());
    }

    public String updateLanguage(SettingsRequest request) {
        return userSettingsService.updateLanguage(request.getLanguage());
    }

    public boolean updateDirectMessageRequests(SettingsRequest request) {
        return userSettingsService.updateDirectMessageRequests(request.isMutedDirectMessages());
    }

    public boolean updatePrivateProfile(SettingsRequest request) {
        return userSettingsService.updatePrivateProfile(request.isPrivateProfile());
    }

    public ColorSchemeType updateColorScheme(SettingsRequest request) {
        return userSettingsService.updateColorScheme(request.getColorScheme());
    }

    public BackgroundColorType updateBackgroundColor(SettingsRequest request) {
        return userSettingsService.updateBackgroundColor(request.getBackgroundColor());
    }
}
`
                                    }
                                  }
                                }
                              },
                              "model": {
                                "directory": {
                                  "User.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.model;

import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@EqualsAndHashCode(of = {"id", "email"})
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "users_seq")
    @SequenceGenerator(name = "users_seq", sequenceName = "users_seq", initialValue = 100, allocationSize = 1)
    private Long id;

    @Column(name = "email", unique = true, nullable = false)
    private String email;

    @Column(name = "password", nullable = false)
    private String password;

    @Column(name = "full_name", nullable = false)
    private String fullName;

    @Column(name = "username", nullable = false)
    private String username;

    @Column(name = "location")
    private String location;

    @Column(name = "about")
    private String about;

    @Column(name = "website")
    private String website;

    @Column(name = "country_code")
    private String countryCode;

    @Column(name = "phone")
    private Long phone;

    @Column(name = "country")
    private String country;

    @Column(name = "gender")
    private String gender;

    @Column(name = "language")
    private String language;

    @Column(name = "birthday")
    private String birthday;

    @Column(name = "registration_date", columnDefinition = "timestamp default current_timestamp")
    private LocalDateTime registrationDate = LocalDateTime.now();

    @Column(name = "activation_code")
    private String activationCode;

    @Column(name = "password_reset_code")
    private String passwordResetCode;

    @Column(name = "role", columnDefinition = "varchar(255) default 'USER'")
    private String role = "USER";

    @Column(name = "tweet_count", columnDefinition = "int8 default 0")
    private Long tweetCount = 0L;

    @Column(name = "media_tweet_count", columnDefinition = "int8 default 0")
    private Long mediaTweetCount = 0L;

    @Column(name = "like_count", columnDefinition = "int8 default 0")
    private Long likeCount = 0L;

    @Column(name = "notifications_count", columnDefinition = "int8 default 0")
    private Long notificationsCount = 0L;

    @Column(name = "active", columnDefinition = "boolean default false")
    private boolean active = false;

    @Column(name = "profile_customized", columnDefinition = "boolean default false")
    private boolean profileCustomized = false;

    @Column(name = "profile_started", columnDefinition = "boolean default false")
    private boolean profileStarted = false;

    @Column(name = "muted_direct_messages", columnDefinition = "boolean default false")
    private boolean mutedDirectMessages = false;

    @Column(name = "private_profile", columnDefinition = "boolean default false")
    private boolean privateProfile = false;

    @Column(name = "background_color", columnDefinition = "varchar(255) default 'DEFAULT'")
    @Enumerated(EnumType.STRING)
    private BackgroundColorType backgroundColor= BackgroundColorType.DEFAULT;

    @Column(name = "color_scheme", columnDefinition = "varchar(255) default 'BLUE'")
    @Enumerated(EnumType.STRING)
    private ColorSchemeType colorScheme = ColorSchemeType.BLUE;

    @Column(name = "pinned_tweet_id")
    private Long pinnedTweetId;

    @Column(name = "avatar")
    private String avatar;

    @Column(name = "wallpaper")
    private String wallpaper;

    @Column(name = "unread_messages_count", columnDefinition = "int8 default 0")
    private Long unreadMessagesCount = 0L;

    @ManyToMany
    @JoinTable(name = "user_muted",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "muted_user_id"))
    private List<User> userMutedList;

    @ManyToMany
    @JoinTable(name = "user_blocked",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "blocked_user_id"))
    private List<User> userBlockedList;

    @ManyToMany
    @JoinTable(name = "user_subscriptions",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "subscriber_id"))
    private List<User> followers;

    @ManyToMany
    @JoinTable(name = "user_subscriptions",
            joinColumns = @JoinColumn(name = "subscriber_id"),
            inverseJoinColumns = @JoinColumn(name = "user_id"))
    private List<User> following;

    @ManyToMany
    @JoinTable(name = "user_follower_requests",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "follower_id"))
    private List<User> followerRequests;

    @ManyToMany
    @JoinTable(name = "subscribers",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "subscriber_id"))
    private List<User> subscribers = new ArrayList<>();
}
`
                                    }
                                  }
                                }
                              },
                              "repository": {
                                "directory": {
                                  "BlockUserRepository.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.repository;

import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.projection.BlockedUserProjection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface BlockUserRepository extends JpaRepository<User, Long> {

    @Query(value = "SELECT *, users.full_name as fullName, users.private_profile as privateProfile FROM users " +
            "LEFT JOIN user_blocked ON user_blocked.blocked_user_id = users.id " +
            "WHERE user_blocked.user_id = :userId", nativeQuery = true)
    Page<BlockedUserProjection> getUserBlockListById(@Param("userId") Long userId, Pageable pageable);

    @Query("SELECT CASE WHEN count(blockedUser) > 0 THEN true ELSE false END FROM User user " +
            "LEFT JOIN user.userBlockedList blockedUser " +
            "WHERE user.id = :userId " +
            "AND blockedUser.id = :blockedUserId")
    boolean isUserBlocked(@Param("userId") Long userId, @Param("blockedUserId") Long blockedUserId);

    @Modifying
    @Query(value = "INSERT INTO user_blocked (user_id, blocked_user_id) VALUES (?1, ?2)", nativeQuery = true)
    void blockUser(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Modifying
    @Query(value = "DELETE FROM user_blocked WHERE user_id = ?1 AND blocked_user_id = ?2", nativeQuery = true)
    void unblockUser(@Param("authUserId") Long authUserId, @Param("userId") Long userId);
}
`
                                    }
                                  },
                                  "FollowerUserRepository.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.repository;

import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.projection.FollowerUserProjection;
import com.gmail.merikbest2015.repository.projection.UserProjection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface FollowerUserRepository extends JpaRepository<User, Long> {

    @Query("SELECT user FROM User user " +
            "LEFT JOIN user.following following " +
            "WHERE following.id = :userId")
    Page<UserProjection> getFollowersById(@Param("userId") Long userId, Pageable pageable);

    @Query("SELECT user FROM User user " +
            "LEFT JOIN user.followers follower " +
            "WHERE follower.id = :userId")
    Page<UserProjection> getFollowingById(@Param("userId") Long userId, Pageable pageable);

    @Query(value = "SELECT *, users.full_name as fullName FROM users " +
            "LEFT JOIN user_follower_requests ufr ON users.id = ufr.follower_id " +
            "WHERE ufr.user_id = :userId", nativeQuery = true)
    Page<FollowerUserProjection> getFollowerRequests(@Param("userId") Long userId, Pageable pageable);

    @Query("SELECT follower.id FROM User user LEFT JOIN user.followers follower WHERE user.id = :userId")
    List<Long> getUserFollowersIds(@Param("userId") Long userId);

    @Query("SELECT CASE WHEN count(follower) > 0 THEN true ELSE false END " +
            "FROM User user " +
            "LEFT JOIN user.followers follower " +
            "WHERE user.id = :authUserId " +
            "AND follower.id = :userId")
    boolean isUserFollowByOtherUser(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Query("SELECT CASE WHEN count(user) > 0 THEN true ELSE false END FROM User user " +
            "LEFT JOIN user.followers follower " +
            "WHERE follower.id = :userId " +
            "AND user.id = :authUserId")
    boolean isFollower(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Modifying
    @Query(value = "INSERT INTO user_subscriptions (user_id, subscriber_id) VALUES (?1, ?2)", nativeQuery = true)
    void follow(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Modifying
    @Query(value = "DELETE FROM user_subscriptions WHERE user_id = ?1 AND subscriber_id = ?2", nativeQuery = true)
    void unfollow(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Modifying
    @Query(value = "INSERT INTO user_follower_requests (follower_id, user_id) " +
            "SELECT * FROM (SELECT ?1, ?2) AS tmp " +
            "WHERE NOT EXISTS ( " +
            "   SELECT follower_id FROM user_follower_requests WHERE follower_id = ?1 " +
            ") LIMIT 1", nativeQuery = true)
    void addFollowerRequest(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Modifying
    @Query(value = "DELETE FROM user_follower_requests WHERE follower_id = ?1 AND user_id = ?2", nativeQuery = true)
    void removeFollowerRequest(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Query(value = "SELECT users.id as id, users.full_name as fullName, users.username as username, users.about as about, " +
            "users.private_profile as isPrivateProfile, users.avatar as avatar " +
            "FROM users " +
            "WHERE users.id IN ( " +
            "   SELECT user_subscriptions.subscriber_id FROM users " +
            "   JOIN user_subscriptions ON users.id = user_subscriptions.user_id " +
            "   WHERE users.id = ?1) " +
            "INTERSECT " +
            "SELECT users.id as id, users.full_name as fullName, users.username as username, users.about as about, " +
            "users.private_profile as isPrivateProfile, users.avatar as avatar " +
            "FROM users " +
            "WHERE users.id IN ( " +
            "   SELECT user_subscriptions.subscriber_id FROM users " +
            "   JOIN user_subscriptions ON users.id = user_subscriptions.user_id " +
            "   WHERE users.id = ?2)", nativeQuery = true)
    <T> List<T> getSameFollowers(@Param("userId") Long userId, @Param("authUserId") Long authUserId, Class<T> type);

    @Query("SELECT CASE WHEN count(user) > 0 THEN true ELSE false END FROM User user " +
            "LEFT JOIN user.followerRequests followerRequest " +
            "WHERE user.id = :userId " +
            "AND followerRequest.id = :authUserId")
    boolean isFollowerRequest(@Param("userId") Long userId, @Param("authUserId") Long authUserId);
}
`
                                    }
                                  },
                                  "MuteUserRepository.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.repository;

import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.projection.MutedUserProjection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface MuteUserRepository extends JpaRepository<User, Long> {

    @Query(value = "SELECT *, users.full_name as fullName, users.private_profile as privateProfile FROM users " +
            "LEFT JOIN user_muted ON user_muted.muted_user_id = users.id " +
            "WHERE user_muted.user_id = :userId", nativeQuery = true)
    Page<MutedUserProjection> getUserMuteListById(@Param("userId") Long userId, Pageable pageable);

    @Query("SELECT CASE WHEN count(userMuted) > 0 THEN true ELSE false END FROM User user " +
            "LEFT JOIN user.userMutedList userMuted " +
            "WHERE user.id = :userId " +
            "AND userMuted.id = :mutedUserId")
    boolean isUserMuted(@Param("userId") Long userId, @Param("mutedUserId") Long mutedUserId);

    @Modifying
    @Query(value = "INSERT INTO user_muted (user_id, muted_user_id) VALUES (?1, ?2)", nativeQuery = true)
    void muteUser(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Modifying
    @Query(value = "DELETE FROM user_muted WHERE user_id = ?1 AND muted_user_id = ?2", nativeQuery = true)
    void unmuteUser(@Param("authUserId") Long authUserId, @Param("userId") Long userId);
}
`
                                    }
                                  },
                                  "projection": {
                                    "directory": {
                                      "AuthUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import org.springframework.beans.factory.annotation.Value;

import java.time.LocalDateTime;

public interface AuthUserProjection { // TODO refactor
    Long getId();
    String getEmail();
    String getFullName();
    String getUsername();
    String getLocation();
    String getAbout();
    String getWebsite();
    String getCountryCode();
    Long getPhone();
    String getCountry();
    String getGender();
    String getLanguage();
    String getBirthday();
    LocalDateTime getRegistrationDate();
    Long getTweetCount();
    Long getMediaTweetCount();
    Long getLikeCount();
    Long getNotificationsCount();
    boolean isActive();
    boolean isProfileCustomized();
    boolean isProfileStarted();
    boolean isMutedDirectMessages();
    boolean isPrivateProfile();
    BackgroundColorType getBackgroundColor();
    ColorSchemeType getColorScheme();
    String getAvatar();
    String getWallpaper();
    Long getPinnedTweetId();
    Long getUnreadMessagesCount();

    @Value("#{target.followers.size()}")
    Long getFollowersSize();

    @Value("#{target.following.size()}")
    Long getFollowingSize();

    @Value("#{target.followerRequests.size()}")
    Long getFollowerRequestsSize();
}
`
                                        }
                                      },
                                      "BaseUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface BaseUserProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAbout();
    String getAvatar();
    boolean getIsPrivateProfile();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();

    @Value("#{@userServiceHelper.isMyProfileBlockedByUser(target.id)}")
    boolean getIsMyProfileBlocked();

    @Value("#{@userServiceHelper.isMyProfileWaitingForApprove(target.id)}")
    boolean getIsWaitingForApprove();

    @Value("#{@userServiceHelper.isUserFollowByOtherUser(target.id)}")
    boolean getIsFollower();
}
`
                                        }
                                      },
                                      "BlockedUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface BlockedUserProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAbout();
    String getAvatar();
    boolean getPrivateProfile();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();
}
`
                                        }
                                      },
                                      "ChatTweetUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

public interface ChatTweetUserProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAvatar();
}
`
                                        }
                                      },
                                      "ChatUserParticipantProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface ChatUserParticipantProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAvatar();
    boolean isMutedDirectMessages();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();

    @Value("#{@userServiceHelper.isMyProfileBlockedByUser(target.id)}")
    boolean getIsMyProfileBlocked();
}
`
                                        }
                                      },
                                      "CommonUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

public interface CommonUserProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAvatar();
}
`
                                        }
                                      },
                                      "FollowerUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

public interface FollowerUserProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAbout();
    String getAvatar();
}
`
                                        }
                                      },
                                      "ListMemberProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface ListMemberProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAbout();
    String getAvatar();
    boolean getPrivateProfile();

    @Value("#{false}")
    boolean getMemberInList();
}
`
                                        }
                                      },
                                      "MutedUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface MutedUserProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAbout();
    String getAvatar();
    boolean getPrivateProfile();

    @Value("#{@userServiceHelper.isUserMutedByMyProfile(target.id)}")
    boolean getIsUserMuted();
}
`
                                        }
                                      },
                                      "NotificationUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

public interface NotificationUserProjection {
    Long getId();
    String getUsername();
    String getAvatar();
}
`
                                        }
                                      },
                                      "SameFollower.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

public interface SameFollower {
    Long getId();
    String getFullName();
    String getUsername();
    String getAvatar();
}
`
                                        }
                                      },
                                      "TweetAdditionalInfoUserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface TweetAdditionalInfoUserProjection {
    Long getId();
    String getFullName();
    String getUsername();

    @Value("#{@userServiceHelper.isUserMutedByMyProfile(target.id)}")
    boolean getIsUserMuted();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();

    @Value("#{@userServiceHelper.isMyProfileBlockedByUser(target.id)}")
    boolean getIsMyProfileBlocked();

    @Value("#{@userServiceHelper.isUserFollowByOtherUser(target.id)}")
    boolean getIsFollower();
}
`
                                        }
                                      },
                                      "TweetAuthorProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface TweetAuthorProjection {
    Long getId();
    String getEmail();
    String getFullName();
    String getUsername();
    String getAvatar();
    boolean getPrivateProfile();

    @Value("#{@userServiceHelper.isUserMutedByMyProfile(target.id)}")
    boolean getIsUserMuted();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();

    @Value("#{@userServiceHelper.isMyProfileBlockedByUser(target.id)}")
    boolean getIsMyProfileBlocked();

    @Value("#{@userServiceHelper.isMyProfileWaitingForApprove(target.id)}")
    boolean getIsWaitingForApprove();

    @Value("#{@userServiceHelper.isUserFollowByOtherUser(target.id)}")
    boolean getIsFollower();
}
`
                                        }
                                      },
                                      "UserChatProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface UserChatProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAbout();
    String getAvatar();
    boolean getPrivateProfile();
    boolean getMutedDirectMessages();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();

    @Value("#{@userServiceHelper.isMyProfileBlockedByUser(target.id)}")
    boolean getIsMyProfileBlocked();

    @Value("#{@userServiceHelper.isMyProfileWaitingForApprove(target.id)}")
    boolean getIsWaitingForApprove();

    @Value("#{@userServiceHelper.isUserFollowByOtherUser(target.id)}")
    boolean getIsFollower();

    @Value("#{false}")
    boolean getIsUserChatParticipant();
}
`
                                        }
                                      },
                                      "UserCommonProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

public interface UserCommonProjection {
    Long getId();
    String getEmail();
    String getFullName();
    String getActivationCode();
    String getPasswordResetCode();
}
`
                                        }
                                      },
                                      "UserDetailProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

import java.util.List;

public interface UserDetailProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAbout();
    String getAvatar();
    boolean getPrivateProfile();

    @Value("#{target.followers.size()}")
    Long getFollowersSize();

    @Value("#{target.following.size()}")
    Long getFollowingSize();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();

    @Value("#{@userServiceHelper.isMyProfileBlockedByUser(target.id)}")
    boolean getIsMyProfileBlocked();

    @Value("#{@userServiceHelper.isMyProfileWaitingForApprove(target.id)}")
    boolean getIsWaitingForApprove();

    @Value("#{@userServiceHelper.isUserFollowByOtherUser(target.id)}")
    boolean getIsFollower();

    @Value("#{@userServiceHelper.getSameFollowers(target.id)}")
    List<SameFollower> getSameFollowers();
}
`
                                        }
                                      },
                                      "UserPrincipalProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

public interface UserPrincipalProjection {
    Long getId();
    String getEmail();
    String getActivationCode();
}
`
                                        }
                                      },
                                      "UserProfileProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

import java.time.LocalDateTime;
import java.util.List;

public interface UserProfileProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getLocation();
    String getAbout();
    String getWebsite();
    String getCountry();
    String getBirthday();
    LocalDateTime getRegistrationDate();
    Long getTweetCount();
    Long getMediaTweetCount();
    Long getLikeCount();
    Long getNotificationsCount();
    boolean isMutedDirectMessages();
    boolean isPrivateProfile();
    String getAvatar();
    String getWallpaper();
    Long getPinnedTweetId();

    @Value("#{target.followers.size()}")
    Long getFollowersSize();

    @Value("#{target.following.size()}")
    Long getFollowingSize();

    @Value("#{@userServiceHelper.isUserMutedByMyProfile(target.id)}")
    boolean getIsUserMuted();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();

    @Value("#{@userServiceHelper.isMyProfileBlockedByUser(target.id)}")
    boolean getIsMyProfileBlocked();

    @Value("#{@userServiceHelper.isMyProfileWaitingForApprove(target.id)}")
    boolean getIsWaitingForApprove();

    @Value("#{@userServiceHelper.isUserFollowByOtherUser(target.id)}")
    boolean getIsFollower();

    @Value("#{@userServiceHelper.isMyProfileSubscribed(target.id)}")
    boolean getIsSubscriber();

    @Value("#{@userServiceHelper.getSameFollowers(target.id)}")
    List<SameFollower> getSameFollowers();
}
`
                                        }
                                      },
                                      "UserProjection.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.repository.projection;

import org.springframework.beans.factory.annotation.Value;

public interface UserProjection {
    Long getId();
    String getFullName();
    String getUsername();
    String getAbout();
    String getAvatar();
    boolean getPrivateProfile();
    boolean getMutedDirectMessages();

    @Value("#{@userServiceHelper.isUserBlockedByMyProfile(target.id)}")
    boolean getIsUserBlocked();

    @Value("#{@userServiceHelper.isMyProfileBlockedByUser(target.id)}")
    boolean getIsMyProfileBlocked();

    @Value("#{@userServiceHelper.isMyProfileWaitingForApprove(target.id)}")
    boolean getIsWaitingForApprove();

    @Value("#{@userServiceHelper.isUserFollowByOtherUser(target.id)}")
    boolean getIsFollower();
}
`
                                        }
                                      }
                                    }
                                  },
                                  "UserRepository.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.repository;

import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.projection.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    @Query("SELECT user FROM User user WHERE user.email = :email")
    <T> Optional<T> getUserByEmail(@Param("email") String email, Class<T> type);

    @Query("SELECT user FROM User user WHERE user.id = :userId")
    <T> Optional<T> getUserById(@Param("userId") Long userId, Class<T> type);

    @Query("SELECT user FROM User user WHERE user.activationCode = :code")
    Optional<UserCommonProjection> getCommonUserByActivationCode(@Param("code") String code);

    @Query("SELECT user FROM User user WHERE user.passwordResetCode = :code")
    Optional<AuthUserProjection> getByPasswordResetCode(@Param("code") String code);

    @Query("SELECT user.password FROM User user WHERE user.id = :userId")
    String getUserPasswordById(@Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.passwordResetCode = :passwordResetCode WHERE user.id = :userId")
    void updatePasswordResetCode(@Param("passwordResetCode") String passwordResetCode, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.password = :password WHERE user.id = :userId")
    void updatePassword(@Param("password") String password, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.active = true WHERE user.id = :userId")
    void updateActiveUserProfile(@Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.activationCode = :activationCode WHERE user.id = :userId")
    void updateActivationCode(@Param("activationCode") String activationCode, @Param("userId") Long userId);

    Page<UserProjection> findByActiveTrueAndIdNot(Long id, Pageable pageable);

    List<UserProjection> findTop5ByActiveTrue();

    @Query("SELECT user FROM User user " +
            "WHERE UPPER(user.fullName) LIKE UPPER(CONCAT('%',:username,'%')) AND user.active = true " +
            "OR UPPER(user.username) LIKE UPPER(CONCAT('%',:username,'%')) AND user.active = true")
    <T> Page<T> searchUsersByUsername(@Param("username") String name, Pageable pageable, Class<T> type);

    @Query("SELECT user FROM User user " +
            "LEFT JOIN user.following following " +
            "WHERE UPPER(user.fullName) LIKE UPPER(CONCAT('%',:text,'%')) AND user.active = true " +
            "OR UPPER(user.username) LIKE UPPER(CONCAT('%',:text,'%')) AND user.active = true " +
            "AND (user.privateProfile = false " +
            "   OR (user.privateProfile = true AND (following.id = :userId OR user.id = :userId)) " +
            "   AND user.active = true)")
    List<CommonUserProjection> searchUserByText(@Param("text") String text);

    @Modifying
    @Query("UPDATE User user SET user.profileStarted = true WHERE user.id = :userId")
    void updateProfileStarted(@Param("userId") Long userId);

    @Query("SELECT CASE WHEN count(user) > 0 THEN true ELSE false END FROM User user WHERE user.id = :userId")
    boolean isUserExist(@Param("userId") Long userId);

    @Query("SELECT user.privateProfile FROM User user WHERE user.id = :userId")
    boolean getUserPrivateProfile(@Param("userId") Long userId);

    @Query("SELECT CASE WHEN count(user) > 0 THEN true ELSE false END FROM User user " +
            "LEFT JOIN user.following following " +
            "WHERE user.id = :userId AND user.privateProfile = false " +
            "OR user.id = :userId AND user.privateProfile = true AND following.id = :authUserId")
    boolean isUserHavePrivateProfile(@Param("userId") Long userId, @Param("authUserId") Long authUserId);

    @Query("SELECT CASE WHEN count(followerRequest) > 0 THEN true ELSE false END FROM User user " +
            "LEFT JOIN user.followerRequests followerRequest " +
            "WHERE user.id = :userId " +
            "AND followerRequest.id = :authUserId")
    boolean isMyProfileWaitingForApprove(@Param("userId") Long userId, @Param("authUserId") Long authUserId);

    @Query("SELECT CASE WHEN count(subscriber) > 0 THEN true ELSE false END FROM User user " +
            "LEFT JOIN user.subscribers subscriber " +
            "WHERE user.id = :userId " +
            "AND subscriber.id = :subscriberUserId")
    boolean isMyProfileSubscribed(@Param("userId") Long userId, @Param("subscriberUserId") Long subscriberUserId);

    @Modifying
    @Query("UPDATE User user SET user.notificationsCount = user.notificationsCount + 1 WHERE user.id = :userId")
    void increaseNotificationsCount(@Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.likeCount = " +
            "CASE WHEN :increaseCount = true THEN (user.likeCount + 1) " +
            "ELSE (user.likeCount - 1) END " +
            "WHERE user.id = :userId")
    void updateLikeCount(@Param("increaseCount") boolean increaseCount, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.tweetCount = " +
            "CASE WHEN :increaseCount = true THEN (user.tweetCount + 1) " +
            "ELSE (user.tweetCount - 1) END " +
            "WHERE user.id = :userId")
    void updateTweetCount(@Param("increaseCount") boolean increaseCount, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.mediaTweetCount = " +
            "CASE WHEN :increaseCount = true THEN (user.mediaTweetCount + 1) " +
            "ELSE (user.mediaTweetCount - 1) END " +
            "WHERE user.id = :userId")
    void updateMediaTweetCount(@Param("increaseCount") boolean increaseCount, @Param("userId") Long userId);

    @Query("SELECT user FROM User user WHERE user.id IN :userIds")
    List<ListMemberProjection> getUsersByIds(@Param("userIds") List<Long> userIds);

    @Query("SELECT user FROM User user " +
            "WHERE UPPER(user.fullName) LIKE UPPER(CONCAT('%',:username,'%')) AND user.active = true " +
            "OR UPPER(user.username) LIKE UPPER(CONCAT('%',:username,'%')) AND user.active = true")
    List<ListMemberProjection> searchListMembersByUsername(@Param("username") String username);

    @Query("SELECT user FROM User user WHERE user.id IN :userIds")
    Page<UserProjection> getTweetLikedUsersByIds(@Param("userIds") List<Long> userIds, Pageable pageable);

    @Query("SELECT user FROM User user WHERE user.id IN :userIds")
    Page<UserProjection> getRetweetedUsersByTweetId(@Param("userIds") List<Long> userIds, Pageable pageable);

    @Query("SELECT user.pinnedTweetId FROM User user WHERE user.id = :userId")
    Long getPinnedTweetId(@Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.pinnedTweetId = :tweetId WHERE user.id = :userId")
    void updatePinnedTweetId(@Param("tweetId") Long tweetId, @Param("userId") Long userId);

    @Query("SELECT user.id FROM User user " +
            "LEFT JOIN user.following following " +
            "WHERE user.id IN :userIds " +
            "AND (user.privateProfile = false " +
            "   OR (user.privateProfile = true AND (following.id = :userId OR user.id = :userId)) " +
            "   AND user.active = true)")
    List<Long> getValidUserIdsByIds(@Param("userIds") List<Long> userIds, @Param("userId") Long userId);

    @Query("SELECT user.id FROM User user " +
            "LEFT JOIN user.following following " +
            "WHERE (UPPER(user.fullName) LIKE UPPER(CONCAT('%',:username,'%')) " +
            "   AND (user.privateProfile = false OR (user.privateProfile = true AND following.id IN :userIds) " +
            "       AND user.active = true)) " +
            "OR (UPPER(user.username) LIKE UPPER(CONCAT('%',:username,'%')) " +
            "   AND (user.privateProfile = false OR (user.privateProfile = true AND following.id IN :userIds) " +
            "       AND user.active = true))")
    List<Long> getValidUserIdsByName(@Param("username") String username, @Param("userIds") List<Long> userIds);

    @Query("SELECT CASE WHEN count(user) > 0 THEN true ELSE false END FROM User user WHERE user.id = :userId")
    boolean isUserExists(@Param("userId") Long userId);

    @Query("SELECT user.id FROM User user " +
            "LEFT JOIN user.userBlockedList blockedUser " +
            "WHERE user.id IN :userIds " +
            "AND blockedUser.id = :authUserId")
    List<Long> getUserIdsWhoBlockedMyProfile(@Param("userIds") List<Long> userIds, @Param("authUserId") Long authUserId);

    @Query("SELECT subscriber.id FROM User user " +
            "JOIN user.subscribers subscriber " +
            "WHERE user.id = :userId")
    List<Long> getSubscribersByUserId(@Param("userId") Long userId);

    @Query("SELECT user FROM User user " +
            "LEFT JOIN user.subscribers subscriber " +
            "WHERE subscriber.id = :userId")
    List<NotificationUserProjection> getUsersWhichUserSubscribed(@Param("userId") Long userId);

    @Query("SELECT user.id FROM User user " +
            "LEFT JOIN user.subscribers subscriber " +
            "WHERE subscriber.id = :userId")
    List<Long> getUserIdsWhichUserSubscribed(@Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.notificationsCount = 0 WHERE user.id = :userId")
    void resetNotificationCount(@Param("userId") Long userId);

    @Query("SELECT CASE WHEN count(user) > 0 THEN true ELSE false END FROM User user " +
            "LEFT JOIN user.subscribers subscriber " +
            "WHERE user.id = :userId " +
            "AND subscriber.id = :authUserId")
    boolean isUserSubscribed(@Param("userId") Long userId, @Param("authUserId") Long authUserId);

    @Modifying
    @Query(value = "INSERT INTO subscribers (subscriber_id, user_id) VALUES (?1, ?2)", nativeQuery = true)
    void subscribe(@Param("authUserId") Long authUserId, @Param("userId") Long userId);

    @Modifying
    @Query(value = "DELETE FROM subscribers WHERE subscriber_id = ?1 AND user_id = ?2", nativeQuery = true)
    void unsubscribe(@Param("authUserId") Long authUserId, @Param("userId") Long userId);
}
`
                                    }
                                  },
                                  "UserSettingsRepository.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.repository;

import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import com.gmail.merikbest2015.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface UserSettingsRepository extends JpaRepository<User, Long> {

    @Query("SELECT CASE WHEN count(user) > 0 THEN true ELSE false END FROM User user WHERE user.email = :email")
    boolean isEmailExist(@Param("email") String email);

    @Modifying
    @Query("UPDATE User user SET user.email = :email WHERE user.id = :userId")
    void updateEmail(@Param("email") String email, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.username = :username WHERE user.id = :userId")
    void updateUsername(@Param("username") String username, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.countryCode = :countryCode, user.phone = :phone WHERE user.id = :userId")
    void updatePhone(@Param("countryCode") String countryCode, @Param("phone") Long phone, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.country = :country WHERE user.id = :userId")
    void updateCountry(@Param("country") String country, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.gender = :gender WHERE user.id = :userId")
    void updateGender(@Param("gender") String gender, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.language = :language WHERE user.id = :userId")
    void updateLanguage(@Param("language") String language, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.mutedDirectMessages = :mutedDirectMessages WHERE user.id = :userId")
    void updateDirectMessageRequests(@Param("mutedDirectMessages") boolean mutedDirectMessages, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.privateProfile = :privateProfile WHERE user.id = :userId")
    void updatePrivateProfile(@Param("privateProfile") boolean privateProfile, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.colorScheme = :colorSchemeType WHERE user.id = :userId")
    void updateColorScheme(@Param("colorSchemeType") ColorSchemeType colorSchemeType, @Param("userId") Long userId);

    @Modifying
    @Query("UPDATE User user SET user.backgroundColor = :backgroundColor WHERE user.id = :userId")
    void updateBackgroundColor(@Param("backgroundColor") BackgroundColorType backgroundColorType, @Param("userId") Long userId);
}
`
                                    }
                                  }
                                }
                              },
                              "service": {
                                "directory": {
                                  "AuthenticationService.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.service;

import com.gmail.merikbest2015.dto.request.AuthenticationRequest;
import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.projection.AuthUserProjection;
import com.gmail.merikbest2015.repository.projection.UserPrincipalProjection;
import org.springframework.validation.BindingResult;

import java.util.Map;

public interface AuthenticationService {

    Long getAuthenticatedUserId();

    User getAuthenticatedUser();

    UserPrincipalProjection getUserPrincipalByEmail(String email);

    Map<String, Object> login(AuthenticationRequest request, BindingResult bindingResult);

    Map<String, Object> getUserByToken();

    String getExistingEmail(String email, BindingResult bindingResult);

    String sendPasswordResetCode(String email, BindingResult bindingResult);

    AuthUserProjection getUserByPasswordResetCode(String code);

    String passwordReset(String email, String password, String password2, BindingResult bindingResult);

    String currentPasswordReset(String currentPassword, String password, String password2, BindingResult bindingResult);
}
`
                                    }
                                  },
                                  "BlockUserService.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.service;

import com.gmail.merikbest2015.repository.projection.BlockedUserProjection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface BlockUserService {

    Page<BlockedUserProjection> getBlockList(Pageable pageable);

    Boolean processBlockList(Long userId);
}
`
                                    }
                                  },
                                  "FollowerUserService.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.service;

import com.gmail.merikbest2015.repository.projection.BaseUserProjection;
import com.gmail.merikbest2015.repository.projection.FollowerUserProjection;
import com.gmail.merikbest2015.repository.projection.UserProfileProjection;
import com.gmail.merikbest2015.repository.projection.UserProjection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;

public interface FollowerUserService {

    Page<UserProjection> getFollowers(Long userId, Pageable pageable);

    Page<UserProjection> getFollowing(Long userId, Pageable pageable);

    Page<FollowerUserProjection> getFollowerRequests(Pageable pageable);

    Boolean processFollow(Long userId);

    List<BaseUserProjection> overallFollowers(Long userId);

    UserProfileProjection processFollowRequestToPrivateProfile(Long userId);

    String acceptFollowRequest(Long userId);

    String declineFollowRequest(Long userId);
}
`
                                    }
                                  },
                                  "impl": {
                                    "directory": {
                                      "AuthenticationServiceImpl.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.impl;

import com.gmail.merikbest2015.amqp.AmqpProducer;
import com.gmail.merikbest2015.dto.request.AuthenticationRequest;
import com.gmail.merikbest2015.dto.request.EmailRequest;
import com.gmail.merikbest2015.exception.ApiRequestException;
import com.gmail.merikbest2015.exception.InputFieldException;
import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.UserRepository;
import com.gmail.merikbest2015.repository.projection.AuthUserProjection;
import com.gmail.merikbest2015.repository.projection.UserCommonProjection;
import com.gmail.merikbest2015.repository.projection.UserPrincipalProjection;
import com.gmail.merikbest2015.security.JwtProvider;
import com.gmail.merikbest2015.service.AuthenticationService;
import com.gmail.merikbest2015.service.util.UserServiceHelper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.util.Map;
import java.util.UUID;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;
import static com.gmail.merikbest2015.constants.PathConstants.AUTH_USER_ID_HEADER;

@Service
@RequiredArgsConstructor
public class AuthenticationServiceImpl implements AuthenticationService {

    private final UserRepository userRepository;
    private final UserServiceHelper userServiceHelper;
    private final PasswordEncoder passwordEncoder;
    private final JwtProvider jwtProvider;
    private final AmqpProducer amqpProducer;

    @Override
    public Long getAuthenticatedUserId() {
        return getUserId();
    }

    @Override
    public User getAuthenticatedUser() {
        return userRepository.findById(getUserId())
                .orElseThrow(() -> new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND));
    }

    @Override
    public UserPrincipalProjection getUserPrincipalByEmail(String email) {
        return userRepository.getUserByEmail(email, UserPrincipalProjection.class)
                .orElseThrow(() -> new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND));
    }

    @Override
    public Map<String, Object> login(AuthenticationRequest request, BindingResult bindingResult) {
        userServiceHelper.processInputErrors(bindingResult);
        AuthUserProjection user = userRepository.getUserByEmail(request.getEmail(), AuthUserProjection.class)
                .orElseThrow(() -> new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND));
        String token = jwtProvider.createToken(request.getEmail(), "USER");
        return Map.of("user", user, "token", token);
    }

    @Override
    public Map<String, Object> getUserByToken() {
        AuthUserProjection user = userRepository.getUserById(getUserId(), AuthUserProjection.class)
                .orElseThrow(() -> new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND));
        String token = jwtProvider.createToken(user.getEmail(), "USER");
        return Map.of("user", user, "token", token);
    }

    @Override
    public String getExistingEmail(String email, BindingResult bindingResult) {
        userServiceHelper.processInputErrors(bindingResult);
        userRepository.getUserByEmail(email, UserCommonProjection.class)
                .orElseThrow(() -> new ApiRequestException(EMAIL_NOT_FOUND, HttpStatus.NOT_FOUND));
        return "Reset password code is send to your E-mail";
    }

    @Override
    @Transactional
    public String sendPasswordResetCode(String email, BindingResult bindingResult) {
        userServiceHelper.processInputErrors(bindingResult);
        UserCommonProjection user = userRepository.getUserByEmail(email, UserCommonProjection.class)
                .orElseThrow(() -> new ApiRequestException(EMAIL_NOT_FOUND, HttpStatus.NOT_FOUND));
        userRepository.updatePasswordResetCode(UUID.randomUUID().toString().substring(0, 7), user.getId());
        EmailRequest request = EmailRequest.builder()
                .to(user.getEmail())
                .subject("Password reset")
                .template("password-reset-template")
                .attributes(Map.of(
                        "fullName", user.getFullName(),
                        "passwordResetCode", user.getPasswordResetCode()))
                .build();
        amqpProducer.sendEmail(request);
        return "Reset password code is send to your E-mail";
    }

    @Override
    public AuthUserProjection getUserByPasswordResetCode(String code) {
        return userRepository.getByPasswordResetCode(code)
                .orElseThrow(() -> new ApiRequestException(INVALID_PASSWORD_RESET_CODE, HttpStatus.BAD_REQUEST));
    }

    @Override
    @Transactional
    public String passwordReset(String email, String password, String password2, BindingResult bindingResult) {
        userServiceHelper.processInputErrors(bindingResult);
        checkMatchPasswords(password, password2);
        UserCommonProjection user = userRepository.getUserByEmail(email, UserCommonProjection.class)
                .orElseThrow(() -> new InputFieldException(HttpStatus.NOT_FOUND, Map.of("email", EMAIL_NOT_FOUND)));
        userRepository.updatePassword(passwordEncoder.encode(password), user.getId());
        userRepository.updatePasswordResetCode(null, user.getId());
        return "Password successfully changed!";
    }

    @Override
    @Transactional
    public String currentPasswordReset(String currentPassword, String password, String password2, BindingResult bindingResult) {
        userServiceHelper.processInputErrors(bindingResult);
        Long authUserId = getAuthenticatedUserId();
        String userPassword = userRepository.getUserPasswordById(authUserId);

        if (!passwordEncoder.matches(currentPassword, userPassword)) {
            processPasswordException("currentPassword", INCORRECT_PASSWORD, HttpStatus.NOT_FOUND);
        }
        checkMatchPasswords(password, password2);
        userRepository.updatePassword(passwordEncoder.encode(password), authUserId);
        return "Your password has been successfully updated.";
    }

    private Long getUserId() {
        RequestAttributes attribs = RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = ((ServletRequestAttributes) attribs).getRequest();
        return Long.parseLong(request.getHeader(AUTH_USER_ID_HEADER));
    }

    private void checkMatchPasswords(String password, String password2) {
        if (password != null && !password.equals(password2)) {
            processPasswordException("password", PASSWORDS_NOT_MATCH, HttpStatus.BAD_REQUEST);
        }
    }

    private void processPasswordException(String paramName, String exceptionMessage, HttpStatus status) {
        throw new InputFieldException(status, Map.of(paramName, exceptionMessage));
    }
}
`
                                        }
                                      },
                                      "BlockUserServiceImpl.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.impl;

import com.gmail.merikbest2015.repository.BlockUserRepository;
import com.gmail.merikbest2015.repository.FollowerUserRepository;
import com.gmail.merikbest2015.repository.projection.BlockedUserProjection;
import com.gmail.merikbest2015.service.AuthenticationService;
import com.gmail.merikbest2015.service.BlockUserService;
import com.gmail.merikbest2015.service.util.UserServiceHelper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class BlockUserServiceImpl implements BlockUserService {

    private final AuthenticationService authenticationService;
    private final BlockUserRepository blockUserRepository;
    private final FollowerUserRepository followerUserRepository;
    private final UserServiceHelper userServiceHelper;

    @Override
    public Page<BlockedUserProjection> getBlockList(Pageable pageable) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return blockUserRepository.getUserBlockListById(authUserId, pageable);
    }

    @Override
    @Transactional
    public Boolean processBlockList(Long userId) {
        userServiceHelper.checkIsUserExist(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();
        boolean isUserBlocked = blockUserRepository.isUserBlocked(authUserId, userId);

        if (isUserBlocked) {
            blockUserRepository.unblockUser(authUserId, userId);
            return false;
        } else {
            blockUserRepository.blockUser(authUserId, userId);
            followerUserRepository.unfollow(authUserId, userId);
            followerUserRepository.unfollow(userId, authUserId);
            return true;
        }
    }
}
`
                                        }
                                      },
                                      "FollowerUserServiceImpl.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.impl;

import com.gmail.merikbest2015.dto.request.NotificationRequest;
import com.gmail.merikbest2015.enums.NotificationType;
import com.gmail.merikbest2015.feign.NotificationClient;
import com.gmail.merikbest2015.repository.FollowerUserRepository;
import com.gmail.merikbest2015.repository.UserRepository;
import com.gmail.merikbest2015.repository.projection.BaseUserProjection;
import com.gmail.merikbest2015.repository.projection.FollowerUserProjection;
import com.gmail.merikbest2015.repository.projection.UserProfileProjection;
import com.gmail.merikbest2015.repository.projection.UserProjection;
import com.gmail.merikbest2015.service.AuthenticationService;
import com.gmail.merikbest2015.service.FollowerUserService;
import com.gmail.merikbest2015.service.util.UserServiceHelper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
public class FollowerUserServiceImpl implements FollowerUserService {

    private final UserRepository userRepository;
    private final FollowerUserRepository followerUserRepository;
    private final AuthenticationService authenticationService;
    private final NotificationClient notificationClient;
    private final UserServiceHelper userServiceHelper;

    @Override
    public Page<UserProjection> getFollowers(Long userId, Pageable pageable) {
        userServiceHelper.validateUserProfile(userId);
        return followerUserRepository.getFollowersById(userId, pageable);
    }

    @Override
    public Page<UserProjection> getFollowing(Long userId, Pageable pageable) {
        userServiceHelper.validateUserProfile(userId);
        return followerUserRepository.getFollowingById(userId, pageable);
    }

    @Override
    public Page<FollowerUserProjection> getFollowerRequests(Pageable pageable) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return followerUserRepository.getFollowerRequests(authUserId, pageable);
    }

    @Override
    @Transactional
    public Boolean processFollow(Long userId) {
        userServiceHelper.checkIsUserExistOrMyProfileBlocked(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();
        boolean isFollower = followerUserRepository.isFollower(authUserId, userId);
        boolean follower = false;

        if (isFollower) {
            followerUserRepository.unfollow(authUserId, userId);
            userRepository.unsubscribe(authUserId, userId);
        } else {
            boolean isPrivateProfile = userRepository.getUserPrivateProfile(userId);

            if (!isPrivateProfile) {
                followerUserRepository.follow(authUserId, userId);
                NotificationRequest request = NotificationRequest.builder()
                        .notificationType(NotificationType.FOLLOW)
                        .userId(authUserId)
                        .userToFollowId(userId)
                        .notifiedUserId(userId)
                        .build();
                notificationClient.sendUserNotification(request);
                follower = true;
            } else {
                followerUserRepository.addFollowerRequest(authUserId, userId);
            }
        }
        return follower;
    }

    @Override
    public List<BaseUserProjection> overallFollowers(Long userId) {
        userServiceHelper.validateUserProfile(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return followerUserRepository.getSameFollowers(userId, authUserId, BaseUserProjection.class);
    }

    @Override
    @Transactional
    public UserProfileProjection processFollowRequestToPrivateProfile(Long userId) {
        userServiceHelper.checkIsUserExistOrMyProfileBlocked(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();
        boolean isFollowerRequest = followerUserRepository.isFollowerRequest(userId, authUserId);

        if (isFollowerRequest) {
            followerUserRepository.removeFollowerRequest(authUserId, userId);
        } else {
            followerUserRepository.addFollowerRequest(authUserId, userId);
        }
        return userRepository.getUserById(userId, UserProfileProjection.class).get();
    }

    @Override
    @Transactional
    public String acceptFollowRequest(Long userId) {
        userServiceHelper.checkIsUserExist(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();
        followerUserRepository.removeFollowerRequest(userId, authUserId);
        followerUserRepository.follow(userId, authUserId);
        return String.format("User (id:%s) accepted.", userId);
    }

    @Override
    @Transactional
    public String declineFollowRequest(Long userId) {
        userServiceHelper.checkIsUserExist(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();
        followerUserRepository.removeFollowerRequest(userId, authUserId);
        return String.format("User (id:%s) declined.", userId);
    }
}
`
                                        }
                                      },
                                      "MuteUserServiceImpl.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.impl;

import com.gmail.merikbest2015.repository.MuteUserRepository;
import com.gmail.merikbest2015.repository.projection.MutedUserProjection;
import com.gmail.merikbest2015.service.AuthenticationService;
import com.gmail.merikbest2015.service.MuteUserService;
import com.gmail.merikbest2015.service.util.UserServiceHelper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class MuteUserServiceImpl implements MuteUserService {

    private final MuteUserRepository muteUserRepository;
    private final AuthenticationService authenticationService;
    private final UserServiceHelper userServiceHelper;

    @Override
    public Page<MutedUserProjection> getMutedList(Pageable pageable) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return muteUserRepository.getUserMuteListById(authUserId, pageable);
    }

    @Override
    @Transactional
    public Boolean processMutedList(Long userId) {
        userServiceHelper.checkIsUserExist(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();
        boolean isUserMuted = muteUserRepository.isUserMuted(authUserId, userId);

        if (isUserMuted) {
            muteUserRepository.unmuteUser(authUserId, userId);
            return false;
        } else {
            muteUserRepository.muteUser(authUserId, userId);
            return true;
        }
    }
}
`
                                        }
                                      },
                                      "RegistrationServiceImpl.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.impl;

import com.gmail.merikbest2015.amqp.AmqpProducer;
import com.gmail.merikbest2015.dto.request.EmailRequest;
import com.gmail.merikbest2015.dto.request.RegistrationRequest;
import com.gmail.merikbest2015.exception.ApiRequestException;
import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.UserRepository;
import com.gmail.merikbest2015.repository.projection.AuthUserProjection;
import com.gmail.merikbest2015.repository.projection.UserCommonProjection;
import com.gmail.merikbest2015.security.JwtProvider;
import com.gmail.merikbest2015.service.RegistrationService;
import com.gmail.merikbest2015.service.util.UserServiceHelper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;

import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Service
@RequiredArgsConstructor
public class RegistrationServiceImpl implements RegistrationService {

    private final UserRepository userRepository;
    private final UserServiceHelper userServiceHelper;
    private final PasswordEncoder passwordEncoder;
    private final JwtProvider jwtProvider;
    private final AmqpProducer amqpProducer;

    @Override
    @Transactional
    public String registration(RegistrationRequest request, BindingResult bindingResult) {
        userServiceHelper.processInputErrors(bindingResult);
        Optional<User> existingUser = userRepository.getUserByEmail(request.getEmail(), User.class);

        if (existingUser.isEmpty()) {
            User user = new User();
            user.setEmail(request.getEmail());
            user.setUsername(request.getUsername());
            user.setFullName(request.getUsername());
            user.setBirthday(request.getBirthday());
            userRepository.save(user);
            return "User data checked.";
        }
        if (!existingUser.get().isActive()) {
            existingUser.get().setUsername(request.getUsername());
            existingUser.get().setFullName(request.getUsername());
            existingUser.get().setBirthday(request.getBirthday());
            userRepository.save(existingUser.get());
            return "User data checked.";
        }
        throw new ApiRequestException(EMAIL_HAS_ALREADY_BEEN_TAKEN, HttpStatus.FORBIDDEN);
    }

    @Override
    @Transactional
    public String sendRegistrationCode(String email, BindingResult bindingResult) {
        userServiceHelper.processInputErrors(bindingResult);
        UserCommonProjection user = userRepository.getUserByEmail(email, UserCommonProjection.class)
                .orElseThrow(() -> new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND));
        userRepository.updateActivationCode(UUID.randomUUID().toString().substring(0, 7), user.getId());
        EmailRequest request = EmailRequest.builder()
                .to(user.getEmail())
                .subject("Registration code")
                .template("registration-template")
                .attributes(Map.of(
                        "fullName", user.getFullName(),
                        "registrationCode", user.getActivationCode()))
                .build();
        amqpProducer.sendEmail(request);
        return "Registration code sent successfully";
    }

    @Override
    @Transactional
    public String checkRegistrationCode(String code) {
        UserCommonProjection user = userRepository.getCommonUserByActivationCode(code)
                .orElseThrow(() -> new ApiRequestException(ACTIVATION_CODE_NOT_FOUND, HttpStatus.NOT_FOUND));
        userRepository.updateActivationCode(null, user.getId());
        return "User successfully activated.";
    }

    @Override
    @Transactional
    public Map<String, Object> endRegistration(String email, String password, BindingResult bindingResult) {
        userServiceHelper.processInputErrors(bindingResult);
        if (password.length() < 8) {
            throw new ApiRequestException(PASSWORD_LENGTH_ERROR, HttpStatus.BAD_REQUEST);
        }
        AuthUserProjection user = userRepository.getUserByEmail(email, AuthUserProjection.class)
                .orElseThrow(() -> new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND));
        userRepository.updatePassword(passwordEncoder.encode(password), user.getId());
        userRepository.updateActiveUserProfile(user.getId());
        String token = jwtProvider.createToken(email, "USER");
        return Map.of("user", user, "token", token);
    }
}
`
                                        }
                                      },
                                      "UserClientServiceImpl.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.impl;

import com.gmail.merikbest2015.dto.*;
import com.gmail.merikbest2015.dto.request.IdsRequest;
import com.gmail.merikbest2015.dto.response.chat.ChatTweetUserResponse;
import com.gmail.merikbest2015.dto.response.chat.ChatUserParticipantResponse;
import com.gmail.merikbest2015.dto.response.lists.ListMemberResponse;
import com.gmail.merikbest2015.dto.response.lists.CommonUserResponse;
import com.gmail.merikbest2015.dto.response.notification.NotificationUserResponse;
import com.gmail.merikbest2015.dto.response.tweet.TweetAdditionalInfoUserResponse;
import com.gmail.merikbest2015.dto.response.tweet.TweetAuthorResponse;
import com.gmail.merikbest2015.dto.response.user.UserChatResponse;
import com.gmail.merikbest2015.dto.response.user.UserResponse;
import com.gmail.merikbest2015.mapper.BasicMapper;
import com.gmail.merikbest2015.repository.BlockUserRepository;
import com.gmail.merikbest2015.repository.FollowerUserRepository;
import com.gmail.merikbest2015.repository.projection.CommonUserProjection;
import com.gmail.merikbest2015.repository.UserRepository;
import com.gmail.merikbest2015.repository.projection.*;
import com.gmail.merikbest2015.service.AuthenticationService;
import com.gmail.merikbest2015.service.UserClientService;
import com.gmail.merikbest2015.util.AuthUtil;
import com.gmail.merikbest2015.service.util.UserServiceHelper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Stream;

@Service
@RequiredArgsConstructor
public class UserClientServiceImpl implements UserClientService {

    private final UserRepository userRepository;
    private final FollowerUserRepository followerUserRepository;
    private final BlockUserRepository blockUserRepository;
    private final BasicMapper basicMapper;
    private final AuthenticationService authenticationService;
    private final UserServiceHelper userServiceHelper;

    @Override
    public List<Long> getUserFollowersIds() {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        List<Long> userFollowersIds = followerUserRepository.getUserFollowersIds(authUserId);
        userFollowersIds.add(authUserId);
        return userFollowersIds;
    }

    @Override
    public HeaderResponse<UserChatResponse> searchUsersByUsername(String username, Pageable pageable) {
        Page<UserChatProjection> users = userRepository.searchUsersByUsername(username, pageable, UserChatProjection.class);
        return basicMapper.getHeaderResponse(users, UserChatResponse.class);
    }

    @Override
    public List<Long> getSubscribersByUserId(Long userId) {
        return userRepository.getSubscribersByUserId(userId);
    }

    @Override
    public Boolean isUserFollowByOtherUser(Long userId) {
        return userServiceHelper.isUserFollowByOtherUser(userId);
    }

    @Override
    public Boolean isUserHavePrivateProfile(Long userId) {
        return userServiceHelper.isUserHavePrivateProfile(userId);
    }

    @Override
    public Boolean isUserBlocked(Long userId, Long blockedUserId) {
        return blockUserRepository.isUserBlocked(userId, blockedUserId);
    }

    @Override
    public Boolean isUserBlockedByMyProfile(Long userId) {
        return userServiceHelper.isUserBlockedByMyProfile(userId);
    }

    @Override
    public Boolean isMyProfileBlockedByUser(Long userId) {
        return userServiceHelper.isMyProfileBlockedByUser(userId);
    }

    @Override
    @Transactional
    public void increaseNotificationsCount(Long userId) {
        userRepository.increaseNotificationsCount(userId);
    }

    @Override
    @Transactional
    public void updateLikeCount(boolean increaseCount) {
        Long userId = AuthUtil.getAuthenticatedUserId();
        userRepository.updateLikeCount(increaseCount, userId);
    }

    @Override
    @Transactional
    public void updateTweetCount(boolean increaseCount) {
        Long userId = AuthUtil.getAuthenticatedUserId();
        userRepository.updateTweetCount(increaseCount, userId);
    }

    @Override
    @Transactional
    public void updateMediaTweetCount(boolean increaseCount) {
        Long userId = AuthUtil.getAuthenticatedUserId();
        userRepository.updateMediaTweetCount(increaseCount, userId);
    }

    @Override
    public CommonUserResponse getListOwnerById(Long userId) {
        CommonUserProjection user = userRepository.getUserById(userId, CommonUserProjection.class).get();
        return basicMapper.convertToResponse(user, CommonUserResponse.class);
    }

    @Override
    public List<ListMemberResponse> getListParticipantsByIds(IdsRequest request) {
        List<ListMemberProjection> users = userRepository.getUsersByIds(request.getIds());
        return basicMapper.convertToResponseList(users, ListMemberResponse.class);
    }

    @Override
    public List<ListMemberResponse> searchListMembersByUsername(String username) {
        List<ListMemberProjection> users = userRepository.searchListMembersByUsername(username);
        return basicMapper.convertToResponseList(users, ListMemberResponse.class);
    }

    @Override
    public NotificationUserResponse getNotificationUser(Long userId) {
        NotificationUserProjection user = userRepository.getUserById(userId, NotificationUserProjection.class).get();
        return basicMapper.convertToResponse(user, NotificationUserResponse.class);
    }

    @Override
    public TweetAuthorResponse getTweetAuthor(Long userId) {
        TweetAuthorProjection user = userRepository.getUserById(userId, TweetAuthorProjection.class).get();
        return basicMapper.convertToResponse(user, TweetAuthorResponse.class);
    }

    @Override
    public TweetAdditionalInfoUserResponse getTweetAdditionalInfoUser(Long userId) {
        TweetAdditionalInfoUserProjection user =
                userRepository.getUserById(userId, TweetAdditionalInfoUserProjection.class).get();
        return basicMapper.convertToResponse(user, TweetAdditionalInfoUserResponse.class);
    }

    @Override
    public HeaderResponse<UserResponse> getTweetLikedUsersByIds(IdsRequest request, Pageable pageable) {
        Page<UserProjection> users = userRepository.getTweetLikedUsersByIds(request.getIds(), pageable);
        return basicMapper.getHeaderResponse(users, UserResponse.class);
    }

    @Override
    public HeaderResponse<UserResponse> getRetweetedUsersByTweetId(IdsRequest request, Pageable pageable) {
        Page<UserProjection> users = userRepository.getRetweetedUsersByTweetId(request.getIds(), pageable);
        return basicMapper.getHeaderResponse(users, UserResponse.class);
    }

    @Override
    @Transactional
    public void updatePinnedTweetId(Long tweetId) {
        Long userId = AuthUtil.getAuthenticatedUserId();
        Long pinnedTweetId = userRepository.getPinnedTweetId(userId);

        if (pinnedTweetId != null && pinnedTweetId.equals(tweetId)) {
            userRepository.updatePinnedTweetId(null, userId);
        }
    }

    @Override
    public Long getUserPinnedTweetId(Long userId) {
        return userRepository.getPinnedTweetId(userId);
    }

    @Override
    public List<Long> getValidTweetUserIds(IdsRequest request, String text) {
        Long authUserId = AuthUtil.getAuthenticatedUserId();
        List<Long> validUserIds = userRepository.getValidUserIdsByIds(request.getIds(), authUserId);
        List<Long> userIdsByUsername = userRepository.getValidUserIdsByName(text, request.getIds());
        return Stream.concat(validUserIds.stream(), userIdsByUsername.stream()).distinct().toList();
    }

    @Override
    public List<Long> getValidUserIds(IdsRequest request) {
        Long authUserId = AuthUtil.getAuthenticatedUserId();
        List<Long> blockedUserIds = userRepository.getUserIdsWhoBlockedMyProfile(request.getIds(), authUserId);
        request.getIds().removeAll(blockedUserIds);
        return userRepository.getValidUserIdsByIds(request.getIds(), authUserId);
    }

    @Override
    public ChatUserParticipantResponse getChatParticipant(Long userId) {
        ChatUserParticipantProjection user = userRepository.getUserById(userId, ChatUserParticipantProjection.class).get();
        return basicMapper.convertToResponse(user, ChatUserParticipantResponse.class);
    }

    @Override
    public Boolean isUserExists(Long userId) {
        return userRepository.isUserExists(userId);
    }

    @Override
    public UserResponse getUserResponseById(Long userId) {
        UserProjection user = userRepository.getUserById(userId, UserProjection.class).get();
        return basicMapper.convertToResponse(user, UserResponse.class);
    }

    @Override
    public ChatTweetUserResponse getChatTweetUser(Long userId) {
        ChatTweetUserProjection user = userRepository.getUserById(userId, ChatTweetUserProjection.class).get();
        return basicMapper.convertToResponse(user, ChatTweetUserResponse.class);
    }

    @Override
    public List<Long> validateChatUsersIds(IdsRequest request) {
        Long authUserId = AuthUtil.getAuthenticatedUserId();
        List<Long> blockedUserIds = userRepository.getUserIdsWhoBlockedMyProfile(request.getIds(), authUserId);
        request.getIds().removeAll(blockedUserIds);
        return request.getIds();
    }

    @Override
    public List<NotificationUserResponse> getUsersWhichUserSubscribed() {
        Long authUserId = AuthUtil.getAuthenticatedUserId();
        List<NotificationUserProjection> users = userRepository.getUsersWhichUserSubscribed(authUserId);
        return basicMapper.convertToResponseList(users, NotificationUserResponse.class);
    }

    @Override
    public List<Long> getUserIdsWhichUserSubscribed() {
        Long authUserId = AuthUtil.getAuthenticatedUserId();
        return userRepository.getUserIdsWhichUserSubscribed(authUserId);
    }

    @Override
    @Transactional
    public void resetNotificationCount() {
        Long authUserId = AuthUtil.getAuthenticatedUserId();
        userRepository.resetNotificationCount(authUserId);
    }
}
`
                                        }
                                      },
                                      "UserServiceImpl.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.impl;

import com.gmail.merikbest2015.exception.ApiRequestException;
import com.gmail.merikbest2015.feign.TagClient;
import com.gmail.merikbest2015.feign.TweetClient;
import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.UserRepository;
import com.gmail.merikbest2015.repository.projection.*;
import com.gmail.merikbest2015.service.AuthenticationService;
import com.gmail.merikbest2015.service.UserService;
import com.gmail.merikbest2015.service.util.UserServiceHelper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

    private final AuthenticationService authenticationService;
    private final UserRepository userRepository;
    private final UserServiceHelper userServiceHelper;
    private final TweetClient tweetClient;
    private final TagClient tagClient;

    @Override
    public UserProfileProjection getUserById(Long userId) {
        return userRepository.getUserById(userId, UserProfileProjection.class)
                .orElseThrow(() -> new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND));
    }

    @Override
    public Page<UserProjection> getUsers(Pageable pageable) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return userRepository.findByActiveTrueAndIdNot(authUserId, pageable);
    }

    @Override
    public List<UserProjection> getRelevantUsers() {
        return userRepository.findTop5ByActiveTrue();
    }

    @Override
    public <T> Page<T> searchUsersByUsername(String text, Pageable pageable, Class<T> type) {
        return userRepository.searchUsersByUsername(text, pageable, type);
    }

    @Override
    public Map<String, Object> searchByText(String text) {
        Long tweetCount = tweetClient.getTweetCountByText(text);
        List<String> tags = tagClient.getTagsByText(text);
        List<CommonUserProjection> users = userRepository.searchUserByText(text);
        return Map.of("tweetCount", tweetCount, "tags", tags, "users", users);
    }

    @Override
    @Transactional
    public Boolean startUseTwitter() {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userRepository.updateProfileStarted(authUserId);
        return true;
    }

    @Override
    @Transactional
    public AuthUserProjection updateUserProfile(User userInfo) {
        if (userInfo.getFullName().length() == 0 || userInfo.getFullName().length() > 50) {
            throw new ApiRequestException(INCORRECT_USERNAME_LENGTH, HttpStatus.BAD_REQUEST);
        }
        User user = authenticationService.getAuthenticatedUser();

        if (userInfo.getAvatar() != null) {
            user.setAvatar(userInfo.getAvatar());
        }
        if (userInfo.getWallpaper() != null) {
            user.setWallpaper(userInfo.getWallpaper());
        }
        user.setFullName(userInfo.getFullName());
        user.setAbout(userInfo.getAbout());
        user.setLocation(userInfo.getLocation());
        user.setWebsite(userInfo.getWebsite());
        user.setProfileCustomized(true);
        return userRepository.getUserById(user.getId(), AuthUserProjection.class).get();
    }

    @Override
    @Transactional
    public Boolean processSubscribeToNotifications(Long userId) {
        userServiceHelper.checkIsUserExistOrMyProfileBlocked(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();
        boolean isUserSubscribed = userRepository.isUserSubscribed(userId, authUserId);

        if (isUserSubscribed) {
            userRepository.unsubscribe(authUserId, userId);
            return false;
        } else {
            userRepository.subscribe(authUserId, userId);
            return true;
        }
    }

    @Override
    @Transactional
    public Long processPinTweet(Long tweetId) {
        if (!tweetClient.isTweetExists(tweetId)) {
            throw new ApiRequestException(TWEET_NOT_FOUND, HttpStatus.NOT_FOUND);
        }
        Long authUserId = authenticationService.getAuthenticatedUserId();
        Long pinnedTweetId = userRepository.getPinnedTweetId(authUserId);

        if (pinnedTweetId == null || !pinnedTweetId.equals(tweetId)) {
            userRepository.updatePinnedTweetId(tweetId, authUserId);
            return tweetId;
        } else {
            userRepository.updatePinnedTweetId(null, authUserId);
            return 0L;
        }
    }

    @Override
    public UserDetailProjection getUserDetails(Long userId) {
        userServiceHelper.checkIsUserExistOrMyProfileBlocked(userId);
        return userRepository.getUserById(userId, UserDetailProjection.class)
                .orElseThrow(() -> new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND));
    }
}
`
                                        }
                                      },
                                      "UserSettingsServiceImpl.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.impl;

import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import com.gmail.merikbest2015.exception.ApiRequestException;
import com.gmail.merikbest2015.repository.UserRepository;
import com.gmail.merikbest2015.repository.UserSettingsRepository;
import com.gmail.merikbest2015.repository.projection.AuthUserProjection;
import com.gmail.merikbest2015.security.JwtProvider;
import com.gmail.merikbest2015.service.AuthenticationService;
import com.gmail.merikbest2015.service.UserSettingsService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Service
@RequiredArgsConstructor
public class UserSettingsServiceImpl implements UserSettingsService {

    private final AuthenticationService authenticationService;
    private final UserRepository userRepository;
    private final UserSettingsRepository userSettingsRepository;
    private final JwtProvider jwtProvider;

    @Override
    @Transactional
    public String updateUsername(String username) {
        if (username.length() == 0 || username.length() > 50) {
            throw new ApiRequestException(INCORRECT_USERNAME_LENGTH, HttpStatus.BAD_REQUEST);
        }
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updateUsername(username, authUserId);
        return username;
    }

    @Override
    @Transactional
    public Map<String, Object> updateEmail(String email) {
        if (!userSettingsRepository.isEmailExist(email)) {
            Long authUserId = authenticationService.getAuthenticatedUserId();
            userSettingsRepository.updateEmail(email, authUserId);
            String token = jwtProvider.createToken(email, "USER");
            AuthUserProjection user = userRepository.getUserById(authUserId, AuthUserProjection.class).get();
            return Map.of("user", user, "token", token);
        }
        throw new ApiRequestException(EMAIL_HAS_ALREADY_BEEN_TAKEN, HttpStatus.FORBIDDEN);
    }

    @Override
    @Transactional
    public Map<String, Object> updatePhone(String countryCode, Long phone) {
        int phoneLength = String.valueOf(phone).length();

        if (phoneLength < 6 || phoneLength > 10) {
            throw new ApiRequestException(INVALID_PHONE_NUMBER, HttpStatus.BAD_REQUEST);
        }
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updatePhone(countryCode, phone, authUserId);
        return Map.of("countryCode", countryCode, "phone", phone);
    }

    @Override
    @Transactional
    public String updateCountry(String country) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updateCountry(country, authUserId);
        return country;
    }

    @Override
    @Transactional
    public String updateGender(String gender) {
        if (gender.length() == 0 || gender.length() > 30) {
            throw new ApiRequestException(INVALID_GENDER_LENGTH, HttpStatus.BAD_REQUEST);
        }
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updateGender(gender, authUserId);
        return gender;
    }

    @Override
    @Transactional
    public String updateLanguage(String language) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updateLanguage(language, authUserId);
        return language;
    }

    @Override
    @Transactional
    public boolean updateDirectMessageRequests(boolean mutedDirectMessages) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updateDirectMessageRequests(mutedDirectMessages, authUserId);
        return mutedDirectMessages;
    }

    @Override
    @Transactional
    public boolean updatePrivateProfile(boolean privateProfile) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updatePrivateProfile(privateProfile, authUserId);
        return privateProfile;
    }

    @Override
    @Transactional
    public ColorSchemeType updateColorScheme(ColorSchemeType colorSchemeType) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updateColorScheme(colorSchemeType, authUserId);
        return colorSchemeType;
    }

    @Override
    @Transactional
    public BackgroundColorType updateBackgroundColor(BackgroundColorType backgroundColorType) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        userSettingsRepository.updateBackgroundColor(backgroundColorType, authUserId);
        return backgroundColorType;
    }
}
`
                                        }
                                      }
                                    }
                                  },
                                  "MuteUserService.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.service;

import com.gmail.merikbest2015.repository.projection.MutedUserProjection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface MuteUserService {

    Page<MutedUserProjection> getMutedList(Pageable pageable);

    Boolean processMutedList(Long userId);
}
`
                                    }
                                  },
                                  "RegistrationService.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.service;

import com.gmail.merikbest2015.dto.request.RegistrationRequest;
import org.springframework.validation.BindingResult;

import java.util.Map;

public interface RegistrationService {

    String registration(RegistrationRequest request, BindingResult bindingResult);

    String sendRegistrationCode(String email, BindingResult bindingResult);

    String checkRegistrationCode(String code);

    Map<String, Object> endRegistration(String email, String password, BindingResult bindingResult);
}
`
                                    }
                                  },
                                  "UserClientService.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.service;

import com.gmail.merikbest2015.dto.*;
import com.gmail.merikbest2015.dto.request.IdsRequest;
import com.gmail.merikbest2015.dto.response.chat.ChatTweetUserResponse;
import com.gmail.merikbest2015.dto.response.chat.ChatUserParticipantResponse;
import com.gmail.merikbest2015.dto.response.lists.ListMemberResponse;
import com.gmail.merikbest2015.dto.response.lists.CommonUserResponse;
import com.gmail.merikbest2015.dto.response.notification.NotificationUserResponse;
import com.gmail.merikbest2015.dto.response.tweet.TweetAdditionalInfoUserResponse;
import com.gmail.merikbest2015.dto.response.tweet.TweetAuthorResponse;
import com.gmail.merikbest2015.dto.response.user.UserChatResponse;
import com.gmail.merikbest2015.dto.response.user.UserResponse;
import org.springframework.data.domain.Pageable;

import java.util.List;

public interface UserClientService {

    List<Long> getUserFollowersIds();

    HeaderResponse<UserChatResponse> searchUsersByUsername(String username, Pageable pageable);

    List<Long> getSubscribersByUserId(Long userId);

    Boolean isUserFollowByOtherUser(Long userId);

    Boolean isUserHavePrivateProfile(Long userId);

    Boolean isUserBlocked(Long userId, Long blockedUserId);

    Boolean isUserBlockedByMyProfile(Long userId);

    Boolean isMyProfileBlockedByUser(Long userId);

    void increaseNotificationsCount(Long userId);

    void updateLikeCount(boolean increase);

    void updateTweetCount(boolean increaseCount);

    void updateMediaTweetCount(boolean increaseCount);

    CommonUserResponse getListOwnerById(Long userId);

    List<ListMemberResponse> getListParticipantsByIds(IdsRequest request);

    List<ListMemberResponse> searchListMembersByUsername(String username);

    NotificationUserResponse getNotificationUser(Long userId);

    TweetAuthorResponse getTweetAuthor(Long userId);

    TweetAdditionalInfoUserResponse getTweetAdditionalInfoUser(Long userId);

    HeaderResponse<UserResponse> getTweetLikedUsersByIds(IdsRequest request, Pageable pageable);

    HeaderResponse<UserResponse> getRetweetedUsersByTweetId(IdsRequest request, Pageable pageable);

    void updatePinnedTweetId(Long tweetId);

    Long getUserPinnedTweetId(Long userId);

    List<Long> getValidTweetUserIds(IdsRequest request, String text);

    List<Long> getValidUserIds(IdsRequest request);

    ChatUserParticipantResponse getChatParticipant(Long userId);

    Boolean isUserExists(Long userId);

    UserResponse getUserResponseById(Long userId);

    ChatTweetUserResponse getChatTweetUser(Long userId);

    List<Long> validateChatUsersIds(IdsRequest request);

    List<NotificationUserResponse> getUsersWhichUserSubscribed();

    List<Long> getUserIdsWhichUserSubscribed();

    void resetNotificationCount();
}
`
                                    }
                                  },
                                  "UserService.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.service;

import com.gmail.merikbest2015.model.User;
import com.gmail.merikbest2015.repository.projection.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Map;

public interface UserService {

    UserProfileProjection getUserById(Long userId);

    Page<UserProjection> getUsers(Pageable pageable);

    List<UserProjection> getRelevantUsers();

    <T> Page<T> searchUsersByUsername(String username, Pageable pageable, Class<T> type);

    Map<String, Object> searchByText(String text);

    Boolean startUseTwitter();

    AuthUserProjection updateUserProfile(User userInfo);

    Boolean processSubscribeToNotifications(Long userId);

    Long processPinTweet(Long tweetId);

    UserDetailProjection getUserDetails(Long userId);
}
`
                                    }
                                  },
                                  "UserSettingsService.java": {
                                    "file": {
                                      "contents": `package com.gmail.merikbest2015.service;

import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;

import java.util.Map;

public interface UserSettingsService {

    String updateUsername(String username);

    Map<String, Object> updateEmail(String email);

    Map<String, Object> updatePhone(String countryCode, Long phone);

    String updateCountry(String country);

    String updateGender(String gender);

    String updateLanguage(String language);

    boolean updateDirectMessageRequests(boolean mutedDirectMessages);

    boolean updatePrivateProfile(boolean privateProfile);

    ColorSchemeType updateColorScheme(ColorSchemeType colorSchemeType);

    BackgroundColorType updateBackgroundColor(BackgroundColorType backgroundColorType);
}
`
                                    }
                                  },
                                  "util": {
                                    "directory": {
                                      "UserServiceHelper.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.service.util;

import com.gmail.merikbest2015.exception.ApiRequestException;
import com.gmail.merikbest2015.exception.InputFieldException;
import com.gmail.merikbest2015.repository.BlockUserRepository;
import com.gmail.merikbest2015.repository.FollowerUserRepository;
import com.gmail.merikbest2015.repository.MuteUserRepository;
import com.gmail.merikbest2015.repository.UserRepository;
import com.gmail.merikbest2015.repository.projection.SameFollower;
import com.gmail.merikbest2015.service.AuthenticationService;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.validation.BindingResult;

import java.util.List;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;

@Component
@RequiredArgsConstructor
public class UserServiceHelper {

    @Lazy
    private final AuthenticationService authenticationService;
    private final UserRepository userRepository;
    private final FollowerUserRepository followerUserRepository;
    private final BlockUserRepository blockUserRepository;
    private final MuteUserRepository muteUserRepository;

    public void processInputErrors(BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            throw new InputFieldException(bindingResult);
        }
    }

    public void validateUserProfile(Long userId) {
        checkIsUserExist(userId);
        Long authUserId = authenticationService.getAuthenticatedUserId();

        if (!userId.equals(authUserId)) {
            checkIsUserBlocked(userId);
            checkIsUserHavePrivateProfile(userId);
        }
    }

    public void checkIsUserExistOrMyProfileBlocked(Long userId) {
        checkIsUserExist(userId);
        checkIsUserBlocked(userId);
    }

    public void checkIsUserExist(Long userId) {
        boolean userExist = userRepository.isUserExist(userId);

        if (!userExist) {
            throw new ApiRequestException(String.format(USER_ID_NOT_FOUND, userId), HttpStatus.NOT_FOUND);
        }
    }

    public void checkIsUserBlocked(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        boolean userBlocked = blockUserRepository.isUserBlocked(userId, authUserId);

        if (userBlocked) {
            throw new ApiRequestException(USER_PROFILE_BLOCKED, HttpStatus.BAD_REQUEST);
        }
    }

    public void checkIsUserHavePrivateProfile(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();

        if (!userRepository.isUserHavePrivateProfile(userId, authUserId)) {
            throw new ApiRequestException(USER_NOT_FOUND, HttpStatus.NOT_FOUND);
        }
    }

    public boolean isUserFollowByOtherUser(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return followerUserRepository.isUserFollowByOtherUser(authUserId, userId);
    }

    public boolean isUserHavePrivateProfile(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return !userRepository.isUserHavePrivateProfile(userId, authUserId);
    }

    public boolean isUserBlockedByMyProfile(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return blockUserRepository.isUserBlocked(authUserId, userId);
    }

    public boolean isUserMutedByMyProfile(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return muteUserRepository.isUserMuted(authUserId, userId);
    }

    public boolean isMyProfileBlockedByUser(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return blockUserRepository.isUserBlocked(userId, authUserId);
    }

    public boolean isMyProfileWaitingForApprove(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return userRepository.isMyProfileWaitingForApprove(userId, authUserId);
    }

    public boolean isMyProfileSubscribed(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return userRepository.isMyProfileSubscribed(userId, authUserId);
    }

    public List<SameFollower> getSameFollowers(Long userId) {
        Long authUserId = authenticationService.getAuthenticatedUserId();
        return followerUserRepository.getSameFollowers(userId, authUserId, SameFollower.class);
    }
}
`
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "UserServiceApplication.java": {
                                "file": {
                                  "contents": `package com.gmail.merikbest2015;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

@EnableEurekaClient
@EnableFeignClients
@SpringBootApplication
public class UserServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(UserServiceApplication.class, args);
    }
}
`
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "resources": {
                "directory": {
                  "bootstrap.yml": {
                    "file": {
                      "contents": `spring:
    application:
        name: user-service
    cloud:
        config:
            uri: http://$\{CONFIG_SERVER_HOST:localhost}:8888/
`
                    }
                  },
                  "db": {
                    "directory": {
                      "migration": {
                        "directory": {
                          "user": {
                            "directory": {
                              "V15__InitDB.sql": {
                                "file": {
                                  "contents": `create sequence users_seq start 100 increment 1;

create table users
(
    id                    int8 not null,
    about                 varchar(255),
    activation_code       varchar(255),
    active                boolean default false,
    avatar                varchar(255),
    background_color      varchar(255) default 'DEFAULT',
    color_scheme          varchar(255) default 'BLUE',
    birthday              varchar(255),
    country               varchar(255),
    country_code          varchar(255),
    email                 varchar(255) unique not null,
    full_name             varchar(255) not null,
    gender                varchar(255),
    language              varchar(255),
    like_count            int8    default 0,
    location              varchar(255),
    media_tweet_count     int8    default 0,
    muted_direct_messages boolean default false,
    notifications_count   int8    default 0,
    password              varchar(255) not null,
    password_reset_code   varchar(255),
    phone                 int8,
    pinned_tweet_id       int8,
    private_profile       boolean default false,
    profile_customized    boolean default false,
    profile_started       boolean default false,
    registration_date     timestamp default current_timestamp,
    role                  varchar(255) default 'USER',
    tweet_count           int8    default 0,
    unread_messages_count int8    default 0,
    username              varchar(255) not null,
    wallpaper             varchar(255),
    website               varchar(255),
    primary key (id)
);
create table subscribers
(
    user_id       int8 not null,
    subscriber_id int8 not null
);
create table user_blocked
(
    user_id         int8 not null,
    blocked_user_id int8 not null
);
create table user_follower_requests
(
    user_id     int8 not null,
    follower_id int8 not null
);
create table user_muted
(
    user_id       int8 not null,
    muted_user_id int8 not null
);
create table user_subscriptions
(
    subscriber_id int8 not null,
    user_id       int8 not null
);
alter table subscribers
    add constraint FKh0b65sm1qah4q8iy69k8aaxij foreign key (subscriber_id) references users;
alter table subscribers
    add constraint FKll9lhik8xj3ep6ahtdt7me7pu foreign key (user_id) references users;
alter table user_blocked
    add constraint FK3ft7jt92le6bivrrwj25f87i9 foreign key (blocked_user_id) references users;
alter table user_blocked
    add constraint FK1wp478xhxe2jjsagyb0vnrixm foreign key (user_id) references users;
alter table user_follower_requests
    add constraint FKjnjcgbpbaxgnu81g9mardqve9 foreign key (follower_id) references users;
alter table user_follower_requests
    add constraint FKld8j4caa828qwhp4ca3rf4732 foreign key (user_id) references users;
alter table user_muted
    add constraint FKmfbgdwng6x29fotlaeeo5sdfq foreign key (muted_user_id) references users;
alter table user_muted
    add constraint FKe0j9buuo6ht4pphao101ne08e foreign key (user_id) references users;
alter table user_subscriptions
    add constraint FK3l40lbyji8kj5xoc20ycwsc8g foreign key (user_id) references users;
alter table user_subscriptions
    add constraint FK6dh0jqt57w1molih5xjhb8nd0 foreign key (subscriber_id) references users;
`
                                }
                              },
                              "V16__PopulateDB.sql": {
                                "file": {
                                  "contents": `-- users
INSERT INTO users (id, about, activation_code, active, background_color, birthday, color_scheme, country, country_code, email, full_name, gender, language, like_count, location, media_tweet_count, muted_direct_messages, notifications_count, password, password_reset_code, phone, private_profile, profile_customized, profile_started, registration_date, role, tweet_count, username, website, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (1, null, null, true, 'DEFAULT', null, 'BLUE', null, null, 'user2015@gmail.com', 'Random', null, null, 1, null, 0, true, 0, '$2a$08$TZekzxmq.KO2f.juYNUa4eU/ePYPx3r2MWONVjPDKOBJB4qUlhkxW', null, null, false, true, true, '2021-11-15 14:05:08.000000', 'USER', 0, 'Random', null, 1, null, 'https://perfumeweb2.s3.eu-central-1.amazonaws.com/ae83099c-885b-499a-bb6f-5e34e1b69e7d_4ec7201fd370bd9870cdb326f0511f38.jpg', 'https://perfumeweb2.s3.eu-central-1.amazonaws.com/dfc8a223-45fc-43da-8b7c-f76e2c2507cd_82ecbca14eb4999212c07257f41c70e7.jpg');
INSERT INTO users (id, about, activation_code, active, background_color, birthday, color_scheme, country, country_code, email, full_name, gender, language, like_count, location, media_tweet_count, muted_direct_messages, notifications_count, password, password_reset_code, phone, private_profile, profile_customized, profile_started, registration_date, role, tweet_count, username, website, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (2, 'Hello twitter!', null, true, 'DIM', null, 'BLUE', 'UA', 'UA', 'user2016@gmail.com', 'MrCat', 'Cat', 'Ukrainian - українська', 30, 'New York', 22, false, 0, '$2a$08$TZekzxmq.KO2f.juYNUa4eU/ePYPx3r2MWONVjPDKOBJB4qUlhkxW', null, 666966623, true, false, true, '2021-08-01 23:34:32.000000', 'USER', 4, 'Cat', 'https://www.google.com', null, null, 'https://perfumeweb2.s3.eu-central-1.amazonaws.com/348b7dbe-3ac5-477f-8483-edc24f53091b_814370.jpg', 'https://perfumeweb2.s3.eu-central-1.amazonaws.com/d0e5b95f-acc0-47ef-b499-477f7e5a1a06_PrMnWa2z.jpg');
INSERT INTO users (id, about, activation_code, active, background_color, birthday, color_scheme, country, country_code, email, full_name, gender, language, like_count, location, media_tweet_count, muted_direct_messages, notifications_count, password, password_reset_code, phone, private_profile, profile_customized, profile_started, registration_date, role, tweet_count, username, website, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (3, 'Hello twitter!', null, true, 'DEFAULT', null, 'BLUE', null, null, 'user2017@gmail.com', 'Kitty', null, null, 0, 'New York', 0, true, 2, '$2a$08$TZekzxmq.KO2f.juYNUa4eU/ePYPx3r2MWONVjPDKOBJB4qUlhkxW', null, null, false, true, true, '2021-08-01 23:34:32.000000', 'USER', 0, 'Kitty', 'https://www.google.com', null, null, 'https://perfumeweb2.s3.eu-central-1.amazonaws.com/a7e03e7c-c05f-4e30-ba8c-2271fd0b4b43_779301.jpg', null);
INSERT INTO users (id, about, activation_code, active, background_color, birthday, color_scheme, country, country_code, email, full_name, gender, language, like_count, location, media_tweet_count, muted_direct_messages, notifications_count, password, password_reset_code, phone, private_profile, profile_customized, profile_started, registration_date, role, tweet_count, username, website, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (4, 'Hello twitter!', null, true, 'DEFAULT', null, 'BLUE', null, null, 'user2019@gmail.com', 'JavaCat', null, null, 0, 'Java', 0, false, 1, '$2a$08$TZekzxmq.KO2f.juYNUa4eU/ePYPx3r2MWONVjPDKOBJB4qUlhkxW', null, null, false, true, true, '2021-08-01 23:34:32.000000', 'USER', 0, 'JavaCat', 'https://www.java.com', null, null, 'https://perfumeweb2.s3.eu-central-1.amazonaws.com/b999d944-c9ec-4a9c-b356-db937211df5c_Ec1OBK3XsAEjVZR.png', null);
INSERT INTO users (id, about, activation_code, active, background_color, birthday, color_scheme, country, country_code, email, full_name, gender, language, like_count, location, media_tweet_count, muted_direct_messages, notifications_count, password, password_reset_code, phone, private_profile, profile_customized, profile_started, registration_date, role, tweet_count, username, website, pinned_tweet_id, unread_messages_count, avatar, wallpaper) VALUES (5, 'Hello twitter!', null, true, 'DEFAULT', null, 'BLUE', null, null, 'user2018@gmail.com', 'КотБегемот', null, null, 0, 'London', 0, false, 2, '$2a$08$TZekzxmq.KO2f.juYNUa4eU/ePYPx3r2MWONVjPDKOBJB4qUlhkxW', null, null, false, true, true, '2021-08-01 23:34:32.000000', 'USER', 0, 'Кот Бегемот', 'https://www.google.com', null, null, 'https://perfumeweb2.s3.eu-central-1.amazonaws.com/68a7b0d5-2b0c-493e-85ff-098725c52ecc_Cl5DjoUWYAAslnd.jfif', null);
-- user_subscriptions
INSERT INTO user_subscriptions (subscriber_id, user_id) VALUES (1, 2);
INSERT INTO user_subscriptions (subscriber_id, user_id) VALUES (1, 3);
INSERT INTO user_subscriptions (subscriber_id, user_id) VALUES (1, 4);
INSERT INTO user_subscriptions (subscriber_id, user_id) VALUES (1, 5);
INSERT INTO user_subscriptions (subscriber_id, user_id) VALUES (2, 1);
INSERT INTO user_subscriptions (subscriber_id, user_id) VALUES (5, 1);
`
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "test": {
            "directory": {
              "java": {
                "directory": {
                  "com": {
                    "directory": {
                      "gmail": {
                        "directory": {
                          "merikbest2015": {
                            "directory": {
                              "controller": {
                                "directory": {
                                  "api": {
                                    "directory": {
                                      "AuthenticationApiControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.api;

import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import static com.gmail.merikbest2015.constants.ErrorMessage.USER_NOT_FOUND;
import static com.gmail.merikbest2015.constants.PathConstants.*;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class AuthenticationApiControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    @DisplayName("[200] GET /api/v1/auth/user/test2015@test.test - Get user principal by email")
    public void getUserPrincipalByEmail() throws Exception {
        mockMvc.perform(get(API_V1_AUTH + USER_EMAIL, "test2015@test.test")
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.email").value(TestConstants.USER_EMAIL))
                .andExpect(jsonPath("$.activationCode").isEmpty());
    }

    @Test
    @DisplayName("[404] GET /api/v1/auth/user/test9999@test.test - Should user principal Not Found by email")
    public void getUserPrincipalByEmail_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(API_V1_AUTH + USER_EMAIL, "test9999@test.test")
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(USER_NOT_FOUND)));
    }
}
`
                                        }
                                      },
                                      "UserApiControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.gmail.merikbest2015.dto.request.IdsRequest;
import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static com.gmail.merikbest2015.constants.PathConstants.*;
import static com.gmail.merikbest2015.constants.PathConstants.TWEET_COUNT;
import static com.gmail.merikbest2015.util.TestConstants.*;
import static com.gmail.merikbest2015.util.TestConstants.USERNAME;
import static com.gmail.merikbest2015.util.TestConstants.USER_EMAIL;
import static com.gmail.merikbest2015.util.TestConstants.USER_ID;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class UserApiControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper mapper;

    @Test
    @DisplayName("[200] GET /api/v1/user/ids - Get user followers ids")
    public void getUserFollowersIds() throws Exception {
        mockMvc.perform(get(API_V1_USER + IDS)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(List.of(1, 4, 2))));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/search/MrCat - Search Users By Username")
    public void searchUsersByUsername() throws Exception {
        mockMvc.perform(get(API_V1_USER + SEARCH_USERNAME, TestConstants.USERNAME)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.items[*]", hasSize(6)))
                .andExpect(jsonPath("$.items[0].fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.items[0].username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.items[0].about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.items[0].avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.items[0].isPrivateProfile").value(false))
                .andExpect(jsonPath("$.items[0].isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.items[0].isUserBlocked").value(false))
                .andExpect(jsonPath("$.items[0].isMyProfileBlocked").isNotEmpty())
                .andExpect(jsonPath("$.items[0].isWaitingForApprove").value(false))
                .andExpect(jsonPath("$.items[0].isFollower").value(false))
                .andExpect(jsonPath("$.items[0].isUserChatParticipant").value(false));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/subscribers/2 - Get subscribers by user id")
    public void getSubscribersByUserId() throws Exception {
        mockMvc.perform(get(API_V1_USER + SUBSCRIBERS_USER_ID, TestConstants.USER_ID)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(List.of(1))));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/is_followed/1 - Get is user follow by other user")
    public void isUserFollowByOtherUser() throws Exception {
        mockMvc.perform(get(API_V1_USER + IS_FOLLOWED_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(true)));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/is_private/1 - Get is user have private profile")
    public void isUserHavePrivateProfile() throws Exception {
        mockMvc.perform(get(API_V1_USER + IS_PRIVATE_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(false)));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/is_blocked/2/1 - Get is user blocked")
    public void isUserBlocked() throws Exception {
        mockMvc.perform(get(API_V1_USER + IS_BLOCKED_USER_ID, 2, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(false)));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/is_user_blocked/1 - Get is user blocked by my profile")
    public void isUserBlockedByMyProfile() throws Exception {
        mockMvc.perform(get(API_V1_USER + IS_USER_BLOCKED_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(false)));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/is_my_profile_blocked/1 - Get is my profile blocked by user")
    public void isMyProfileBlockedByUser() throws Exception {
        mockMvc.perform(get(API_V1_USER + IS_MY_PROFILE_BLOCKED_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(false)));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/notification/2 - Increase notifications count")
    public void increaseNotificationsCount() throws Exception {
        mockMvc.perform(get(API_V1_USER + NOTIFICATION_USER_ID, 2)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("[200] PUT /api/v1/user/like/count/true - Update like count")
    public void updateLikeCount() throws Exception {
        mockMvc.perform(put(API_V1_USER + LIKE_COUNT, true)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("[200] PUT /api/v1/user/tweet/count/true - Update tweet count")
    public void updateTweetCount() throws Exception {
        mockMvc.perform(put(API_V1_USER + TWEET_COUNT, true)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("[200] PUT /api/v1/user/media/count/true - Update media tweet count")
    public void updateMediaTweetCount() throws Exception {
        mockMvc.perform(put(API_V1_USER + MEDIA_COUNT, true)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/list/owner/2 - Get list owner by id")
    public void getListOwnerById() throws Exception {
        mockMvc.perform(get(API_V1_USER + LIST_OWNER_USER_ID, 2)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.isPrivateProfile").value(false));
    }

    @Test
    @DisplayName("[200] POST /api/v1/user/list/participants - Get list participants by ids")
    public void getListParticipantsByIds() throws Exception {
        mockMvc.perform(post(API_V1_USER + LIST_PARTICIPANTS)
                        .content(mapper.writeValueAsString(new IdsRequest(List.of(2L, 3L))))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(2)))
                .andExpect(jsonPath("$[0].fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$[0].username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$[0].about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$[0].avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$[0].isMemberInList").value(false))
                .andExpect(jsonPath("$[0].isPrivateProfile").value(false));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/list/participants/MrCat - Search list members by username")
    public void searchListMembersByUsername() throws Exception {
        mockMvc.perform(get(API_V1_USER + LIST_PARTICIPANTS_USERNAME, USERNAME)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(6)))
                .andExpect(jsonPath("$[0].id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$[0].fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$[0].username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$[0].about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$[0].avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$[0].isMemberInList").value(false))
                .andExpect(jsonPath("$[0].isPrivateProfile").value(false));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/notification/user/2 - Get Notification User")
    public void getNotificationUser() throws Exception {
        mockMvc.perform(get(API_V1_USER + NOTIFICATION_USER_USER_ID, TestConstants.USER_ID)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.isFollower").value(false));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/tweet/author/2 - Get tweet author")
    public void getTweetAuthor() throws Exception {
        mockMvc.perform(get(API_V1_USER + TWEET_AUTHOR_USER_ID, TestConstants.USER_ID)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.email").value(TestConstants.USER_EMAIL))
                .andExpect(jsonPath("$.fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.isPrivateProfile").value(false))
                .andExpect(jsonPath("$.isFollower").value(false))
                .andExpect(jsonPath("$.isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.isUserBlocked").value(false))
                .andExpect(jsonPath("$.isUserMuted").value(false));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/tweet/additional/info/2 - Get tweet additional info user")
    public void getTweetAdditionalInfoUser() throws Exception {
        mockMvc.perform(get(API_V1_USER + TWEET_ADDITIONAL_INFO_USER_ID, TestConstants.USER_ID)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.isFollower").value(false))
                .andExpect(jsonPath("$.isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.isUserBlocked").value(false))
                .andExpect(jsonPath("$.isUserMuted").value(false));
    }

    @Test
    @DisplayName("[200] POST /api/v1/user/tweet/liked - Get tweet liked users by ids")
    public void getTweetLikedUsersByIds() throws Exception {
        mockMvc.perform(post(API_V1_USER + TWEET_LIKED)
                        .content(mapper.writeValueAsString(new IdsRequest(List.of(2L, 3L))))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(2)))
                .andExpect(jsonPath("$.items[0].id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.items[0].fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.items[0].username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.items[0].about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.items[0].avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.items[0].isPrivateProfile").value(false))
                .andExpect(jsonPath("$.items[0].isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.items[0].isUserBlocked").value(false))
                .andExpect(jsonPath("$.items[0].isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.items[0].isWaitingForApprove").value(false))
                .andExpect(jsonPath("$.items[0].isFollower").value(false));
    }

    @Test
    @DisplayName("[200] POST /api/v1/user/tweet/retweeted - Get retweeted users by tweet id")
    public void getRetweetedUsersByTweetId() throws Exception {
        mockMvc.perform(post(API_V1_USER + TWEET_RETWEETED)
                        .content(mapper.writeValueAsString(new IdsRequest(List.of(2L, 3L))))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(2)))
                .andExpect(jsonPath("$.items[0].id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.items[0].fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.items[0].username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.items[0].about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.items[0].avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.items[0].isPrivateProfile").value(false))
                .andExpect(jsonPath("$.items[0].isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.items[0].isUserBlocked").value(false))
                .andExpect(jsonPath("$.items[0].isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.items[0].isWaitingForApprove").value(false))
                .andExpect(jsonPath("$.items[0].isFollower").value(false));
    }

    @Test
    @DisplayName("[200] PUT /api/v1/user/tweet/pinned/99 - Update pinned tweet id")
    public void updatePinnedTweetId() throws Exception {
        mockMvc.perform(put(API_V1_USER + TWEET_PINNED_TWEET_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/tweet/pinned/2 - Get user pinned tweet id")
    public void getUserPinnedTweetId() throws Exception {
        mockMvc.perform(get(API_V1_USER + TWEET_PINNED_USER_ID, 2)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(40)));
    }

    @Test
    @DisplayName("[200] POST /api/v1/user/tweet/valid/ids/MrCat - Get valid tweet user ids")
    public void getValidTweetUserIds() throws Exception {
        mockMvc.perform(post(API_V1_USER + TWEET_VALID_IDS, USERNAME)
                        .content(mapper.writeValueAsString(new IdsRequest(List.of(2L, 3L))))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(List.of(2, 4, 6, 7))));
    }

    @Test
    @DisplayName("[200] POST /api/v1/user/valid/ids - Get valid ids")
    public void getValidUserIds() throws Exception {
        mockMvc.perform(post(API_V1_USER + VALID_IDS)
                        .content(mapper.writeValueAsString(new IdsRequest(List.of(2L, 3L))))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(List.of(2))));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/chat/participant/3 - Get chat participant")
    public void getChatParticipant() throws Exception {
        mockMvc.perform(get(API_V1_USER + CHAT_PARTICIPANT_USER_ID, 3)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(3))
                .andExpect(jsonPath("$.fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.isUserBlocked").value(false))
                .andExpect(jsonPath("$.isMyProfileBlocked").value(false));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/is_exists/1 - Is user exists")
    public void isUserExists() throws Exception {
        mockMvc.perform(get(API_V1_USER + IS_EXISTS_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(true)));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/2 - Get user by id")
    public void getUserById() throws Exception {
        mockMvc.perform(get(API_V1_USER + "/2")
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.isPrivateProfile").value(false))
                .andExpect(jsonPath("$.isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.isUserBlocked").value(false))
                .andExpect(jsonPath("$.isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.isWaitingForApprove").value(false))
                .andExpect(jsonPath("$.isFollower").value(false));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/chat/2 - Get chat tweet user")
    public void getChatTweetUser() throws Exception {
        mockMvc.perform(get(API_V1_USER + CHAT_USER_ID, TestConstants.USER_ID)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1));
    }

    @Test
    @DisplayName("[200] POST /api/v1/user/chat/valid/ids - Validate chat users ids")
    public void validateChatUsersIds() throws Exception {
        mockMvc.perform(post(API_V1_USER + CHAT_VALID_IDS)
                        .content(mapper.writeValueAsString(new IdsRequest(List.of(2L, 3L))))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(List.of(2, 3))));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/subscribers - Get users which user subscribed")
    public void getUsersWhichUserSubscribed() throws Exception {
        mockMvc.perform(get(API_V1_USER + SUBSCRIBERS)
                        .header(AUTH_USER_ID_HEADER, 1L))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(1)))
                .andExpect(jsonPath("$[0].id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$[0].username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$[0].avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$[0].isFollower").value(false));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/subscribers/ids - Get user id which user subscribed")
    public void getUserIdsWhichUserSubscribed() throws Exception {
        mockMvc.perform(get(API_V1_USER + SUBSCRIBERS_IDS)
                        .header(AUTH_USER_ID_HEADER, 1L))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(List.of(2))));
    }

    @Test
    @DisplayName("[200] GET /api/v1/user/notification/reset - Reset notification count")
    public void resetNotificationCount() throws Exception {
        mockMvc.perform(get(API_V1_USER + NOTIFICATION_RESET)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk());
    }
}
`
                                        }
                                      }
                                    }
                                  },
                                  "rest": {
                                    "directory": {
                                      "AuthenticationControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.gmail.merikbest2015.dto.request.*;
import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;
import static com.gmail.merikbest2015.constants.PathConstants.*;
import static com.gmail.merikbest2015.util.TestConstants.*;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class AuthenticationControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper mapper;

    private AuthenticationRequest authenticationRequest;

    @BeforeEach
    public void init() {
        authenticationRequest = new AuthenticationRequest();
        authenticationRequest.setEmail(TestConstants.USER_EMAIL);
    }

    @Test
    @DisplayName("[200] POST /ui/v1/auth/login - Login")
    public void login() throws Exception {
        authenticationRequest.setPassword(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + LOGIN)
                        .content(mapper.writeValueAsString(authenticationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/login - Should Email not valid")
    public void login_ShouldEmailNotValid() throws Exception {
        authenticationRequest.setEmail("notvalidemail@test");
        authenticationRequest.setPassword(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + LOGIN)
                        .content(mapper.writeValueAsString(authenticationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.email", is(EMAIL_NOT_VALID)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/login - Should password is empty")
    public void login_ShouldPasswordIsEmpty() throws Exception {
        authenticationRequest.setPassword(null);
        mockMvc.perform(post(UI_V1_AUTH + LOGIN)
                        .content(mapper.writeValueAsString(authenticationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(EMPTY_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/login - Should password less then 8 characters")
    public void login_ShouldPasswordLessThen8Characters() throws Exception {
        authenticationRequest.setPassword("test123");
        mockMvc.perform(post(UI_V1_AUTH + LOGIN)
                        .content(mapper.writeValueAsString(authenticationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(SHORT_PASSWORD)));
    }

    @Test
    @DisplayName("[200] POST /ui/v1/auth/forgot/email - Find existing email")
    public void findExistingEmail() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail(TestConstants.USER_EMAIL);
        mockMvc.perform(post(UI_V1_AUTH + FORGOT_EMAIL)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("Reset password code is send to your E-mail")));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/forgot/email - Should email not valid")
    public void findExistingEmail_ShouldEmailNotValid() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail("test2015@test");
        mockMvc.perform(post(UI_V1_AUTH + FORGOT_EMAIL)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.email", is(EMAIL_NOT_VALID)));
    }

    @Test
    @DisplayName("[404] POST /ui/v1/auth/forgot/email - Email not found")
    public void findExistingEmail_EmailNotFound() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail(TestConstants.NOT_VALID_EMAIL);
        mockMvc.perform(post(UI_V1_AUTH + FORGOT_EMAIL)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(EMAIL_NOT_FOUND)));
    }

    @Test
    @DisplayName("[200] POST /ui/v1/auth/forgot - Send password reset code")
    public void sendPasswordResetCode() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail(TestConstants.USER_EMAIL);
        mockMvc.perform(post(UI_V1_AUTH + FORGOT)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("Reset password code is send to your E-mail")));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/forgot - Should email not valid")
    public void sendPasswordResetCode_ShouldEmailNotValid() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail("test2015@test");
        mockMvc.perform(post(UI_V1_AUTH + FORGOT)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.email", is(EMAIL_NOT_VALID)));
    }

    @Test
    @DisplayName("[404] POST /ui/v1/auth/forgot - Should email Not Found")
    public void sendPasswordResetCode_ShouldEmailNotFound() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail(TestConstants.NOT_VALID_EMAIL);
        mockMvc.perform(post(UI_V1_AUTH + FORGOT)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(EMAIL_NOT_FOUND)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/auth/reset/1234567890 - Get user by reset code")
    public void getUserByResetCode() throws Exception {
        mockMvc.perform(get(UI_V1_AUTH + RESET_CODE, 1234567890))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(3))
                .andExpect(jsonPath("$.email").value("test2016@test.test"))
                .andExpect(jsonPath("$.fullName").value(TestConstants.FULL_NAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.location").value(TestConstants.LOCATION))
                .andExpect(jsonPath("$.about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.website").value(TestConstants.WEBSITE))
                .andExpect(jsonPath("$.birthday").value(TestConstants.BIRTHDAY))
                .andExpect(jsonPath("$.registrationDate").value(REGISTRATION_DATE))
                .andExpect(jsonPath("$.tweetCount").value(TestConstants.TWEET_COUNT))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.wallpaper").value(TestConstants.WALLPAPER_SRC))
                .andExpect(jsonPath("$.profileCustomized").value(true))
                .andExpect(jsonPath("$.profileStarted").value(true));
    }

    @Test
    @DisplayName("[400] GET /ui/v1/auth/reset/test123 - Get user by reset code bad request")
    public void getUserByResetCode_BadRequest() throws Exception {
        mockMvc.perform(get(UI_V1_AUTH + RESET_CODE, "test123"))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INVALID_PASSWORD_RESET_CODE)));
    }

    @Test
    @DisplayName("[200] POST /ui/v1/auth/reset - Reset password")
    public void passwordReset() throws Exception {
        PasswordResetRequest passwordResetRequest = new PasswordResetRequest();
        passwordResetRequest.setEmail(TestConstants.USER_EMAIL);
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("Password successfully changed!")));
    }

    @Test
    @DisplayName("[404] POST /ui/v1/auth/reset - Should user Not Found by email")
    public void passwordReset_ShouldUserNotFoundByEmail() throws Exception {
        PasswordResetRequest passwordResetRequest = new PasswordResetRequest();
        passwordResetRequest.setEmail(TestConstants.NOT_VALID_EMAIL);
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.email", is(EMAIL_NOT_FOUND)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset - Should Email not valid")
    public void passwordReset_ShouldEmailNotValid() throws Exception {
        PasswordResetRequest passwordResetRequest = new PasswordResetRequest();
        passwordResetRequest.setEmail("notvalidemail@test");
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.email", is(EMAIL_NOT_VALID)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset - Should password be empty")
    public void passwordReset_ShouldPasswordBeEmpty() throws Exception {
        PasswordResetRequest passwordResetRequest = new PasswordResetRequest();
        passwordResetRequest.setEmail(TestConstants.USER_EMAIL);
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(EMPTY_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset - Should password2 be empty")
    public void passwordReset_ShouldPassword2BeEmpty() throws Exception {
        PasswordResetRequest passwordResetRequest = new PasswordResetRequest();
        passwordResetRequest.setEmail(TestConstants.USER_EMAIL);
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password2", is(EMPTY_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset - Should password less then 8 characters")
    public void passwordReset_ShouldPasswordLessThen8Characters() throws Exception {
        PasswordResetRequest passwordResetRequest = new PasswordResetRequest();
        passwordResetRequest.setEmail(TestConstants.USER_EMAIL);
        passwordResetRequest.setPassword("qwerty");
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(SHORT_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset - Should password2 less then 8 characters")
    public void passwordReset_ShouldPassword2LessThen8Characters() throws Exception {
        PasswordResetRequest passwordResetRequest = new PasswordResetRequest();
        passwordResetRequest.setEmail(TestConstants.USER_EMAIL);
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2("qwerty");
        mockMvc.perform(post(UI_V1_AUTH + RESET)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password2", is(SHORT_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset - Should passwords not match")
    public void passwordReset_ShouldPasswordsNotMatch() throws Exception {
        PasswordResetRequest passwordResetRequest = new PasswordResetRequest();
        passwordResetRequest.setEmail(TestConstants.USER_EMAIL);
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2("test1234");
        mockMvc.perform(post(UI_V1_AUTH + RESET)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(PASSWORDS_NOT_MATCH)));
    }

    @Test
    @DisplayName("[200] POST /ui/v1/auth/reset/current - Current Password Reset")
    public void currentPasswordReset() throws Exception {
        CurrentPasswordResetRequest passwordResetRequest = new CurrentPasswordResetRequest();
        passwordResetRequest.setCurrentPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);

        mockMvc.perform(post(UI_V1_AUTH + RESET_CURRENT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("Your password has been successfully updated.")));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset/current - Should current password is empty")
    public void currentPasswordReset_ShouldCurrentPasswordIsEmpty() throws Exception {
        CurrentPasswordResetRequest passwordResetRequest = new CurrentPasswordResetRequest();
        passwordResetRequest.setCurrentPassword("");
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET_CURRENT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.currentPassword", is(EMPTY_CURRENT_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset/current - Should password is empty")
    public void currentPasswordReset_ShouldPasswordIsEmpty() throws Exception {
        CurrentPasswordResetRequest passwordResetRequest = new CurrentPasswordResetRequest();
        passwordResetRequest.setCurrentPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword(null);
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET_CURRENT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(EMPTY_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset/current - Should password2 is empty")
    public void currentPasswordReset_ShouldPassword2IsEmpty() throws Exception {
        CurrentPasswordResetRequest passwordResetRequest = new CurrentPasswordResetRequest();
        passwordResetRequest.setCurrentPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2(null);
        mockMvc.perform(post(UI_V1_AUTH + RESET_CURRENT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password2", is(EMPTY_PASSWORD_CONFIRMATION)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset/current - Should password less then 8 characters")
    public void currentPasswordReset_ShouldPasswordLessThen8Characters() throws Exception {
        CurrentPasswordResetRequest passwordResetRequest = new CurrentPasswordResetRequest();
        passwordResetRequest.setCurrentPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword("test");
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET_CURRENT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(SHORT_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset/current - Should password2 less then 8 characters")
    public void currentPasswordReset_ShouldPassword2LessThen8Characters() throws Exception {
        CurrentPasswordResetRequest passwordResetRequest = new CurrentPasswordResetRequest();
        passwordResetRequest.setCurrentPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2("test");
        mockMvc.perform(post(UI_V1_AUTH + RESET_CURRENT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password2", is(SHORT_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset/current - Should current password reset not found")
    public void currentPasswordReset_ShouldCurrentPasswordResetNotFound() throws Exception {
        CurrentPasswordResetRequest passwordResetRequest = new CurrentPasswordResetRequest();
        passwordResetRequest.setCurrentPassword("qwerty123456");
        passwordResetRequest.setPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET_CURRENT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.currentPassword", is(INCORRECT_PASSWORD)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/reset/current - Should passwords not match")
    public void currentPasswordReset_ShouldPasswordsNotMatch() throws Exception {
        CurrentPasswordResetRequest passwordResetRequest = new CurrentPasswordResetRequest();
        passwordResetRequest.setCurrentPassword(TestConstants.PASSWORD);
        passwordResetRequest.setPassword("qwerty123456");
        passwordResetRequest.setPassword2(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + RESET_CURRENT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID)
                        .content(mapper.writeValueAsString(passwordResetRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(PASSWORDS_NOT_MATCH)));
    }
}
`
                                        }
                                      },
                                      "BlockUserControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import static com.gmail.merikbest2015.constants.ErrorMessage.USER_ID_NOT_FOUND;
import static com.gmail.merikbest2015.constants.PathConstants.*;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class BlockUserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    @DisplayName("[200] GET /ui/v1/user/blocked - Get blocked users")
    public void getBlockList() throws Exception {
        mockMvc.perform(get(UI_V1_USER + BLOCKED)
                .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(1)))
                .andExpect(jsonPath("$[0].id").value(4L))
                .andExpect(jsonPath("$[0].fullName").value(TestConstants.FULL_NAME))
                .andExpect(jsonPath("$[0].username").value(TestConstants.FULL_NAME))
                .andExpect(jsonPath("$[0].about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$[0].avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$[0].isPrivateProfile").value(true))
                .andExpect(jsonPath("$[0].isUserBlocked").value(true));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/blocked/3 - Add user to block list by id")
    public void addToBlockList() throws Exception {
        mockMvc.perform(get(UI_V1_USER + BLOCKED_USER_ID, 3)
                .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(true)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/blocked/4 - Remove user from block list by id")
    public void removeFromBlockList() throws Exception {
        mockMvc.perform(get(UI_V1_USER + BLOCKED_USER_ID,4)
                .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(false)));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/blocked/99 - Should user Not Found by id")
    public void processBlockList_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + BLOCKED_USER_ID, 99)
                .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }
}
`
                                        }
                                      },
                                      "FollowerUserControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;
import static com.gmail.merikbest2015.constants.PathConstants.*;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class FollowerUserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    @DisplayName("[200] GET /ui/v1/user/followers/1 - Get followers by user id")
    public void getFollowers() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWERS_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(2)))
                .andExpect(jsonPath("$[*].id").isNotEmpty())
                .andExpect(jsonPath("$[*].fullName").isNotEmpty())
                .andExpect(jsonPath("$[*].username").isNotEmpty())
                .andExpect(jsonPath("$[*].about").isNotEmpty())
                .andExpect(jsonPath("$[*].isPrivateProfile").isNotEmpty())
                .andExpect(jsonPath("$[*].isMutedDirectMessages").isNotEmpty())
                .andExpect(jsonPath("$[*].isUserBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isMyProfileBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isWaitingForApprove").isNotEmpty())
                .andExpect(jsonPath("$[*].isFollower").isNotEmpty());
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/followers/99 - Should user Not Found by id")
    public void getFollowers_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWERS_USER_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/followers/3 - Should user have private profile")
    public void getFollowers_ShouldUserHavePrivateProfile() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWERS_USER_ID, 3)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(USER_NOT_FOUND)));
    }

    @Test
    @DisplayName("[400] GET /ui/v1/user/followers/5 - Should user blocked by other user")
    public void getFollowers_ShouldUserBlockedByOtherUser() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWERS_USER_ID, 5)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(USER_PROFILE_BLOCKED)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/following/4 - Get following by user id")
    public void getFollowing() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWING_USER_ID, 4)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(2)))
                .andExpect(jsonPath("$[*].id").isNotEmpty())
                .andExpect(jsonPath("$[*].fullName").isNotEmpty())
                .andExpect(jsonPath("$[*].username").isNotEmpty())
                .andExpect(jsonPath("$[*].about").isNotEmpty())
                .andExpect(jsonPath("$[*].isPrivateProfile").isNotEmpty())
                .andExpect(jsonPath("$[*].isMutedDirectMessages").isNotEmpty())
                .andExpect(jsonPath("$[*].isUserBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isMyProfileBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isWaitingForApprove").isNotEmpty())
                .andExpect(jsonPath("$[*].isFollower").isNotEmpty());
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/following/99 - Should user Not Found by id")
    public void getFollowing_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWING_USER_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/following/3 -  Should user have private profile")
    public void getFollowing_ShouldUserHavePrivateProfile() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWING_USER_ID, 3)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(USER_NOT_FOUND)));
    }

    @Test
    @DisplayName("[400] GET /ui/v1/user/following/6 - Should user blocked by other user")
    public void getFollowing_ShouldUserBlockedByOtherUser() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWING_USER_ID, 6)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(USER_PROFILE_BLOCKED)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follower-requests - Follow user by id")
    public void getFollowerRequests() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOWER_REQUESTS)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(1)))
                .andExpect(jsonPath("$[0].id").value(7L))
                .andExpect(jsonPath("$[0].fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$[0].username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$[0].about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$[0].avatar").value(TestConstants.AVATAR_SRC_1));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/7 - Follow user by id")
    public void processFollow() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_USER_ID, 7)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").value(true));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/1 - Unfollow user by id")
    public void processUnfollow() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").value(false));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/3 - Follow to user private profile by id")
    public void processFollowToPrivateProfile() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_USER_ID, 3)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").value(false));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/follow/99 - Should user Not Found by id")
    public void processFollow_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_USER_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }

    @Test
    @DisplayName("[400] GET /ui/v1/user/follow/6 - Should user blocked by other user")
    public void processFollow_ShouldUserBlockedByOtherUser() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_USER_ID, 6)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(USER_PROFILE_BLOCKED)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/overall/1 - Get overall followers if exist")
    public void overallFollowers_exist() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_OVERALL, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(1)))
                .andExpect(jsonPath("$[*].id").isNotEmpty())
                .andExpect(jsonPath("$[*].fullName").isNotEmpty())
                .andExpect(jsonPath("$[*].username").isNotEmpty())
                .andExpect(jsonPath("$[*].about").isNotEmpty())
                .andExpect(jsonPath("$[*].isPrivateProfile").isNotEmpty())
                .andExpect(jsonPath("$[*].isMutedDirectMessages").isNotEmpty())
                .andExpect(jsonPath("$[*].isUserBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isMyProfileBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isWaitingForApprove").isNotEmpty())
                .andExpect(jsonPath("$[*].isFollower").isNotEmpty());
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/overall/7 - Get overall followers if not exist")
    public void overallFollowers_NotExist() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_OVERALL, 7)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(0)));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/follow/overall/99 - Should user Not Found by id")
    public void overallFollowers_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_OVERALL, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/follow/overall/3 - Should user have private profile")
    public void overallFollowers_ShouldUserHavePrivateProfile() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_OVERALL, 3)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(USER_NOT_FOUND)));
    }

    @Test
    @DisplayName("[400] GET /ui/v1/user/follow/overall/6 - Should user blocked by other user")
    public void overallFollowers_ShouldUserBlockedByOtherUser() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_OVERALL, 6)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(USER_PROFILE_BLOCKED)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/private/4 - Follow request from private profile")
    public void followRequestToPrivateProfile() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_PRIVATE, 4)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(4L))
                .andExpect(jsonPath("$.fullName").value(TestConstants.FULL_NAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.location").value(TestConstants.LOCATION))
                .andExpect(jsonPath("$.about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.website").value(TestConstants.WEBSITE))
                .andExpect(jsonPath("$.country").value(TestConstants.COUNTRY))
                .andExpect(jsonPath("$.birthday").value(TestConstants.BIRTHDAY))
                .andExpect(jsonPath("$.registrationDate").value(TestConstants.REGISTRATION_DATE))
                .andExpect(jsonPath("$.tweetCount").value(TestConstants.TWEET_COUNT))
                .andExpect(jsonPath("$.mediaTweetCount").value(TestConstants.MEDIA_TWEET_COUNT))
                .andExpect(jsonPath("$.likeCount").value(TestConstants.LIKE_TWEET_COUNT))
                .andExpect(jsonPath("$.notificationsCount").value(3))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.wallpaper").value(TestConstants.WALLPAPER_SRC))
                .andExpect(jsonPath("$.pinnedTweetId").isEmpty())
                .andExpect(jsonPath("$.followersSize").value(0L))
                .andExpect(jsonPath("$.followingSize").value(2L))
                .andExpect(jsonPath("$.sameFollowers[*]", hasSize(0)))
                .andExpect(jsonPath("$.isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.isPrivateProfile").value(true))
                .andExpect(jsonPath("$.isUserMuted").value(false))
                .andExpect(jsonPath("$.isUserBlocked").value(true))
                .andExpect(jsonPath("$.isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.isWaitingForApprove").value(false))
                .andExpect(jsonPath("$.isFollower").value(true))
                .andExpect(jsonPath("$.isSubscriber").value(false));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/private/7 - Unfollow request to private profile")
    public void unfollowRequestToPrivateProfile() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_PRIVATE, 7)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(7L))
                .andExpect(jsonPath("$.fullName").value(TestConstants.FULL_NAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.location").value(TestConstants.LOCATION))
                .andExpect(jsonPath("$.about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.website").value(TestConstants.WEBSITE))
                .andExpect(jsonPath("$.country").value(TestConstants.COUNTRY))
                .andExpect(jsonPath("$.birthday").value(TestConstants.BIRTHDAY))
                .andExpect(jsonPath("$.registrationDate").value(TestConstants.REGISTRATION_DATE))
                .andExpect(jsonPath("$.tweetCount").value(TestConstants.TWEET_COUNT))
                .andExpect(jsonPath("$.mediaTweetCount").value(TestConstants.MEDIA_TWEET_COUNT))
                .andExpect(jsonPath("$.likeCount").value(TestConstants.LIKE_TWEET_COUNT))
                .andExpect(jsonPath("$.notificationsCount").value(3))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.wallpaper").value(TestConstants.WALLPAPER_SRC))
                .andExpect(jsonPath("$.pinnedTweetId").isEmpty())
                .andExpect(jsonPath("$.followersSize").value(0L))
                .andExpect(jsonPath("$.followingSize").value(0L))
                .andExpect(jsonPath("$.sameFollowers[*]", hasSize(0)))
                .andExpect(jsonPath("$.isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.isPrivateProfile").value(false))
                .andExpect(jsonPath("$.isUserMuted").value(false))
                .andExpect(jsonPath("$.isUserBlocked").value(false))
                .andExpect(jsonPath("$.isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.isWaitingForApprove").value(false))
                .andExpect(jsonPath("$.isFollower").value(false))
                .andExpect(jsonPath("$.isSubscriber").value(false));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/follow/private/99 - Should user Not Found by id")
    public void processFollowRequestToPrivateProfile_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_PRIVATE, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }

    @Test
    @DisplayName("[400] GET /ui/v1/user/follow/private/6 -  Should user blocked by other user")
    public void processFollowRequestToPrivateProfile_ShouldUserBlockedByOtherUser() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_PRIVATE, 6)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(USER_PROFILE_BLOCKED)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/accept/2 - Accept follow request")
    public void acceptFollowRequest() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_ACCEPT, 2)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").value("User (id:2) accepted."));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/follow/accept/99 - Should user Not Found by id")
    public void acceptFollowRequest_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_ACCEPT, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/follow/decline/2 - Decline follow request")
    public void declineFollowRequest() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_DECLINE, 2)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").value("User (id:2) declined."));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/follow/decline/99 - Should user Not Found by id")
    public void declineFollowRequest_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + FOLLOW_DECLINE, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }
}
`
                                        }
                                      },
                                      "MuteUserControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import static com.gmail.merikbest2015.constants.ErrorMessage.USER_ID_NOT_FOUND;
import static com.gmail.merikbest2015.constants.PathConstants.*;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class MuteUserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    @DisplayName("[200] GET /ui/v1/user/muted - Get muted list")
    public void getMutedList() throws Exception {
        mockMvc.perform(get(UI_V1_USER + MUTED)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(1)))
                .andExpect(jsonPath("$[0].id").value(1L))
                .andExpect(jsonPath("$[0].fullName").value(TestConstants.USERNAME2))
                .andExpect(jsonPath("$[0].username").value(TestConstants.USERNAME2))
                .andExpect(jsonPath("$[0].about").value(TestConstants.ABOUT2))
                .andExpect(jsonPath("$[0].avatar").value(TestConstants.AVATAR_SRC_2))
                .andExpect(jsonPath("$[0].isPrivateProfile").value(false))
                .andExpect(jsonPath("$[0].isUserMuted").value(true));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/muted/3 - Mute user by id")
    public void addToMutedList() throws Exception {
        mockMvc.perform(get(UI_V1_USER + MUTED_USER_ID, 3)
                    .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(true)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/muted/1 - Unmute user by id")
    public void removeFromMutedList() throws Exception {
        mockMvc.perform(get(UI_V1_USER + MUTED_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(false)));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/muted/99 - Should user Not Found by id")
    public void addToMutedList_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + MUTED_USER_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }
}
`
                                        }
                                      },
                                      "RegistrationControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.gmail.merikbest2015.dto.request.AuthenticationRequest;
import com.gmail.merikbest2015.dto.request.ProcessEmailRequest;
import com.gmail.merikbest2015.dto.request.RegistrationRequest;
import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;
import static com.gmail.merikbest2015.constants.ErrorMessage.USER_NOT_FOUND;
import static com.gmail.merikbest2015.constants.PathConstants.*;
import static com.gmail.merikbest2015.util.TestConstants.REGISTRATION_DATE;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class RegistrationControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper mapper;

    private AuthenticationRequest authenticationRequest;
    private RegistrationRequest registrationRequest;

    @BeforeEach
    public void init() {
        authenticationRequest = new AuthenticationRequest();
        authenticationRequest.setEmail(TestConstants.USER_EMAIL);

        registrationRequest = new RegistrationRequest();
        registrationRequest.setEmail("testtest@test.com");
        registrationRequest.setUsername("testtest");
        registrationRequest.setBirthday(TestConstants.BIRTHDAY);
    }

    @Test
    @DisplayName("[200] POST /ui/v1/auth/registration/check - Check Email")
    public void checkEmail() throws Exception {
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CHECK)
                        .content(mapper.writeValueAsString(registrationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("User data checked.")));
    }

    @Test
    @DisplayName("[403] POST /ui/v1/auth/registration/check - Should user email is exist")
    public void checkEmail_ShouldUserEmailIsExist() throws Exception {
        registrationRequest.setEmail(TestConstants.USER_EMAIL);
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CHECK)
                        .content(mapper.writeValueAsString(registrationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isForbidden())
                .andExpect(jsonPath("$", is(EMAIL_HAS_ALREADY_BEEN_TAKEN)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/registration/check - Should email not valid")
    public void checkEmail_ShouldEmailNotValid() throws Exception {
        registrationRequest.setEmail("test2015@test");
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CHECK)
                        .content(mapper.writeValueAsString(registrationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.email", is(EMAIL_NOT_VALID)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/registration/check - Should username is empty")
    public void checkEmail_ShouldUsernameIsEmpty() throws Exception {
        registrationRequest.setUsername(null);
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CHECK)
                        .content(mapper.writeValueAsString(registrationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.username", is(BLANK_NAME)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/registration/check - Should username more then 50 characters")
    public void checkEmail_ShouldUsernameMoreThen50Characters() throws Exception {
        registrationRequest.setUsername("qwertqwertqwertqwertqwertqwertqwertqwertqwertqwert123");
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CHECK)
                        .content(mapper.writeValueAsString(registrationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.username", is(NAME_NOT_VALID)));
    }

    @Test
    @DisplayName("[200] POST /ui/v1/auth/registration/code - Send registration code")
    public void sendRegistrationCode() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail(TestConstants.USER_EMAIL);
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CODE)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("Registration code sent successfully")));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/registration/code - Should email not valid")
    public void sendRegistrationCode_ShouldEmailNotValid() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail("test2015@test");
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CODE)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.email", is(EMAIL_NOT_VALID)));
    }

    @Test
    @DisplayName("[404] POST /ui/v1/auth/registration/code - User not found")
    public void sendRegistrationCode_ShouldUserNotFound() throws Exception {
        ProcessEmailRequest request = new ProcessEmailRequest();
        request.setEmail(TestConstants.NOT_VALID_EMAIL);
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CODE)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(USER_NOT_FOUND)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/auth/registration/activate/1234567890 - Check registration code")
    public void checkRegistrationCode() throws Exception {
        mockMvc.perform(get(UI_V1_AUTH + REGISTRATION_ACTIVATE_CODE, 1234567890))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("User successfully activated.")));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/auth/registration/activate/test - Registration code not found")
    public void checkRegistrationCode_NotFound() throws Exception {
        mockMvc.perform(get(UI_V1_AUTH + REGISTRATION_ACTIVATE_CODE, "test"))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(ACTIVATION_CODE_NOT_FOUND)));
    }

    @Test
    @DisplayName("[200] POST /ui/v1/auth/registration/confirm - End registration")
    public void endRegistration() throws Exception {
        authenticationRequest.setPassword(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CONFIRM)
                        .content(mapper.writeValueAsString(authenticationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.user.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.user.email").value(TestConstants.USER_EMAIL))
                .andExpect(jsonPath("$.user.fullName").value(TestConstants.FULL_NAME))
                .andExpect(jsonPath("$.user.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.user.location").value(TestConstants.LOCATION))
                .andExpect(jsonPath("$.user.about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.user.website").value(TestConstants.WEBSITE))
                .andExpect(jsonPath("$.user.birthday").value(TestConstants.BIRTHDAY))
                .andExpect(jsonPath("$.user.registrationDate").value(REGISTRATION_DATE))
                .andExpect(jsonPath("$.user.tweetCount").value(TestConstants.TWEET_COUNT))
                .andExpect(jsonPath("$.user.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.user.wallpaper").value(TestConstants.WALLPAPER_SRC))
                .andExpect(jsonPath("$.user.profileCustomized").value(true))
                .andExpect(jsonPath("$.user.profileStarted").value(true));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/registration/confirm - Should email not valid")
    public void endRegistration_ShouldEmailNotValid() throws Exception {
        authenticationRequest.setEmail("test2015@test");
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CONFIRM)
                        .content(mapper.writeValueAsString(authenticationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.email", is(EMAIL_NOT_VALID)));
    }

    @Test
    @DisplayName("[400] POST /ui/v1/auth/registration/confirm - Should short password")
    public void endRegistration_ShouldShortPassword() throws Exception {
        authenticationRequest.setPassword("123");
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CONFIRM)
                        .content(mapper.writeValueAsString(authenticationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.password", is(SHORT_PASSWORD)));
    }

    @Test
    @DisplayName("[404] POST /ui/v1/auth/registration/confirm - Should user Not Found by email")
    public void endRegistration_ShouldUserNotFound() throws Exception {
        authenticationRequest.setEmail(TestConstants.NOT_VALID_EMAIL);
        authenticationRequest.setPassword(TestConstants.PASSWORD);
        mockMvc.perform(post(UI_V1_AUTH + REGISTRATION_CONFIRM)
                        .content(mapper.writeValueAsString(authenticationRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(USER_NOT_FOUND)));
    }
}
`
                                        }
                                      },
                                      "UserControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.gmail.merikbest2015.dto.request.UserRequest;
import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;
import static com.gmail.merikbest2015.constants.PathConstants.*;
import static com.gmail.merikbest2015.constants.PathConstants.USER_ID;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper mapper;

    @Test
    @DisplayName("[200] GET /ui/v1/user/token - Get user by token")
    public void getUserByToken() throws Exception {
        mockMvc.perform(get(UI_V1_USER + TOKEN)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.user.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.user.email").value(TestConstants.USER_EMAIL))
                .andExpect(jsonPath("$.user.fullName").value(TestConstants.FULL_NAME))
                .andExpect(jsonPath("$.user.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.user.location").value(TestConstants.LOCATION))
                .andExpect(jsonPath("$.user.about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.user.website").value(TestConstants.WEBSITE))
                .andExpect(jsonPath("$.user.birthday").value(TestConstants.BIRTHDAY))
                .andExpect(jsonPath("$.user.registrationDate").value(TestConstants.REGISTRATION_DATE))
                .andExpect(jsonPath("$.user.tweetCount").value(TestConstants.TWEET_COUNT))
                .andExpect(jsonPath("$.user.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.user.wallpaper").value(TestConstants.WALLPAPER_SRC))
                .andExpect(jsonPath("$.user.profileCustomized").value(true))
                .andExpect(jsonPath("$.user.profileStarted").value(true));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/1 - Get user by id")
    public void getUserById() throws Exception {
        mockMvc.perform(get(UI_V1_USER + USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.fullName").value(TestConstants.USERNAME2))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME2))
                .andExpect(jsonPath("$.location").value("Kyiv"))
                .andExpect(jsonPath("$.about").value(TestConstants.ABOUT2))
                .andExpect(jsonPath("$.website").value(TestConstants.WEBSITE))
                .andExpect(jsonPath("$.country").value(TestConstants.COUNTRY))
                .andExpect(jsonPath("$.birthday").isEmpty())
                .andExpect(jsonPath("$.registrationDate").value(TestConstants.REGISTRATION_DATE))
                .andExpect(jsonPath("$.tweetCount").value(TestConstants.TWEET_COUNT))
                .andExpect(jsonPath("$.mediaTweetCount").value(TestConstants.MEDIA_TWEET_COUNT))
                .andExpect(jsonPath("$.likeCount").value(TestConstants.LIKE_TWEET_COUNT))
                .andExpect(jsonPath("$.notificationsCount").value(0))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_2))
                .andExpect(jsonPath("$.pinnedTweetId").isEmpty())
                .andExpect(jsonPath("$.followersSize").value(2L))
                .andExpect(jsonPath("$.followingSize").value(1L))
                .andExpect(jsonPath("$.sameFollowers[*]", hasSize(1)))
                .andExpect(jsonPath("$.isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.isPrivateProfile").value(false))
                .andExpect(jsonPath("$.isUserMuted").value(true))
                .andExpect(jsonPath("$.isUserBlocked").value(false))
                .andExpect(jsonPath("$.isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.isWaitingForApprove").value(false))
                .andExpect(jsonPath("$.isFollower").value(true))
                .andExpect(jsonPath("$.isSubscriber").value(false));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/99 - Should user Not Found by id")
    public void getUserById_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + USER_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(USER_NOT_FOUND)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/all - Get users")
    public void getUsers() throws Exception {
        mockMvc.perform(get(UI_V1_USER + ALL)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(6)))
                .andExpect(jsonPath("$[*].id").isNotEmpty())
                .andExpect(jsonPath("$[*].fullName").isNotEmpty())
                .andExpect(jsonPath("$[*].username").isNotEmpty())
                .andExpect(jsonPath("$[*].about").isNotEmpty())
                .andExpect(jsonPath("$[*].isPrivateProfile").isNotEmpty())
                .andExpect(jsonPath("$[*].isMutedDirectMessages").isNotEmpty())
                .andExpect(jsonPath("$[*].isUserBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isMyProfileBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isWaitingForApprove").isNotEmpty())
                .andExpect(jsonPath("$[*].isFollower").isNotEmpty());
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/relevant - Get relevant users")
    public void getRelevantUsers() throws Exception {
        mockMvc.perform(get(UI_V1_USER + RELEVANT)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(5)))
                .andExpect(jsonPath("$[*].id").isNotEmpty())
                .andExpect(jsonPath("$[*].fullName").isNotEmpty())
                .andExpect(jsonPath("$[*].username").isNotEmpty())
                .andExpect(jsonPath("$[*].about").isNotEmpty())
                .andExpect(jsonPath("$[*].isPrivateProfile").isNotEmpty())
                .andExpect(jsonPath("$[*].isMutedDirectMessages").isNotEmpty())
                .andExpect(jsonPath("$[*].isUserBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isMyProfileBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isWaitingForApprove").isNotEmpty())
                .andExpect(jsonPath("$[*].isFollower").isNotEmpty());
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/search/MrCat - Search users by username")
    public void searchUsersByUsername() throws Exception {
        mockMvc.perform(get(UI_V1_USER + SEARCH_USERNAME, TestConstants.USERNAME)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(6)))
                .andExpect(jsonPath("$[*].id").isNotEmpty())
                .andExpect(jsonPath("$[*].fullName").isNotEmpty())
                .andExpect(jsonPath("$[*].username").isNotEmpty())
                .andExpect(jsonPath("$[*].about").isNotEmpty())
                .andExpect(jsonPath("$[*].isPrivateProfile").isNotEmpty())
                .andExpect(jsonPath("$[*].isMutedDirectMessages").isNotEmpty())
                .andExpect(jsonPath("$[*].isUserBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isMyProfileBlocked").isNotEmpty())
                .andExpect(jsonPath("$[*].isWaitingForApprove").isNotEmpty())
                .andExpect(jsonPath("$[*].isFollower").isNotEmpty());
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/items/search/test - Search users by username Not Found")
    public void searchUsersByUsername_NotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + SEARCH_USERNAME, "test")
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*]", hasSize(0)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/search/MrCat - Search by text")
    public void searchByText() throws Exception {
        mockMvc.perform(get(UI_V1_USER + SEARCH_TEXT, TestConstants.USERNAME)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.tweetCount").value(0L))
                .andExpect(jsonPath("$.tags[*]", hasSize(0)))
                .andExpect(jsonPath("$.users[*]", hasSize(6)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/start - Start use twitter")
    public void startUseTwitter() throws Exception {
        mockMvc.perform(get(UI_V1_USER + START)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").value(true));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/user - Update user profile")
    public void updateUserProfile() throws Exception {
        UserRequest userRequest = new UserRequest();
        userRequest.setFullName("test");
        userRequest.setAbout("test");
        userRequest.setLocation("test");
        userRequest.setWebsite("test");
        mockMvc.perform(put(UI_V1_USER)
                        .content(mapper.writeValueAsString(userRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.email").value(TestConstants.USER_EMAIL))
                .andExpect(jsonPath("$.fullName").value("test"))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.location").value("test"))
                .andExpect(jsonPath("$.about").value("test"))
                .andExpect(jsonPath("$.website").value("test"))
                .andExpect(jsonPath("$.countryCode").value(TestConstants.COUNTRY))
                .andExpect(jsonPath("$.phone").value(TestConstants.PHONE))
                .andExpect(jsonPath("$.country").value(TestConstants.COUNTRY))
                .andExpect(jsonPath("$.gender").value(TestConstants.GENDER))
                .andExpect(jsonPath("$.birthday").value(TestConstants.BIRTHDAY))
                .andExpect(jsonPath("$.registrationDate").value(TestConstants.REGISTRATION_DATE))
                .andExpect(jsonPath("$.tweetCount").value(TestConstants.TWEET_COUNT))
                .andExpect(jsonPath("$.mediaTweetCount").value(TestConstants.MEDIA_TWEET_COUNT))
                .andExpect(jsonPath("$.likeCount").value(TestConstants.LIKE_TWEET_COUNT))
                .andExpect(jsonPath("$.notificationsCount").value(3))
                .andExpect(jsonPath("$.active").value(true))
                .andExpect(jsonPath("$.profileCustomized").value(true))
                .andExpect(jsonPath("$.profileStarted").value(true))
                .andExpect(jsonPath("$.backgroundColor").value(TestConstants.BACKGROUND_COLOR))
                .andExpect(jsonPath("$.colorScheme").value(TestConstants.COLOR_SCHEME))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.wallpaper").value(TestConstants.WALLPAPER_SRC))
                .andExpect(jsonPath("$.pinnedTweetId").value(TestConstants.PINNED_TWEET_ID))
                .andExpect(jsonPath("$.followersSize").value(2L))
                .andExpect(jsonPath("$.followingSize").value(1L))
                .andExpect(jsonPath("$.followerRequestsSize").value(1L))
                .andExpect(jsonPath("$.unreadMessagesCount").value(1L))
                .andExpect(jsonPath("$.isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.isPrivateProfile").value(false));
    }

    @Test
    @DisplayName("[400] PUT /ui/v1/user - Should username length is 0")
    public void updateUserProfile_ShouldUsernameLengthIs0() throws Exception {
        UserRequest userRequest = new UserRequest();
        userRequest.setFullName("");
        mockMvc.perform(put(UI_V1_USER)
                        .content(mapper.writeValueAsString(userRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INCORRECT_USERNAME_LENGTH)));
    }

    @Test
    @DisplayName("[400] PUT /ui/v1/user - Should username length more than 50")
    public void updateUserProfile_ShouldUsernameLengthMoreThan50() throws Exception {
        UserRequest userRequest = new UserRequest();
        userRequest.setFullName(TestConstants.LINK_DESCRIPTION);
        mockMvc.perform(put(UI_V1_USER)
                        .content(mapper.writeValueAsString(userRequest))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INCORRECT_USERNAME_LENGTH)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/subscribe/1 - Subscribe to notifications")
    public void subscribeToNotifications() throws Exception {
        mockMvc.perform(get(UI_V1_USER + SUBSCRIBE_USER_ID, 1)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(true)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/subscribe/1 - Unsubscribe from notifications")
    public void unsubscribeToNotifications() throws Exception {
        mockMvc.perform(get(UI_V1_USER + "/subscribe/2")
                        .header(AUTH_USER_ID_HEADER, 1L))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(false)));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/subscribe/99 - Should user Not Found by id")
    public void processSubscribeToNotifications_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + SUBSCRIBE_USER_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }

    @Test
    @DisplayName("[400] GET /ui/v1/user/subscribe/5 - Should user blocked by other user")
    public void processSubscribeToNotifications_ShouldUserBlockedByOtherUser() throws Exception {
        mockMvc.perform(get(UI_V1_USER + SUBSCRIBE_USER_ID, 5)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(USER_PROFILE_BLOCKED)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/pin/tweet/43 - Pin tweet to profile by id")
    public void processPinTweet() throws Exception {
        mockMvc.perform(get(UI_V1_USER + PIN_TWEET_ID, 43)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(43)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/pin/tweet/40 - Unpin tweet from profile by id")
    public void processUnpinTweet() throws Exception {
        mockMvc.perform(get(UI_V1_USER + PIN_TWEET_ID, 40)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(0)));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/pin/tweet/99 - Should tweet Not Found by id")
    public void processPinTweet_ShouldTweetNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + PIN_TWEET_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(TWEET_NOT_FOUND)));
    }

    @Test
    @DisplayName("[200] GET /ui/v1/user/details/1 - Get user details by id")
    public void getUserDetails() throws Exception {
        mockMvc.perform(get(UI_V1_USER + DETAILS_USER_ID, 3)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(3L))
                .andExpect(jsonPath("$.fullName").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.followersSize").value(0L))
                .andExpect(jsonPath("$.followingSize").value(0L))
                .andExpect(jsonPath("$.sameFollowers[*]", hasSize(0)))
                .andExpect(jsonPath("$.isPrivateProfile").value(true))
                .andExpect(jsonPath("$.isUserBlocked").value(false))
                .andExpect(jsonPath("$.isMyProfileBlocked").value(false))
                .andExpect(jsonPath("$.isWaitingForApprove").value(true))
                .andExpect(jsonPath("$.isFollower").value(false));
    }

    @Test
    @DisplayName("[404] GET /ui/v1/user/details/99 - Should user details Not Found by id")
    public void getUserDetails_ShouldUserNotFound() throws Exception {
        mockMvc.perform(get(UI_V1_USER + DETAILS_USER_ID, 99)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$", is(String.format(USER_ID_NOT_FOUND, 99))));
    }

    @Test
    @DisplayName("[400] GET /ui/v1/user/details/5 - Should user blocked by other user")
    public void getUserDetails_ShouldUserBlockedByOtherUser() throws Exception {
        mockMvc.perform(get(UI_V1_USER + DETAILS_USER_ID, 5)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(USER_PROFILE_BLOCKED)));
    }
}
`
                                        }
                                      },
                                      "UserSettingsControllerTest.java": {
                                        "file": {
                                          "contents": `package com.gmail.merikbest2015.controller.rest;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.gmail.merikbest2015.dto.request.SettingsRequest;
import com.gmail.merikbest2015.enums.BackgroundColorType;
import com.gmail.merikbest2015.enums.ColorSchemeType;
import com.gmail.merikbest2015.util.TestConstants;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import static com.gmail.merikbest2015.constants.ErrorMessage.*;
import static com.gmail.merikbest2015.constants.PathConstants.*;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Sql(value = {"/sql-test/clear-user-db.sql", "/sql-test/populate-user-db.sql"}, executionPhase = BEFORE_TEST_METHOD)
@Sql(value = {"/sql-test/clear-user-db.sql"}, executionPhase = AFTER_TEST_METHOD)
public class UserSettingsControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper mapper;

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/username - Update username")
    public void updateUsername() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setUsername("test");
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + USERNAME)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("test")));
    }

    @Test
    @DisplayName("[400] PUT /ui/v1/settings/update/username - Should username length is 0")
    public void updateUsername_ShouldUsernameLengthIs0() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setUsername("");
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + USERNAME)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INCORRECT_USERNAME_LENGTH)));
    }

    @Test
    @DisplayName("[400] PUT /ui/v1/settings/update/username - Should username length more than 50")
    public void updateUsername_ShouldUsernameLengthMoreThan50() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setUsername(TestConstants.LINK_DESCRIPTION);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + USERNAME)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INCORRECT_USERNAME_LENGTH)));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/email - Update email")
    public void updateEmail() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setEmail("test2013@test.test");
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + EMAIL)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.user.id").value(TestConstants.USER_ID))
                .andExpect(jsonPath("$.user.email").value("test2013@test.test"))
                .andExpect(jsonPath("$.user.fullName").value(TestConstants.FULL_NAME))
                .andExpect(jsonPath("$.user.username").value(TestConstants.USERNAME))
                .andExpect(jsonPath("$.user.location").value(TestConstants.LOCATION))
                .andExpect(jsonPath("$.user.about").value(TestConstants.ABOUT))
                .andExpect(jsonPath("$.user.website").value(TestConstants.WEBSITE))
                .andExpect(jsonPath("$.user.countryCode").value(TestConstants.COUNTRY))
                .andExpect(jsonPath("$.user.phone").value(TestConstants.PHONE))
                .andExpect(jsonPath("$.user.country").value(TestConstants.COUNTRY))
                .andExpect(jsonPath("$.user.gender").value(TestConstants.GENDER))
                .andExpect(jsonPath("$.user.birthday").value(TestConstants.BIRTHDAY))
                .andExpect(jsonPath("$.user.registrationDate").value(TestConstants.REGISTRATION_DATE))
                .andExpect(jsonPath("$.user.tweetCount").value(TestConstants.TWEET_COUNT))
                .andExpect(jsonPath("$.user.mediaTweetCount").value(TestConstants.MEDIA_TWEET_COUNT))
                .andExpect(jsonPath("$.user.likeCount").value(TestConstants.LIKE_TWEET_COUNT))
                .andExpect(jsonPath("$.user.notificationsCount").value(3))
                .andExpect(jsonPath("$.user.active").value(true))
                .andExpect(jsonPath("$.user.profileCustomized").value(true))
                .andExpect(jsonPath("$.user.profileStarted").value(true))
                .andExpect(jsonPath("$.user.backgroundColor").value(TestConstants.BACKGROUND_COLOR))
                .andExpect(jsonPath("$.user.colorScheme").value(TestConstants.COLOR_SCHEME))
                .andExpect(jsonPath("$.user.avatar").value(TestConstants.AVATAR_SRC_1))
                .andExpect(jsonPath("$.user.wallpaper").value(TestConstants.WALLPAPER_SRC))
                .andExpect(jsonPath("$.user.pinnedTweetId").value(TestConstants.PINNED_TWEET_ID))
                .andExpect(jsonPath("$.user.followersSize").value(2L))
                .andExpect(jsonPath("$.user.followingSize").value(1L))
                .andExpect(jsonPath("$.user.followerRequestsSize").value(1L))
                .andExpect(jsonPath("$.user.unreadMessagesCount").value(1L))
                .andExpect(jsonPath("$.user.isMutedDirectMessages").value(true))
                .andExpect(jsonPath("$.user.isPrivateProfile").value(false));
    }

    @Test
    @DisplayName("[403] PUT /ui/v1/settings/update/email -Should user email is exist")
    public void updateEmail_ShouldUserEmailIsExist() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setEmail("test2015@test.test");
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + EMAIL)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isForbidden())
                .andExpect(jsonPath("$", is(EMAIL_HAS_ALREADY_BEEN_TAKEN)));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/phone - Update phone")
    public void updatePhone() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setCountryCode("UK");
        request.setPhone(123456789L);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + PHONE)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.countryCode").value("UK"))
                .andExpect(jsonPath("$.phone").value(123456789L));
    }

    @Test
    @DisplayName("[400] PUT /ui/v1/settings/update/phone - Should phone number length lower than 6 digits")
    public void updatePhone_ShouldPhoneNumberLengthLowerThan6Digits() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setCountryCode("UK");
        request.setPhone(123L);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + PHONE)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INVALID_PHONE_NUMBER)));
    }

    @Test
    @DisplayName("[400] PUT /ui/v1/settings/update/phone - Should phone number length more than 10 digits")
    public void updatePhone_ShouldPhoneNumberLengthMoreThan10Digits() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setCountryCode("UK");
        request.setPhone(12345678900L);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + PHONE)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INVALID_PHONE_NUMBER)));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/country - Update country")
    public void updateCountry() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setCountry("UK");
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + COUNTRY)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("UK")));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/gender - Update gender")
    public void updateGender() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setGender("Male");
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + GENDER)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("Male")));
    }

    @Test
    @DisplayName("[400] PUT /ui/v1/settings/update/gender - Should gender length is 0 characters")
    public void updateGender_ShouldGenderLengthIs0() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setGender("");
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + GENDER)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INVALID_GENDER_LENGTH)));
    }

    @Test
    @DisplayName("[400] PUT /ui/v1/settings/update/gender - Should gender length more than 30 characters")
    public void updateGender_ShouldGenderLengthMoreThan30() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setGender(TestConstants.LINK_DESCRIPTION);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + GENDER)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$", is(INVALID_GENDER_LENGTH)));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/language - Update language")
    public void updateLanguage() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setLanguage("English");
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + LANGUAGE)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("English")));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/direct - Update direct message requests")
    public void updateDirectMessageRequests() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setMutedDirectMessages(false);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + DIRECT)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(false)));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/private - Update private profile")
    public void updatePrivateProfile() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setPrivateProfile(true);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + PRIVATE)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is(true)));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/color_scheme - Update color scheme")
    public void updateColorScheme() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setColorScheme(ColorSchemeType.GREEN);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + COLOR_SCHEME)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("GREEN")));
    }

    @Test
    @DisplayName("[200] PUT /ui/v1/settings/update/background_color - Update background color")
    public void updateBackgroundColor() throws Exception {
        SettingsRequest request = new SettingsRequest();
        request.setBackgroundColor(BackgroundColorType.DIM);
        mockMvc.perform(put(UI_V1_USER_SETTINGS_UPDATE + BACKGROUND_COLOR)
                        .content(mapper.writeValueAsString(request))
                        .contentType(MediaType.APPLICATION_JSON_VALUE)
                        .header(AUTH_USER_ID_HEADER, TestConstants.USER_ID))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", is("DIM")));
    }
}
`
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "UserServiceApplicationTest.java": {
                                "file": {
                                  "contents": `package com.gmail.merikbest2015;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class UserServiceApplicationTest {

    @Test
    void contextLoads() {
    }

    @Test
    public void main() {
        UserServiceApplication.main(new String[] {});
    }
}
`
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}]
